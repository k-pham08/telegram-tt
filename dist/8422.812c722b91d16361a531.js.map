{"version":3,"file":"8422.812c722b91d16361a531.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiError, ApiChatMember, ApiChatFolder, ApiChatlistExportedInvite,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n} from '../../../types';\nimport type {\n  GlobalState, ActionReturnType, TabArgs,\n} from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo,\n  updateListedTopicIds,\n  updateChatFullInfo,\n  replaceChatFullInfo,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n  selectTabState, selectThreadOriginChat, selectThread, selectChatFullInfo,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  isUserId,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID, noRequestThreadInfoUpdate, tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== id || currentThreadId !== threadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === id, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      callApi('abortChatRequests', { chatId: currentChatId, threadId: isChatOpened ? currentThreadId : undefined });\n    }\n  }\n\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID && !noRequestThreadInfoUpdate) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({\n        id, threadId, tabId, noRequestThreadInfoUpdate: true,\n      });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({\n        id,\n        threadId: result.topMessageId,\n        tabId,\n        shouldReplaceLast: true,\n        noRequestThreadInfoUpdate: true,\n      });\n    } else {\n      actions.openChat({\n        id,\n        threadId: topMessageId,\n        tabId,\n        noRequestThreadInfoUpdate: true,\n      });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n      return;\n    }\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && commentId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chatId);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chatId, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  if (isUserId(chatId)) {\n    global = updateUserFullInfo(global, chatId, {\n      isTranslationDisabled: isEnabled ? undefined : true,\n    });\n  } else {\n    global = updateChatFullInfo(global, chatId, {\n      isTranslationDisabled: isEnabled ? undefined : true,\n    });\n  }\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChatFullInfo } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","arguments","length","undefined","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","_ref7","tabId","currentChat","selectCurrentChat","visibleUsers","_ref8","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len","_ref9","Array","_key","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","replaceChatFullInfo","stickerSet","loadStickers","stickerSetInfo","migrateChat","_len2","_ref10","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len3","_ref11","_key3","selectUser","isBot","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref13","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref14","_key6","isChatBasicGroup","newChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","selectCurrentMessageList","filter","Boolean","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","noRequestThreadInfoUpdate","currentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","reduce","_ref2","_ref3","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","openPreviousChat","shouldReplaceLast","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","_payload$isMuted","muteUntil","isMuted","_payload$isMuted2","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref4","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","text","formatShareText","slug","chatOrChannelPostId","Number","commentId","comment","inviteHash","voicechat","livestream","substring","start","startApp","startapp","originalParts","webAppName","isWebApp","usernames","c","channelPostId","_len4","_ref12","_key4","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","discussionChatId","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","_ref5","formattedText","replyingToId","readInboxMessageIdByTopicId","_ref6","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","isUserId","updateUserFullInfo","isTranslationDisabled","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}