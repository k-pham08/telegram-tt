{"version":3,"file":"8312.07b0409e90b28b8c39f3.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/currentTimeSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        /* eslint-disable */console.log(...oo_oo(`5efe1e09_0`,'[MV] PictureInPicture Error', err));\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        /* eslint-disable */console.log(...oo_oo(`5efe1e09_1`,'[MV] PictureInPicture Error', err));\n      }\n    }\n  }\n}\n/* eslint-disable */;function oo_cm(){try{return (0,eval)(\"globalThis._console_ninja\") || (0,eval)(\"/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x43ccbf=_0x2152;(function(_0x25c98f,_0x10ed1d){var _0x52144e=_0x2152,_0x5afabd=_0x25c98f();while(!![]){try{var _0x4457f2=-parseInt(_0x52144e(0x17a))/0x1*(-parseInt(_0x52144e(0x12e))/0x2)+-parseInt(_0x52144e(0xd5))/0x3*(parseInt(_0x52144e(0xf6))/0x4)+parseInt(_0x52144e(0x170))/0x5*(-parseInt(_0x52144e(0x13f))/0x6)+-parseInt(_0x52144e(0x165))/0x7*(-parseInt(_0x52144e(0x17c))/0x8)+-parseInt(_0x52144e(0x161))/0x9*(parseInt(_0x52144e(0x11a))/0xa)+-parseInt(_0x52144e(0x19f))/0xb*(-parseInt(_0x52144e(0x14f))/0xc)+parseInt(_0x52144e(0x10e))/0xd*(parseInt(_0x52144e(0x16e))/0xe);if(_0x4457f2===_0x10ed1d)break;else _0x5afabd['push'](_0x5afabd['shift']());}catch(_0x2f962b){_0x5afabd['push'](_0x5afabd['shift']());}}}(_0x5750,0x4707b));var ue=Object['create'],te=Object['defineProperty'],he=Object[_0x43ccbf(0x12f)],le=Object['getOwnPropertyNames'],fe=Object[_0x43ccbf(0xdc)],_e=Object[_0x43ccbf(0xf7)][_0x43ccbf(0x1a3)],pe=(_0x32dd3e,_0x1a1024,_0x498694,_0x44a3b3)=>{var _0x4f2fb3=_0x43ccbf;if(_0x1a1024&&typeof _0x1a1024==_0x4f2fb3(0x194)||typeof _0x1a1024==_0x4f2fb3(0x198)){for(let _0x33370a of le(_0x1a1024))!_e[_0x4f2fb3(0x188)](_0x32dd3e,_0x33370a)&&_0x33370a!==_0x498694&&te(_0x32dd3e,_0x33370a,{'get':()=>_0x1a1024[_0x33370a],'enumerable':!(_0x44a3b3=he(_0x1a1024,_0x33370a))||_0x44a3b3[_0x4f2fb3(0x126)]});}return _0x32dd3e;},ne=(_0x5094e9,_0x271128,_0x365cee)=>(_0x365cee=_0x5094e9!=null?ue(fe(_0x5094e9)):{},pe(_0x271128||!_0x5094e9||!_0x5094e9[_0x43ccbf(0x120)]?te(_0x365cee,_0x43ccbf(0xca),{'value':_0x5094e9,'enumerable':!0x0}):_0x365cee,_0x5094e9)),Q=class{constructor(_0x49d2f0,_0x3462bf,_0x3bf87e,_0x3c5ba3){var _0xf7510d=_0x43ccbf;this[_0xf7510d(0xf4)]=_0x49d2f0,this[_0xf7510d(0x18b)]=_0x3462bf,this[_0xf7510d(0x141)]=_0x3bf87e,this[_0xf7510d(0xe4)]=_0x3c5ba3,this['_allowedToSend']=!0x0,this[_0xf7510d(0x177)]=!0x0,this[_0xf7510d(0x12d)]=!0x1,this['_connecting']=!0x1,this[_0xf7510d(0xd4)]=!!this['global'][_0xf7510d(0xc4)],this[_0xf7510d(0x199)]=null,this['_connectAttemptCount']=0x0,this[_0xf7510d(0x14c)]=0x14,this['_webSocketErrorDocsLink']=_0xf7510d(0x192),this[_0xf7510d(0x137)]=(this[_0xf7510d(0xd4)]?_0xf7510d(0x15e):_0xf7510d(0xfb))+this[_0xf7510d(0x181)];}async[_0x43ccbf(0x110)](){var _0x2b5205=_0x43ccbf;if(this[_0x2b5205(0x199)])return this[_0x2b5205(0x199)];let _0x389a68;if(this[_0x2b5205(0xd4)])_0x389a68=this[_0x2b5205(0xf4)]['WebSocket'];else{if(this[_0x2b5205(0xf4)][_0x2b5205(0x1ae)]?.[_0x2b5205(0xf9)])_0x389a68=this[_0x2b5205(0xf4)][_0x2b5205(0x1ae)]?.[_0x2b5205(0xf9)];else try{let _0x804472=await import(_0x2b5205(0x10f));_0x389a68=(await import((await import(_0x2b5205(0x146)))[_0x2b5205(0x168)](_0x804472[_0x2b5205(0x17f)](this['nodeModules'],_0x2b5205(0x13c)))[_0x2b5205(0x123)]()))[_0x2b5205(0xca)];}catch{try{_0x389a68=require(require(_0x2b5205(0x10f))[_0x2b5205(0x17f)](this[_0x2b5205(0xe4)],'ws'));}catch{throw new Error(_0x2b5205(0x179));}}}return this[_0x2b5205(0x199)]=_0x389a68,_0x389a68;}['_connectToHostNow'](){var _0x58fb26=_0x43ccbf;this[_0x58fb26(0x152)]||this[_0x58fb26(0x12d)]||this[_0x58fb26(0x17d)]>=this[_0x58fb26(0x14c)]||(this[_0x58fb26(0x177)]=!0x1,this[_0x58fb26(0x152)]=!0x0,this[_0x58fb26(0x17d)]++,this['_ws']=new Promise((_0x1ff128,_0x51507f)=>{var _0x1ba88d=_0x58fb26;this[_0x1ba88d(0x110)]()[_0x1ba88d(0x12a)](_0x1db853=>{var _0x52b511=_0x1ba88d;let _0x310206=new _0x1db853(_0x52b511(0x16b)+this['host']+':'+this[_0x52b511(0x141)]);_0x310206[_0x52b511(0x173)]=()=>{var _0x587291=_0x52b511;this[_0x587291(0x11d)]=!0x1,this[_0x587291(0xe6)](_0x310206),this[_0x587291(0x103)](),_0x51507f(new Error('logger\\\\x20websocket\\\\x20error'));},_0x310206[_0x52b511(0xe2)]=()=>{var _0x5795f6=_0x52b511;this['_inBrowser']||_0x310206[_0x5795f6(0x19c)]&&_0x310206['_socket'][_0x5795f6(0xc3)]&&_0x310206[_0x5795f6(0x19c)][_0x5795f6(0xc3)](),_0x1ff128(_0x310206);},_0x310206[_0x52b511(0x19d)]=()=>{var _0x5490e5=_0x52b511;this[_0x5490e5(0x177)]=!0x0,this[_0x5490e5(0xe6)](_0x310206),this[_0x5490e5(0x103)]();},_0x310206[_0x52b511(0x124)]=_0x21e196=>{var _0x38bee3=_0x52b511;try{_0x21e196&&_0x21e196[_0x38bee3(0x15d)]&&this[_0x38bee3(0xd4)]&&JSON[_0x38bee3(0xea)](_0x21e196[_0x38bee3(0x15d)])[_0x38bee3(0x113)]==='reload'&&this[_0x38bee3(0xf4)][_0x38bee3(0xef)][_0x38bee3(0x143)]();}catch{}};})[_0x1ba88d(0x12a)](_0x273561=>(this[_0x1ba88d(0x12d)]=!0x0,this[_0x1ba88d(0x152)]=!0x1,this[_0x1ba88d(0x177)]=!0x1,this[_0x1ba88d(0x11d)]=!0x0,this[_0x1ba88d(0x17d)]=0x0,_0x273561))['catch'](_0x11d5ad=>(this['_connected']=!0x1,this[_0x1ba88d(0x152)]=!0x1,console['warn'](_0x1ba88d(0x11c)+this[_0x1ba88d(0x181)]),_0x51507f(new Error(_0x1ba88d(0x18f)+(_0x11d5ad&&_0x11d5ad['message'])))));}));}['_disposeWebsocket'](_0x59fd1e){var _0x468fb=_0x43ccbf;this[_0x468fb(0x12d)]=!0x1,this[_0x468fb(0x152)]=!0x1;try{_0x59fd1e['onclose']=null,_0x59fd1e[_0x468fb(0x173)]=null,_0x59fd1e[_0x468fb(0xe2)]=null;}catch{}try{_0x59fd1e[_0x468fb(0x186)]<0x2&&_0x59fd1e[_0x468fb(0x15c)]();}catch{}}[_0x43ccbf(0x103)](){var _0x2c6d4f=_0x43ccbf;clearTimeout(this[_0x2c6d4f(0x16f)]),!(this[_0x2c6d4f(0x17d)]>=this[_0x2c6d4f(0x14c)])&&(this['_reconnectTimeout']=setTimeout(()=>{var _0x1ffbf9=_0x2c6d4f;this['_connected']||this[_0x1ffbf9(0x152)]||(this[_0x1ffbf9(0xd3)](),this['_ws']?.['catch'](()=>this[_0x1ffbf9(0x103)]()));},0x1f4),this[_0x2c6d4f(0x16f)]['unref']&&this[_0x2c6d4f(0x16f)][_0x2c6d4f(0xc3)]());}async[_0x43ccbf(0xf8)](_0x236d2c){var _0x1b2497=_0x43ccbf;try{if(!this[_0x1b2497(0x11d)])return;this[_0x1b2497(0x177)]&&this[_0x1b2497(0xd3)](),(await this[_0x1b2497(0x117)])[_0x1b2497(0xf8)](JSON[_0x1b2497(0x13d)](_0x236d2c));}catch(_0x3ad953){console[_0x1b2497(0x196)](this[_0x1b2497(0x137)]+':\\\\x20'+(_0x3ad953&&_0x3ad953[_0x1b2497(0x19b)])),this[_0x1b2497(0x11d)]=!0x1,this[_0x1b2497(0x103)]();}}};function _0x2152(_0x4db430,_0x11a6a8){var _0x575054=_0x5750();return _0x2152=function(_0x215297,_0xb45fef){_0x215297=_0x215297-0xc3;var _0x452024=_0x575054[_0x215297];return _0x452024;},_0x2152(_0x4db430,_0x11a6a8);}function V(_0xc760b6,_0x380a46,_0x508716,_0x5e6b9c,_0x5e76d5){var _0x3977f1=_0x43ccbf;let _0x1d9d83=_0x508716['split'](',')[_0x3977f1(0xcd)](_0x3645ab=>{var _0xc12743=_0x3977f1;try{_0xc760b6[_0xc12743(0xdd)]||((_0x5e76d5==='next.js'||_0x5e76d5==='remix'||_0x5e76d5===_0xc12743(0xd9))&&(_0x5e76d5+=_0xc760b6[_0xc12743(0x1ae)]?.['versions']?.[_0xc12743(0x169)]?_0xc12743(0x118):_0xc12743(0xc8)),_0xc760b6[_0xc12743(0xdd)]={'id':+new Date(),'tool':_0x5e76d5});let _0x1c12bf=new Q(_0xc760b6,_0x380a46,_0x3645ab,_0x5e6b9c);return _0x1c12bf[_0xc12743(0xf8)][_0xc12743(0x1af)](_0x1c12bf);}catch(_0xa1a4ce){return console[_0xc12743(0x196)](_0xc12743(0x125),_0xa1a4ce&&_0xa1a4ce[_0xc12743(0x19b)]),()=>{};}});return _0x538ac6=>_0x1d9d83[_0x3977f1(0x1a9)](_0x218488=>_0x218488(_0x538ac6));}function H(_0x32ae85){var _0x11a3b7=_0x43ccbf;let _0x1f3b64=function(_0x149da1,_0x1cac4b){return _0x1cac4b-_0x149da1;},_0x21aac8;if(_0x32ae85[_0x11a3b7(0xed)])_0x21aac8=function(){var _0x6e4422=_0x11a3b7;return _0x32ae85[_0x6e4422(0xed)]['now']();};else{if(_0x32ae85['process']&&_0x32ae85[_0x11a3b7(0x1ae)]['hrtime'])_0x21aac8=function(){var _0x4f7240=_0x11a3b7;return _0x32ae85[_0x4f7240(0x1ae)][_0x4f7240(0x1b2)]();},_0x1f3b64=function(_0x63cd41,_0x93ea86){return 0x3e8*(_0x93ea86[0x0]-_0x63cd41[0x0])+(_0x93ea86[0x1]-_0x63cd41[0x1])/0xf4240;};else try{let {performance:_0x28d2ad}=require(_0x11a3b7(0xd6));_0x21aac8=function(){var _0x4aa65b=_0x11a3b7;return _0x28d2ad[_0x4aa65b(0x156)]();};}catch{_0x21aac8=function(){return+new Date();};}}return{'elapsed':_0x1f3b64,'timeStamp':_0x21aac8,'now':()=>Date[_0x11a3b7(0x156)]()};}function X(_0x470fde,_0x106540,_0x4b7463){var _0x23e2bd=_0x43ccbf;if(_0x470fde[_0x23e2bd(0x11e)]!==void 0x0)return _0x470fde[_0x23e2bd(0x11e)];let _0x1478fb=_0x470fde[_0x23e2bd(0x1ae)]?.[_0x23e2bd(0x10c)]?.['node'];return _0x1478fb&&_0x4b7463===_0x23e2bd(0xdb)?_0x470fde['_consoleNinjaAllowedToStart']=!0x1:_0x470fde[_0x23e2bd(0x11e)]=_0x1478fb||!_0x106540||_0x470fde[_0x23e2bd(0xef)]?.[_0x23e2bd(0x12c)]&&_0x106540[_0x23e2bd(0x1a0)](_0x470fde['location']['hostname']),_0x470fde[_0x23e2bd(0x11e)];}((_0x14a8cc,_0x349b6c,_0x3a9d4e,_0x4bbae2,_0x16f16c,_0x5dea60,_0x3e7faa,_0x38cbe4,_0x54a870)=>{var _0x512a37=_0x43ccbf;if(_0x14a8cc[_0x512a37(0x101)])return _0x14a8cc[_0x512a37(0x101)];if(!X(_0x14a8cc,_0x38cbe4,_0x16f16c))return _0x14a8cc[_0x512a37(0x101)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x14a8cc['_console_ninja'];let _0x16a222={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x1b0717={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2},_0x3ff222=H(_0x14a8cc),_0x3f5d2d=_0x3ff222[_0x512a37(0x151)],_0x399678=_0x3ff222[_0x512a37(0x107)],_0x4b9a61=_0x3ff222[_0x512a37(0x156)],_0x586ea4={'hits':{},'ts':{}},_0x57cf86=_0x2f9899=>{_0x586ea4['ts'][_0x2f9899]=_0x399678();},_0x509aac=(_0xf82d3a,_0x277446)=>{var _0x34b2a8=_0x512a37;let _0x32a8b3=_0x586ea4['ts'][_0x277446];if(delete _0x586ea4['ts'][_0x277446],_0x32a8b3){let _0x4fb729=_0x3f5d2d(_0x32a8b3,_0x399678());_0x172c75(_0x4a295a(_0x34b2a8(0x14b),_0xf82d3a,_0x4b9a61(),_0x2e9713,[_0x4fb729],_0x277446));}},_0x7e61e6=_0x30047a=>_0x58dc84=>{var _0x52dc3e=_0x512a37;try{_0x57cf86(_0x58dc84),_0x30047a(_0x58dc84);}finally{_0x14a8cc[_0x52dc3e(0x18a)][_0x52dc3e(0x14b)]=_0x30047a;}},_0x20f561=_0x74ebdc=>_0x130916=>{var _0x213736=_0x512a37;try{let [_0x27faef,_0x2af625]=_0x130916['split'](_0x213736(0x1a4));_0x509aac(_0x2af625,_0x27faef),_0x74ebdc(_0x27faef);}finally{_0x14a8cc[_0x213736(0x18a)]['timeEnd']=_0x74ebdc;}};_0x14a8cc[_0x512a37(0x101)]={'consoleLog':(_0xbeff1b,_0x3e26b5)=>{var _0xa256f1=_0x512a37;_0x14a8cc[_0xa256f1(0x18a)]['log'][_0xa256f1(0xe5)]!==_0xa256f1(0x13e)&&_0x172c75(_0x4a295a('log',_0xbeff1b,_0x4b9a61(),_0x2e9713,_0x3e26b5));},'consoleTrace':(_0x583ba7,_0x2c2950)=>{var _0x1c7d8b=_0x512a37;_0x14a8cc[_0x1c7d8b(0x18a)][_0x1c7d8b(0x112)][_0x1c7d8b(0xe5)]!==_0x1c7d8b(0x114)&&_0x172c75(_0x4a295a(_0x1c7d8b(0x115),_0x583ba7,_0x4b9a61(),_0x2e9713,_0x2c2950));},'consoleTime':()=>{var _0x936b2b=_0x512a37;_0x14a8cc[_0x936b2b(0x18a)][_0x936b2b(0x14b)]=_0x7e61e6(_0x14a8cc[_0x936b2b(0x18a)][_0x936b2b(0x14b)]);},'consoleTimeEnd':()=>{var _0x25c6c4=_0x512a37;_0x14a8cc['console'][_0x25c6c4(0x11b)]=_0x20f561(_0x14a8cc[_0x25c6c4(0x18a)][_0x25c6c4(0x11b)]);},'autoLog':(_0x49de73,_0x464a47)=>{var _0x4ff49c=_0x512a37;_0x172c75(_0x4a295a(_0x4ff49c(0x112),_0x464a47,_0x4b9a61(),_0x2e9713,[_0x49de73]));},'autoLogMany':(_0x4dfd04,_0x1cd3dd)=>{var _0x209c0c=_0x512a37;_0x172c75(_0x4a295a(_0x209c0c(0x112),_0x4dfd04,_0x4b9a61(),_0x2e9713,_0x1cd3dd));},'autoTrace':(_0x115074,_0x8ffda1)=>{var _0xd430a8=_0x512a37;_0x172c75(_0x4a295a(_0xd430a8(0x115),_0x8ffda1,_0x4b9a61(),_0x2e9713,[_0x115074]));},'autoTraceMany':(_0x587660,_0x11a0b9)=>{var _0x59cb41=_0x512a37;_0x172c75(_0x4a295a(_0x59cb41(0x115),_0x587660,_0x4b9a61(),_0x2e9713,_0x11a0b9));},'autoTime':(_0x5e6f88,_0x2b8ea4,_0x603ebf)=>{_0x57cf86(_0x603ebf);},'autoTimeEnd':(_0x310eee,_0x2b5459,_0x285c63)=>{_0x509aac(_0x2b5459,_0x285c63);}};let _0x172c75=V(_0x14a8cc,_0x349b6c,_0x3a9d4e,_0x4bbae2,_0x16f16c),_0x2e9713=_0x14a8cc['_console_ninja_session'];class _0x56130d{constructor(){var _0x40f114=_0x512a37;this[_0x40f114(0xf2)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\\\xA0-\\\\uFFFF][_$a-zA-Z0-9\\\\xA0-\\\\uFFFF]*$/,this[_0x40f114(0x183)]=/^(0|[1-9][0-9]*)$/,this[_0x40f114(0xe1)]=/'([^\\\\\\\\']|\\\\\\\\')*'/,this['_undefined']=_0x14a8cc[_0x40f114(0x121)],this[_0x40f114(0x10d)]=_0x14a8cc[_0x40f114(0x1a1)],this['_getOwnPropertyDescriptor']=Object['getOwnPropertyDescriptor'],this[_0x40f114(0xf0)]=Object[_0x40f114(0x163)],this[_0x40f114(0x150)]=_0x14a8cc[_0x40f114(0x144)],this['_regExpToString']=RegExp[_0x40f114(0xf7)][_0x40f114(0x123)],this['_dateToString']=Date[_0x40f114(0xf7)][_0x40f114(0x123)];}['serialize'](_0x55a2bb,_0x1b6604,_0x287ba9,_0x2d9852){var _0x4d22f2=_0x512a37,_0x1662fa=this,_0x5b8312=_0x287ba9['autoExpand'];function _0xc5be16(_0x56900e,_0xc0b5c1,_0x4433fc){var _0x4b88ed=_0x2152;_0xc0b5c1['type']=_0x4b88ed(0x1aa),_0xc0b5c1[_0x4b88ed(0x10a)]=_0x56900e[_0x4b88ed(0x19b)],_0x609320=_0x4433fc[_0x4b88ed(0x169)]['current'],_0x4433fc[_0x4b88ed(0x169)][_0x4b88ed(0x157)]=_0xc0b5c1,_0x1662fa[_0x4b88ed(0xc5)](_0xc0b5c1,_0x4433fc);}if(_0x1b6604&&_0x1b6604[_0x4d22f2(0x116)])_0xc5be16(_0x1b6604,_0x55a2bb,_0x287ba9);else try{_0x287ba9[_0x4d22f2(0x13a)]++,_0x287ba9['autoExpand']&&_0x287ba9[_0x4d22f2(0x1ad)]['push'](_0x1b6604);var _0x2abf77,_0x179ba3,_0x437a71,_0x1f4318,_0x1f6b26=[],_0x512271=[],_0x406cf2,_0x252ae4=this[_0x4d22f2(0x13b)](_0x1b6604),_0x3e04a5=_0x252ae4===_0x4d22f2(0x1ac),_0x2abb0a=!0x1,_0x4828a1=_0x252ae4===_0x4d22f2(0x198),_0x34ff23=this['_isPrimitiveType'](_0x252ae4),_0x380607=this[_0x4d22f2(0x158)](_0x252ae4),_0x679d7f=_0x34ff23||_0x380607,_0x37a5d5={},_0x2e60f3=0x0,_0x2230f8=!0x1,_0x609320,_0x3acb99=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x287ba9[_0x4d22f2(0xd8)]){if(_0x3e04a5){if(_0x179ba3=_0x1b6604['length'],_0x179ba3>_0x287ba9['elements']){for(_0x437a71=0x0,_0x1f4318=_0x287ba9[_0x4d22f2(0x130)],_0x2abf77=_0x437a71;_0x2abf77<_0x1f4318;_0x2abf77++)_0x512271[_0x4d22f2(0x1a6)](_0x1662fa[_0x4d22f2(0x172)](_0x1f6b26,_0x1b6604,_0x252ae4,_0x2abf77,_0x287ba9));_0x55a2bb[_0x4d22f2(0xe9)]=!0x0;}else{for(_0x437a71=0x0,_0x1f4318=_0x179ba3,_0x2abf77=_0x437a71;_0x2abf77<_0x1f4318;_0x2abf77++)_0x512271[_0x4d22f2(0x1a6)](_0x1662fa[_0x4d22f2(0x172)](_0x1f6b26,_0x1b6604,_0x252ae4,_0x2abf77,_0x287ba9));}_0x287ba9['autoExpandPropertyCount']+=_0x512271[_0x4d22f2(0x155)];}if(!(_0x252ae4===_0x4d22f2(0x17e)||_0x252ae4===_0x4d22f2(0x121))&&!_0x34ff23&&_0x252ae4!=='String'&&_0x252ae4!==_0x4d22f2(0x14e)&&_0x252ae4!==_0x4d22f2(0x159)){var _0x5b1dce=_0x2d9852[_0x4d22f2(0x129)]||_0x287ba9[_0x4d22f2(0x129)];if(this[_0x4d22f2(0x180)](_0x1b6604)?(_0x2abf77=0x0,_0x1b6604[_0x4d22f2(0x1a9)](function(_0x1ec5f5){var _0x3a11b8=_0x4d22f2;if(_0x2e60f3++,_0x287ba9[_0x3a11b8(0x154)]++,_0x2e60f3>_0x5b1dce){_0x2230f8=!0x0;return;}if(!_0x287ba9[_0x3a11b8(0x160)]&&_0x287ba9[_0x3a11b8(0xde)]&&_0x287ba9[_0x3a11b8(0x154)]>_0x287ba9['autoExpandLimit']){_0x2230f8=!0x0;return;}_0x512271['push'](_0x1662fa[_0x3a11b8(0x172)](_0x1f6b26,_0x1b6604,_0x3a11b8(0xd0),_0x2abf77++,_0x287ba9,function(_0x2152a6){return function(){return _0x2152a6;};}(_0x1ec5f5)));})):this[_0x4d22f2(0xf3)](_0x1b6604)&&_0x1b6604['forEach'](function(_0x352abb,_0x150a02){var _0x1ee9a7=_0x4d22f2;if(_0x2e60f3++,_0x287ba9[_0x1ee9a7(0x154)]++,_0x2e60f3>_0x5b1dce){_0x2230f8=!0x0;return;}if(!_0x287ba9[_0x1ee9a7(0x160)]&&_0x287ba9['autoExpand']&&_0x287ba9['autoExpandPropertyCount']>_0x287ba9[_0x1ee9a7(0x1a7)]){_0x2230f8=!0x0;return;}var _0x1eaa85=_0x150a02['toString']();_0x1eaa85[_0x1ee9a7(0x155)]>0x64&&(_0x1eaa85=_0x1eaa85[_0x1ee9a7(0x1a5)](0x0,0x64)+_0x1ee9a7(0x131)),_0x512271[_0x1ee9a7(0x1a6)](_0x1662fa[_0x1ee9a7(0x172)](_0x1f6b26,_0x1b6604,'Map',_0x1eaa85,_0x287ba9,function(_0x3fcdd2){return function(){return _0x3fcdd2;};}(_0x352abb)));}),!_0x2abb0a){try{for(_0x406cf2 in _0x1b6604)if(!(_0x3e04a5&&_0x3acb99['test'](_0x406cf2))&&!this[_0x4d22f2(0xcc)](_0x1b6604,_0x406cf2,_0x287ba9)){if(_0x2e60f3++,_0x287ba9['autoExpandPropertyCount']++,_0x2e60f3>_0x5b1dce){_0x2230f8=!0x0;break;}if(!_0x287ba9[_0x4d22f2(0x160)]&&_0x287ba9[_0x4d22f2(0xde)]&&_0x287ba9[_0x4d22f2(0x154)]>_0x287ba9[_0x4d22f2(0x1a7)]){_0x2230f8=!0x0;break;}_0x512271[_0x4d22f2(0x1a6)](_0x1662fa['_addObjectProperty'](_0x1f6b26,_0x37a5d5,_0x1b6604,_0x252ae4,_0x406cf2,_0x287ba9));}}catch{}if(_0x37a5d5[_0x4d22f2(0x149)]=!0x0,_0x4828a1&&(_0x37a5d5[_0x4d22f2(0x128)]=!0x0),!_0x2230f8){var _0x142b7e=[]['concat'](this['_getOwnPropertyNames'](_0x1b6604))['concat'](this[_0x4d22f2(0xc6)](_0x1b6604));for(_0x2abf77=0x0,_0x179ba3=_0x142b7e[_0x4d22f2(0x155)];_0x2abf77<_0x179ba3;_0x2abf77++)if(_0x406cf2=_0x142b7e[_0x2abf77],!(_0x3e04a5&&_0x3acb99[_0x4d22f2(0x18d)](_0x406cf2[_0x4d22f2(0x123)]()))&&!this['_blacklistedProperty'](_0x1b6604,_0x406cf2,_0x287ba9)&&!_0x37a5d5[_0x4d22f2(0x104)+_0x406cf2['toString']()]){if(_0x2e60f3++,_0x287ba9[_0x4d22f2(0x154)]++,_0x2e60f3>_0x5b1dce){_0x2230f8=!0x0;break;}if(!_0x287ba9[_0x4d22f2(0x160)]&&_0x287ba9[_0x4d22f2(0xde)]&&_0x287ba9['autoExpandPropertyCount']>_0x287ba9['autoExpandLimit']){_0x2230f8=!0x0;break;}_0x512271[_0x4d22f2(0x1a6)](_0x1662fa['_addObjectProperty'](_0x1f6b26,_0x37a5d5,_0x1b6604,_0x252ae4,_0x406cf2,_0x287ba9));}}}}}if(_0x55a2bb[_0x4d22f2(0x162)]=_0x252ae4,_0x679d7f?(_0x55a2bb['value']=_0x1b6604[_0x4d22f2(0x153)](),this['_capIfString'](_0x252ae4,_0x55a2bb,_0x287ba9,_0x2d9852)):_0x252ae4===_0x4d22f2(0xe3)?_0x55a2bb[_0x4d22f2(0x1b4)]=this[_0x4d22f2(0xce)][_0x4d22f2(0x188)](_0x1b6604):_0x252ae4===_0x4d22f2(0x159)?_0x55a2bb[_0x4d22f2(0x1b4)]=_0x1b6604['toString']():_0x252ae4==='RegExp'?_0x55a2bb[_0x4d22f2(0x1b4)]=this[_0x4d22f2(0x1a8)][_0x4d22f2(0x188)](_0x1b6604):_0x252ae4==='symbol'&&this['_Symbol']?_0x55a2bb['value']=this[_0x4d22f2(0x150)][_0x4d22f2(0xf7)]['toString'][_0x4d22f2(0x188)](_0x1b6604):!_0x287ba9[_0x4d22f2(0xd8)]&&!(_0x252ae4===_0x4d22f2(0x17e)||_0x252ae4===_0x4d22f2(0x121))&&(delete _0x55a2bb[_0x4d22f2(0x1b4)],_0x55a2bb[_0x4d22f2(0x111)]=!0x0),_0x2230f8&&(_0x55a2bb[_0x4d22f2(0xfe)]=!0x0),_0x609320=_0x287ba9['node']['current'],_0x287ba9[_0x4d22f2(0x169)][_0x4d22f2(0x157)]=_0x55a2bb,this[_0x4d22f2(0xc5)](_0x55a2bb,_0x287ba9),_0x512271[_0x4d22f2(0x155)]){for(_0x2abf77=0x0,_0x179ba3=_0x512271['length'];_0x2abf77<_0x179ba3;_0x2abf77++)_0x512271[_0x2abf77](_0x2abf77);}_0x1f6b26[_0x4d22f2(0x155)]&&(_0x55a2bb[_0x4d22f2(0x129)]=_0x1f6b26);}catch(_0x86245e){_0xc5be16(_0x86245e,_0x55a2bb,_0x287ba9);}return this[_0x4d22f2(0x14d)](_0x1b6604,_0x55a2bb),this[_0x4d22f2(0xfd)](_0x55a2bb,_0x287ba9),_0x287ba9[_0x4d22f2(0x169)]['current']=_0x609320,_0x287ba9['level']--,_0x287ba9[_0x4d22f2(0xde)]=_0x5b8312,_0x287ba9[_0x4d22f2(0xde)]&&_0x287ba9[_0x4d22f2(0x1ad)][_0x4d22f2(0x106)](),_0x55a2bb;}['_getOwnPropertySymbols'](_0x5b3c9d){var _0x30ece4=_0x512a37;return Object[_0x30ece4(0xfa)]?Object[_0x30ece4(0xfa)](_0x5b3c9d):[];}[_0x512a37(0x180)](_0x20fa99){var _0x40165d=_0x512a37;return!!(_0x20fa99&&_0x14a8cc[_0x40165d(0xd0)]&&this[_0x40165d(0xda)](_0x20fa99)===_0x40165d(0xfc)&&_0x20fa99[_0x40165d(0x1a9)]);}[_0x512a37(0xcc)](_0x23da32,_0x5f9bbd,_0x5653eb){var _0x55ece4=_0x512a37;return _0x5653eb[_0x55ece4(0x139)]?typeof _0x23da32[_0x5f9bbd]=='function':!0x1;}[_0x512a37(0x13b)](_0x41aa7c){var _0x3a80d0=_0x512a37,_0x3391ea='';return _0x3391ea=typeof _0x41aa7c,_0x3391ea===_0x3a80d0(0x194)?this[_0x3a80d0(0xda)](_0x41aa7c)===_0x3a80d0(0x14a)?_0x3391ea='array':this[_0x3a80d0(0xda)](_0x41aa7c)===_0x3a80d0(0x19a)?_0x3391ea=_0x3a80d0(0xe3):this['_objectToString'](_0x41aa7c)===_0x3a80d0(0x108)?_0x3391ea='bigint':_0x41aa7c===null?_0x3391ea='null':_0x41aa7c[_0x3a80d0(0xdf)]&&(_0x3391ea=_0x41aa7c['constructor'][_0x3a80d0(0xe5)]||_0x3391ea):_0x3391ea===_0x3a80d0(0x121)&&this['_HTMLAllCollection']&&_0x41aa7c instanceof this[_0x3a80d0(0x10d)]&&(_0x3391ea=_0x3a80d0(0x1a1)),_0x3391ea;}[_0x512a37(0xda)](_0x152232){var _0x50db19=_0x512a37;return Object['prototype'][_0x50db19(0x123)]['call'](_0x152232);}[_0x512a37(0xc7)](_0x1e177c){var _0x1a7993=_0x512a37;return _0x1e177c===_0x1a7993(0x191)||_0x1e177c===_0x1a7993(0xec)||_0x1e177c==='number';}[_0x512a37(0x158)](_0x571b5b){var _0x2b3223=_0x512a37;return _0x571b5b===_0x2b3223(0x12b)||_0x571b5b==='String'||_0x571b5b==='Number';}[_0x512a37(0x172)](_0x1da961,_0x22304c,_0x293f1f,_0x3dc3b7,_0x1f8f7d,_0x3f521e){var _0x414591=this;return function(_0x294122){var _0xe2057a=_0x2152,_0x4caf4e=_0x1f8f7d['node']['current'],_0x17c538=_0x1f8f7d[_0xe2057a(0x169)][_0xe2057a(0xe8)],_0x1899c8=_0x1f8f7d[_0xe2057a(0x169)]['parent'];_0x1f8f7d[_0xe2057a(0x169)]['parent']=_0x4caf4e,_0x1f8f7d[_0xe2057a(0x169)][_0xe2057a(0xe8)]=typeof _0x3dc3b7==_0xe2057a(0x1b0)?_0x3dc3b7:_0x294122,_0x1da961['push'](_0x414591[_0xe2057a(0x10b)](_0x22304c,_0x293f1f,_0x3dc3b7,_0x1f8f7d,_0x3f521e)),_0x1f8f7d[_0xe2057a(0x169)][_0xe2057a(0xd7)]=_0x1899c8,_0x1f8f7d['node'][_0xe2057a(0xe8)]=_0x17c538;};}[_0x512a37(0xe0)](_0x49b9e5,_0x152fe1,_0x5aeb78,_0x361986,_0x4edf24,_0x2788bf,_0x319bf9){var _0x34d254=_0x512a37,_0x1d00e8=this;return _0x152fe1[_0x34d254(0x104)+_0x4edf24[_0x34d254(0x123)]()]=!0x0,function(_0x5d2cc){var _0x41493f=_0x34d254,_0x10d44d=_0x2788bf[_0x41493f(0x169)][_0x41493f(0x157)],_0x101fd9=_0x2788bf[_0x41493f(0x169)][_0x41493f(0xe8)],_0x42de31=_0x2788bf['node'][_0x41493f(0xd7)];_0x2788bf['node'][_0x41493f(0xd7)]=_0x10d44d,_0x2788bf[_0x41493f(0x169)][_0x41493f(0xe8)]=_0x5d2cc,_0x49b9e5[_0x41493f(0x1a6)](_0x1d00e8[_0x41493f(0x10b)](_0x5aeb78,_0x361986,_0x4edf24,_0x2788bf,_0x319bf9)),_0x2788bf[_0x41493f(0x169)][_0x41493f(0xd7)]=_0x42de31,_0x2788bf[_0x41493f(0x169)][_0x41493f(0xe8)]=_0x101fd9;};}['_property'](_0xd82fc7,_0x5bfaa0,_0x5cce9b,_0x13c48a,_0x565628){var _0x1f86dc=_0x512a37,_0x377413=this;_0x565628||(_0x565628=function(_0xd2dc36,_0x437368){return _0xd2dc36[_0x437368];});var _0x58e1c9=_0x5cce9b[_0x1f86dc(0x123)](),_0x124f8e=_0x13c48a[_0x1f86dc(0x16a)]||{},_0x457a65=_0x13c48a['depth'],_0xe1ad95=_0x13c48a[_0x1f86dc(0x160)];try{var _0x4784ac=this[_0x1f86dc(0xf3)](_0xd82fc7),_0x35ea9b=_0x58e1c9;_0x4784ac&&_0x35ea9b[0x0]==='\\\\x27'&&(_0x35ea9b=_0x35ea9b[_0x1f86dc(0x175)](0x1,_0x35ea9b[_0x1f86dc(0x155)]-0x2));var _0x1caeb0=_0x13c48a[_0x1f86dc(0x16a)]=_0x124f8e[_0x1f86dc(0x104)+_0x35ea9b];_0x1caeb0&&(_0x13c48a[_0x1f86dc(0xd8)]=_0x13c48a['depth']+0x1),_0x13c48a['isExpressionToEvaluate']=!!_0x1caeb0;var _0x359faf=typeof _0x5cce9b==_0x1f86dc(0xee),_0x5c7fcb={'name':_0x359faf||_0x4784ac?_0x58e1c9:this[_0x1f86dc(0xd2)](_0x58e1c9)};if(_0x359faf&&(_0x5c7fcb[_0x1f86dc(0xee)]=!0x0),!(_0x5bfaa0==='array'||_0x5bfaa0===_0x1f86dc(0x176))){var _0x1c5970=this['_getOwnPropertyDescriptor'](_0xd82fc7,_0x5cce9b);if(_0x1c5970&&(_0x1c5970['set']&&(_0x5c7fcb[_0x1f86dc(0x142)]=!0x0),_0x1c5970['get']&&!_0x1caeb0&&!_0x13c48a['resolveGetters']))return _0x5c7fcb['getter']=!0x0,this[_0x1f86dc(0x135)](_0x5c7fcb,_0x13c48a),_0x5c7fcb;}var _0x2306a8;try{_0x2306a8=_0x565628(_0xd82fc7,_0x5cce9b);}catch(_0x4daa53){return _0x5c7fcb={'name':_0x58e1c9,'type':_0x1f86dc(0x1aa),'error':_0x4daa53[_0x1f86dc(0x19b)]},this[_0x1f86dc(0x135)](_0x5c7fcb,_0x13c48a),_0x5c7fcb;}var _0xc6538=this[_0x1f86dc(0x13b)](_0x2306a8),_0x26e7ca=this[_0x1f86dc(0xc7)](_0xc6538);if(_0x5c7fcb[_0x1f86dc(0x162)]=_0xc6538,_0x26e7ca)this[_0x1f86dc(0x135)](_0x5c7fcb,_0x13c48a,_0x2306a8,function(){var _0x5055ce=_0x1f86dc;_0x5c7fcb[_0x5055ce(0x1b4)]=_0x2306a8[_0x5055ce(0x153)](),!_0x1caeb0&&_0x377413[_0x5055ce(0x171)](_0xc6538,_0x5c7fcb,_0x13c48a,{});});else{var _0x1d990d=_0x13c48a['autoExpand']&&_0x13c48a['level']<_0x13c48a[_0x1f86dc(0x134)]&&_0x13c48a[_0x1f86dc(0x1ad)][_0x1f86dc(0x16c)](_0x2306a8)<0x0&&_0xc6538!==_0x1f86dc(0x198)&&_0x13c48a[_0x1f86dc(0x154)]<_0x13c48a[_0x1f86dc(0x1a7)];_0x1d990d||_0x13c48a[_0x1f86dc(0x13a)]<_0x457a65||_0x1caeb0?(this['serialize'](_0x5c7fcb,_0x2306a8,_0x13c48a,_0x1caeb0||{}),this[_0x1f86dc(0x14d)](_0x2306a8,_0x5c7fcb)):this[_0x1f86dc(0x135)](_0x5c7fcb,_0x13c48a,_0x2306a8,function(){var _0x14191b=_0x1f86dc;_0xc6538===_0x14191b(0x17e)||_0xc6538===_0x14191b(0x121)||(delete _0x5c7fcb[_0x14191b(0x1b4)],_0x5c7fcb['capped']=!0x0);});}return _0x5c7fcb;}finally{_0x13c48a[_0x1f86dc(0x16a)]=_0x124f8e,_0x13c48a[_0x1f86dc(0xd8)]=_0x457a65,_0x13c48a['isExpressionToEvaluate']=_0xe1ad95;}}[_0x512a37(0x171)](_0x180f90,_0x11d747,_0x154dd8,_0x21893f){var _0x56825e=_0x512a37,_0x176056=_0x21893f[_0x56825e(0x197)]||_0x154dd8['strLength'];if((_0x180f90===_0x56825e(0xec)||_0x180f90===_0x56825e(0xf5))&&_0x11d747[_0x56825e(0x1b4)]){let _0x1e705c=_0x11d747[_0x56825e(0x1b4)][_0x56825e(0x155)];_0x154dd8[_0x56825e(0x15f)]+=_0x1e705c,_0x154dd8[_0x56825e(0x15f)]>_0x154dd8[_0x56825e(0x132)]?(_0x11d747[_0x56825e(0x111)]='',delete _0x11d747[_0x56825e(0x1b4)]):_0x1e705c>_0x176056&&(_0x11d747[_0x56825e(0x111)]=_0x11d747[_0x56825e(0x1b4)]['substr'](0x0,_0x176056),delete _0x11d747[_0x56825e(0x1b4)]);}}[_0x512a37(0xf3)](_0x3a986b){var _0x2ef40b=_0x512a37;return!!(_0x3a986b&&_0x14a8cc[_0x2ef40b(0x138)]&&this['_objectToString'](_0x3a986b)===_0x2ef40b(0x136)&&_0x3a986b[_0x2ef40b(0x1a9)]);}[_0x512a37(0xd2)](_0x495bcf){var _0x252e7d=_0x512a37;if(_0x495bcf[_0x252e7d(0x184)](/^\\\\d+$/))return _0x495bcf;var _0x408928;try{_0x408928=JSON[_0x252e7d(0x13d)](''+_0x495bcf);}catch{_0x408928='\\\\x22'+this[_0x252e7d(0xda)](_0x495bcf)+'\\\\x22';}return _0x408928[_0x252e7d(0x184)](/^\\\"([a-zA-Z_][a-zA-Z_0-9]*)\\\"$/)?_0x408928=_0x408928['substr'](0x1,_0x408928[_0x252e7d(0x155)]-0x2):_0x408928=_0x408928[_0x252e7d(0x122)](/'/g,'\\\\x5c\\\\x27')[_0x252e7d(0x122)](/\\\\\\\\\\\"/g,'\\\\x22')['replace'](/(^\\\"|\\\"$)/g,'\\\\x27'),_0x408928;}[_0x512a37(0x135)](_0x3ce327,_0xa05fc0,_0x285bd7,_0x298585){var _0x2e1b6b=_0x512a37;this[_0x2e1b6b(0xc5)](_0x3ce327,_0xa05fc0),_0x298585&&_0x298585(),this['_additionalMetadata'](_0x285bd7,_0x3ce327),this[_0x2e1b6b(0xfd)](_0x3ce327,_0xa05fc0);}[_0x512a37(0xc5)](_0x1df5cb,_0x1e600e){var _0x569524=_0x512a37;this[_0x569524(0xe7)](_0x1df5cb,_0x1e600e),this[_0x569524(0x195)](_0x1df5cb,_0x1e600e),this[_0x569524(0xc9)](_0x1df5cb,_0x1e600e),this[_0x569524(0x109)](_0x1df5cb,_0x1e600e);}[_0x512a37(0xe7)](_0x4a32d0,_0x365d19){}['_setNodeQueryPath'](_0x8e29ee,_0x1969db){}['_setNodeLabel'](_0x957f54,_0x3043fe){}[_0x512a37(0x174)](_0x4f244d){var _0x33306e=_0x512a37;return _0x4f244d===this[_0x33306e(0x1a2)];}['_treeNodePropertiesAfterFullValue'](_0x2f2d65,_0x5a7554){var _0x1a9648=_0x512a37;this[_0x1a9648(0xf1)](_0x2f2d65,_0x5a7554),this[_0x1a9648(0x11f)](_0x2f2d65),_0x5a7554['sortProps']&&this[_0x1a9648(0x182)](_0x2f2d65),this['_addFunctionsNode'](_0x2f2d65,_0x5a7554),this[_0x1a9648(0x15a)](_0x2f2d65,_0x5a7554),this[_0x1a9648(0x145)](_0x2f2d65);}[_0x512a37(0x14d)](_0x218596,_0x39bb99){var _0xf711df=_0x512a37;try{_0x218596&&typeof _0x218596[_0xf711df(0x155)]==_0xf711df(0x1b0)&&(_0x39bb99['length']=_0x218596[_0xf711df(0x155)]);}catch{}if(_0x39bb99['type']===_0xf711df(0x1b0)||_0x39bb99[_0xf711df(0x162)]==='Number'){if(isNaN(_0x39bb99['value']))_0x39bb99[_0xf711df(0x148)]=!0x0,delete _0x39bb99[_0xf711df(0x1b4)];else switch(_0x39bb99[_0xf711df(0x1b4)]){case Number[_0xf711df(0x18c)]:_0x39bb99[_0xf711df(0x105)]=!0x0,delete _0x39bb99[_0xf711df(0x1b4)];break;case Number[_0xf711df(0x102)]:_0x39bb99['negativeInfinity']=!0x0,delete _0x39bb99[_0xf711df(0x1b4)];break;case 0x0:this[_0xf711df(0x190)](_0x39bb99['value'])&&(_0x39bb99['negativeZero']=!0x0);break;}}else _0x39bb99[_0xf711df(0x162)]===_0xf711df(0x198)&&typeof _0x218596[_0xf711df(0xe5)]=='string'&&_0x218596[_0xf711df(0xe5)]&&_0x39bb99[_0xf711df(0xe5)]&&_0x218596[_0xf711df(0xe5)]!==_0x39bb99['name']&&(_0x39bb99[_0xf711df(0x15b)]=_0x218596['name']);}['_isNegativeZero'](_0x1878c3){return 0x1/_0x1878c3===Number['NEGATIVE_INFINITY'];}[_0x512a37(0x182)](_0x4f6bdc){var _0x54b436=_0x512a37;!_0x4f6bdc[_0x54b436(0x129)]||!_0x4f6bdc[_0x54b436(0x129)][_0x54b436(0x155)]||_0x4f6bdc['type']===_0x54b436(0x1ac)||_0x4f6bdc['type']==='Map'||_0x4f6bdc[_0x54b436(0x162)]==='Set'||_0x4f6bdc[_0x54b436(0x129)][_0x54b436(0x178)](function(_0x4410ef,_0x20e5af){var _0x157689=_0x54b436,_0x2f4682=_0x4410ef[_0x157689(0xe5)][_0x157689(0x1b3)](),_0x249a2f=_0x20e5af['name'][_0x157689(0x1b3)]();return _0x2f4682<_0x249a2f?-0x1:_0x2f4682>_0x249a2f?0x1:0x0;});}['_addFunctionsNode'](_0x3e4f0c,_0x16620d){var _0x3c491d=_0x512a37;if(!(_0x16620d['noFunctions']||!_0x3e4f0c[_0x3c491d(0x129)]||!_0x3e4f0c[_0x3c491d(0x129)][_0x3c491d(0x155)])){for(var _0x32424d=[],_0x11cbbe=[],_0x4fe7b4=0x0,_0x3d8d0c=_0x3e4f0c[_0x3c491d(0x129)][_0x3c491d(0x155)];_0x4fe7b4<_0x3d8d0c;_0x4fe7b4++){var _0x46c351=_0x3e4f0c[_0x3c491d(0x129)][_0x4fe7b4];_0x46c351[_0x3c491d(0x162)]===_0x3c491d(0x198)?_0x32424d['push'](_0x46c351):_0x11cbbe[_0x3c491d(0x1a6)](_0x46c351);}if(!(!_0x11cbbe[_0x3c491d(0x155)]||_0x32424d[_0x3c491d(0x155)]<=0x1)){_0x3e4f0c[_0x3c491d(0x129)]=_0x11cbbe;var _0x46d709={'functionsNode':!0x0,'props':_0x32424d};this['_setNodeId'](_0x46d709,_0x16620d),this[_0x3c491d(0xf1)](_0x46d709,_0x16620d),this[_0x3c491d(0x11f)](_0x46d709),this['_setNodePermissions'](_0x46d709,_0x16620d),_0x46d709['id']+='\\\\x20f',_0x3e4f0c[_0x3c491d(0x129)][_0x3c491d(0x119)](_0x46d709);}}}[_0x512a37(0x15a)](_0x309916,_0x31adc5){}[_0x512a37(0x11f)](_0x33c01d){}[_0x512a37(0xcf)](_0x2f14ed){var _0x29caf9=_0x512a37;return Array[_0x29caf9(0x19e)](_0x2f14ed)||typeof _0x2f14ed==_0x29caf9(0x194)&&this['_objectToString'](_0x2f14ed)===_0x29caf9(0x14a);}[_0x512a37(0x109)](_0x3d2b35,_0x5a2aae){}[_0x512a37(0x145)](_0x5e8749){var _0x1ec90c=_0x512a37;delete _0x5e8749[_0x1ec90c(0x189)],delete _0x5e8749[_0x1ec90c(0xcb)],delete _0x5e8749[_0x1ec90c(0x193)];}['_setNodeExpressionPath'](_0x3edd3c,_0x3e2e0c){}[_0x512a37(0x100)](_0x56cf6d){var _0x2cf63a=_0x512a37;return _0x56cf6d?_0x56cf6d[_0x2cf63a(0x184)](this[_0x2cf63a(0x183)])?'['+_0x56cf6d+']':_0x56cf6d[_0x2cf63a(0x184)](this[_0x2cf63a(0xf2)])?'.'+_0x56cf6d:_0x56cf6d[_0x2cf63a(0x184)](this[_0x2cf63a(0xe1)])?'['+_0x56cf6d+']':'[\\\\x27'+_0x56cf6d+'\\\\x27]':'';}}let _0xcb6255=new _0x56130d();function _0x4a295a(_0x50db00,_0x45daa5,_0xc5ab2d,_0x1fd4b8,_0xf9435f,_0x51a04f){var _0x4801b6=_0x512a37;let _0x40db4a,_0x1a3516;try{_0x1a3516=_0x399678(),_0x40db4a=_0x586ea4[_0x45daa5],!_0x40db4a||_0x1a3516-_0x40db4a['ts']>0x1f4&&_0x40db4a[_0x4801b6(0x166)]&&_0x40db4a[_0x4801b6(0x14b)]/_0x40db4a['count']<0x64?(_0x586ea4[_0x45daa5]=_0x40db4a={'count':0x0,'time':0x0,'ts':_0x1a3516},_0x586ea4[_0x4801b6(0x18e)]={}):_0x1a3516-_0x586ea4[_0x4801b6(0x18e)]['ts']>0x32&&_0x586ea4[_0x4801b6(0x18e)][_0x4801b6(0x166)]&&_0x586ea4[_0x4801b6(0x18e)][_0x4801b6(0x14b)]/_0x586ea4[_0x4801b6(0x18e)][_0x4801b6(0x166)]<0x64&&(_0x586ea4[_0x4801b6(0x18e)]={});let _0x16b942=[],_0x37e208=_0x40db4a[_0x4801b6(0x140)]||_0x586ea4['hits'][_0x4801b6(0x140)]?_0x1b0717:_0x16a222,_0x4245e8=_0x4887f0=>{var _0x11e2ab=_0x4801b6;let _0x54b033={};return _0x54b033[_0x11e2ab(0x129)]=_0x4887f0['props'],_0x54b033[_0x11e2ab(0x130)]=_0x4887f0['elements'],_0x54b033[_0x11e2ab(0x197)]=_0x4887f0[_0x11e2ab(0x197)],_0x54b033[_0x11e2ab(0x132)]=_0x4887f0[_0x11e2ab(0x132)],_0x54b033[_0x11e2ab(0x1a7)]=_0x4887f0[_0x11e2ab(0x1a7)],_0x54b033[_0x11e2ab(0x134)]=_0x4887f0[_0x11e2ab(0x134)],_0x54b033['sortProps']=!0x1,_0x54b033[_0x11e2ab(0x139)]=!_0x54a870,_0x54b033[_0x11e2ab(0xd8)]=0x1,_0x54b033[_0x11e2ab(0x13a)]=0x0,_0x54b033['expId']=_0x11e2ab(0xd1),_0x54b033[_0x11e2ab(0x16d)]=_0x11e2ab(0x164),_0x54b033['autoExpand']=!0x0,_0x54b033[_0x11e2ab(0x1ad)]=[],_0x54b033[_0x11e2ab(0x154)]=0x0,_0x54b033[_0x11e2ab(0x1ab)]=!0x0,_0x54b033[_0x11e2ab(0x15f)]=0x0,_0x54b033[_0x11e2ab(0x169)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x54b033;};for(var _0x11df82=0x0;_0x11df82<_0xf9435f['length'];_0x11df82++)_0x16b942[_0x4801b6(0x1a6)](_0xcb6255[_0x4801b6(0x127)]({'timeNode':_0x50db00===_0x4801b6(0x14b)||void 0x0},_0xf9435f[_0x11df82],_0x4245e8(_0x37e208),{}));if(_0x50db00==='trace'){let _0x20f011=Error[_0x4801b6(0x133)];try{Error[_0x4801b6(0x133)]=0x1/0x0,_0x16b942[_0x4801b6(0x1a6)](_0xcb6255[_0x4801b6(0x127)]({'stackNode':!0x0},new Error()[_0x4801b6(0x147)],_0x4245e8(_0x37e208),{'strLength':0x1/0x0}));}finally{Error['stackTraceLimit']=_0x20f011;}}return{'method':_0x4801b6(0x112),'version':_0x5dea60,'args':[{'ts':_0xc5ab2d,'session':_0x1fd4b8,'args':_0x16b942,'id':_0x45daa5,'context':_0x51a04f}]};}catch(_0x1c2ebd){return{'method':_0x4801b6(0x112),'version':_0x5dea60,'args':[{'ts':_0xc5ab2d,'session':_0x1fd4b8,'args':[{'type':_0x4801b6(0x1aa),'error':_0x1c2ebd&&_0x1c2ebd[_0x4801b6(0x19b)]}],'id':_0x45daa5,'context':_0x51a04f}]};}finally{try{if(_0x40db4a&&_0x1a3516){let _0x396f96=_0x399678();_0x40db4a[_0x4801b6(0x166)]++,_0x40db4a[_0x4801b6(0x14b)]+=_0x3f5d2d(_0x1a3516,_0x396f96),_0x40db4a['ts']=_0x396f96,_0x586ea4[_0x4801b6(0x18e)][_0x4801b6(0x166)]++,_0x586ea4[_0x4801b6(0x18e)]['time']+=_0x3f5d2d(_0x1a3516,_0x396f96),_0x586ea4[_0x4801b6(0x18e)]['ts']=_0x396f96,(_0x40db4a[_0x4801b6(0x166)]>0x32||_0x40db4a[_0x4801b6(0x14b)]>0x64)&&(_0x40db4a['reduceLimits']=!0x0),(_0x586ea4[_0x4801b6(0x18e)][_0x4801b6(0x166)]>0x3e8||_0x586ea4['hits']['time']>0x12c)&&(_0x586ea4[_0x4801b6(0x18e)][_0x4801b6(0x140)]=!0x0);}}catch{}}}return _0x14a8cc[_0x512a37(0x101)];})(globalThis,_0x43ccbf(0xeb),_0x43ccbf(0x1b1),_0x43ccbf(0x167),_0x43ccbf(0x17b),'1.0.0',_0x43ccbf(0xff),_0x43ccbf(0x185),_0x43ccbf(0x187));function _0x5750(){var _0x51fcf3=['stringify','disabledLog','6iRzvQR','reduceLimits','port','setter','reload','Symbol','_cleanNode','url','stack','nan','_p_length','[object\\\\x20Array]','time','_maxConnectAttemptCount','_additionalMetadata','Buffer','36UGqKvx','_Symbol','elapsed','_connecting','valueOf','autoExpandPropertyCount','length','now','current','_isPrimitiveWrapperType','bigint','_addLoadNode','funcName','close','data','Console\\\\x20Ninja\\\\x20failed\\\\x20to\\\\x20send\\\\x20logs,\\\\x20refreshing\\\\x20the\\\\x20page\\\\x20may\\\\x20help;\\\\x20also\\\\x20see\\\\x20','allStrLength','isExpressionToEvaluate','1912428peUkZS','type','getOwnPropertyNames','root_exp','70553MkwoTI','count',\\\"/Users/buigiang/.vscode/extensions/wallabyjs.console-ninja-0.0.182/node_modules\\\",'pathToFileURL','node','expressionsToEvaluate','ws://','indexOf','rootExpression','2100Tdowba','_reconnectTimeout','1714945fcpOOS','_capIfString','_addProperty','onerror','_isUndefined','substr','Error','_allowedToConnectOnSend','sort','failed\\\\x20to\\\\x20find\\\\x20and\\\\x20load\\\\x20WebSocket','149XbESjE','webpack','272iXOgWY','_connectAttemptCount','null','join','_isSet','_webSocketErrorDocsLink','_sortProps','_numberRegExp','match',[\\\"localhost\\\",\\\"127.0.0.1\\\",\\\"example.cypress.io\\\",\\\"Buis-MacBook-Pro.local\\\",\\\"10.10.10.81\\\"],'readyState','','call','_hasSymbolPropertyOnItsPath','console','host','POSITIVE_INFINITY','test','hits','failed\\\\x20to\\\\x20connect\\\\x20to\\\\x20host:\\\\x20','_isNegativeZero','boolean','https://tinyurl.com/37x8b79t','_hasMapOnItsPath','object','_setNodeQueryPath','warn','strLength','function','_WebSocketClass','[object\\\\x20Date]','message','_socket','onclose','isArray','370469cMKCLB','includes','HTMLAllCollection','_undefined','hasOwnProperty',':logPointId:','slice','push','autoExpandLimit','_regExpToString','forEach','unknown','resolveGetters','array','autoExpandPreviousObjects','process','bind','number','49517','hrtime','toLowerCase','value','unref','WebSocket','_treeNodePropertiesBeforeFullValue','_getOwnPropertySymbols','_isPrimitiveType','\\\\x20browser','_setNodeExpressionPath','default','_hasSetOnItsPath','_blacklistedProperty','map','_dateToString','_isArray','Set','root_exp_id','_propertyName','_connectToHostNow','_inBrowser','1464558bwCIvl','perf_hooks','parent','depth','astro','_objectToString','nuxt','getPrototypeOf','_console_ninja_session','autoExpand','constructor','_addObjectProperty','_quotedRegExp','onopen','date','nodeModules','name','_disposeWebsocket','_setNodeId','index','cappedElements','parse','127.0.0.1','string','performance','symbol','location','_getOwnPropertyNames','_setNodeLabel','_keyStrRegExp','_isMap','global','String','4GKbUZr','prototype','send','_WebSocket','getOwnPropertySymbols','Console\\\\x20Ninja\\\\x20failed\\\\x20to\\\\x20send\\\\x20logs,\\\\x20restarting\\\\x20the\\\\x20process\\\\x20may\\\\x20help;\\\\x20also\\\\x20see\\\\x20','[object\\\\x20Set]','_treeNodePropertiesAfterFullValue','cappedProps','1689648590079','_propertyAccessor','_console_ninja','NEGATIVE_INFINITY','_attemptToReconnectShortly','_p_','positiveInfinity','pop','timeStamp','[object\\\\x20BigInt]','_setNodePermissions','error','_property','versions','_HTMLAllCollection','62140fBudxU','path','getWebSocketClass','capped','log','method','disabledTrace','trace','argumentResolutionError','_ws','\\\\x20server','unshift','10MoeyiJ','timeEnd','logger\\\\x20failed\\\\x20to\\\\x20connect\\\\x20to\\\\x20host,\\\\x20see\\\\x20','_allowedToSend','_consoleNinjaAllowedToStart','_setNodeExpandableState','__es'+'Module','undefined','replace','toString','onmessage','logger\\\\x20failed\\\\x20to\\\\x20connect\\\\x20to\\\\x20host','enumerable','serialize','_p_name','props','then','Boolean','hostname','_connected','2334ykESxH','getOwnPropertyDescriptor','elements','...','totalStrLength','stackTraceLimit','autoExpandMaxDepth','_processTreeNodeResult','[object\\\\x20Map]','_sendErrorMessage','Map','noFunctions','level','_type','ws/index.js'];_0x5750=function(){return _0x51fcf3;};return _0x5750();}\");}catch(e){}};function oo_oo(i:string,...v:any[]){try{oo_cm().consoleLog(i, v);}catch(e){} return v};oo_oo;function oo_tr(i:string,...v:any[]){try{oo_cm().consoleTrace(i, v);}catch(e){} return v};oo_tr;function oo_ts(){try{oo_cm().consoleTime();}catch(e){}};oo_ts;function oo_te(){try{oo_cm().consoleTimeEnd();}catch(e){}};oo_te;/*eslint eslint-comments/disable-enable-pair:,eslint-comments/no-unlimited-disable:,eslint-comments/no-aggregating-enable:,eslint-comments/no-duplicate-disable:,eslint-comments/no-unused-disable:,eslint-comments/no-unused-enable:,*/","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS, ARE_WEBCODECS_SUPPORTED } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = ARE_WEBCODECS_SUPPORTED && !IS_MOBILE ? 80 : 40;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import React, {\n  useRef, useState, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV, IS_VIDEO_PREVIEW_SUPPORTED } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  isActive?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst SeekLine: React.FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  url,\n  isActive,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    if (!IS_VIDEO_PREVIEW_SUPPORTED) return;\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (!IS_VIDEO_PREVIEW_SUPPORTED || isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!isLockedRef.current && !isSeeking) {\n      setSelectedTime(getCurrentTime());\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, 500);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  IS_TOUCH_ENV, IS_IOS, IS_ANDROID, ARE_WEBCODECS_SUPPORTED,\n} from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst IS_PREVIEW_DISABLED = (IS_IOS || IS_ANDROID) && !ARE_WEBCODECS_SUPPORTED;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            user={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          user={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon', 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, idPrefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    'no-selection',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={idPrefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[userId];\n\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={user} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !userReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${userId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <PrivateChatInfo\n                        userId={userId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState, TabState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    switch (activeTab) {\n      case 0:\n        (window as any).webkit?.messageHandlers.jsHandler.postMessage('tl_navigation_chatsTab');\n        break;\n      case 1:\n        (window as any).webkit?.messageHandlers.jsHandler.postMessage('tl_navigation_mediaTab');\n        break;\n      case 2:\n        (window as any).webkit?.messageHandlers.jsHandler.postMessage('tl_navigation_linksTab');\n        break;\n      case 3:\n        (window as any).webkit?.messageHandlers.jsHandler.postMessage('tl_navigation_filesTab');\n        break;\n      case 4:\n        (window as any).webkit?.messageHandlers.jsHandler.postMessage('tl_navigation_musicTab');\n        break;\n      case 5:\n        (window as any).webkit?.messageHandlers.jsHandler.postMessage('tl_navigation_voiceTab');\n        break;\n      default:\n        (window as any).webkit?.messageHandlers.jsHandler.postMessage('tl_navigation_noTab');\n        break;\n    }\n  }, [activeTab]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    // eslint-disable-next-line no-console\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    setState((current) => ({\n      ...current,\n      isDragging: false,\n      width: undefined,\n      height: undefined,\n    }));\n\n    onDragEnd();\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'div-button', 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n    } else {\n      openLimitReachedModal({\n        limit: 'chatlistInvites',\n      });\n    }\n  }, [\n    invites, state.folderId, state.isTouched, maxInviteLinks, isCreating, onSaveFolder, onShareFolder, lang,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(inviteLink);\n  }, [copyLink, inviteLink]);\n\n  const handleShare = useCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  }, [inviteLink]);\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  }, [folderId, onReset, url]);\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  }, [lang]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (!folderId || !url) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  }, [folderId, selectedIds, url]);\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={isLoading ? lang('Loading') : url!}\n        onRevoke={handleRevoke}\n        isDisabled={isDisabled}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/windowEnvironment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport {\n  playNotifySound,\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n} from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          {canTranslate && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [hasCurrentUserFullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUser={currentUser}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const currentUserFullInfo = selectUserFullInfo(global, global.currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        user={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          user={user}\n          chat={chat}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\nconst PRELOAD_CONTACT = 10000;\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll\n      items={viewportIds}\n      onLoadMore={getMore}\n      preloadBackwards={PRELOAD_CONTACT}\n      noScrollRestoreOnTop\n      noScrollRestore\n      className=\"chat-list custom-scroll\"\n    >\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={cn('static-icon')}\n          src={staticIconData}\n          alt=\"\"\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName, { createClassNameBuilder } from '../../../util/buildClassName';\nimport {\n  isSameReaction, canSendReaction, getReactionUniqueKey, sortReactions,\n} from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  onShowMore: (position: IAnchorPosition) => void;\n  className?: string;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 6;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  onToggleReaction,\n  onShowMore,\n  className,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const availableReactions = useMemo(() => {\n    const reactions = allAvailableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }).filter(Boolean) || [];\n\n    return sortReactions(reactions, topReactions);\n  }, [allAvailableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions, topReactions]);\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useLastCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  });\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={buildClassName(cn('&', lang.isRtl && 'isRtl'), className)} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {reactionsToRender.map((reaction, i) => (\n            <ReactionSelectorReaction\n              key={getReactionUniqueKey(reaction.reaction)}\n              isReady={isReady}\n              onToggleReaction={onToggleReaction}\n              reaction={reaction}\n              noAppearAnimation={!canPlayAnimatedEmojis}\n              chosen={userReactionIndexes.has(i)}\n            />\n          ))}\n          {withMoreButton && (\n            <Button\n              color=\"translucent\"\n              className={cn('show-more')}\n              onClick={handleShowMoreClick}\n            >\n              <i className=\"icon icon-down\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, targetHref, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenReactionPicker}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && seenByDatesCount\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, seenByDatesCount],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                seenByDatesCount === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (seenByDatesCount\n                    ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n  isServiceNotificationMessage,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n  isReactionPickerOpen,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n    openReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return Object.keys(message.seenByDates).slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const isServiceNotification = isServiceNotificationMessage(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isServiceNotification && !isScheduled && !isAction && !hasTranslation\n      && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, 'no-selection', isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectTabState,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  position,\n  isTranslucent,\n  withCustomReactions,\n}) => {\n  const { toggleReaction, closeReactionPicker } = getActions();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(styles.menuContent, !withCustomReactions && styles.onlyReactions)}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !withCustomReactions}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={handleToggleCustomReaction}\n        onReactionSelect={handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const { chatId, messageId, position } = state.reactionPicker || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : false;\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_ELECTRON, PRODUCTION_URL } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON ? PRODUCTION_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, 'sticker-set', isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, 'no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (lastSyncTime && isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, lastSyncTime, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSelect = useLastCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  });\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { isUserId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              chat={chat}\n              user={user}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { isChatChannel } from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          chat={senderChat}\n          user={senderUser}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","oo_oo","oo_cm","eval","e","i","_len","arguments","length","v","Array","_key","consoleLog","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","ARE_WEBCODECS_SUPPORTED","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","duration","bufferedRanges","isReady","posterSize","isActive","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","IS_VIDEO_PREVIEW_SUPPORTED","floor","renderVideoPreview","createVideoPreviews","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isPlaying","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","IS_PREVIEW_DISABLED","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","slideClassName","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","entries","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","fullClassName","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","thumbCustomEmojiId","isVideos","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Picker","itemIds","lockedIds","onSelectedIdsChange","selectedIds","Badge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","sort","leftId","rightId","handleCloseSeenByModal","noStatusOrTyping","formatDateAtTime","statusIcon","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","r","seenByUserIds","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","userReactions","reactor","seenByUser","FullNameTitle","peer","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","contextActions","useChatContextActions","useSelectWithEnter","MuteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","lastSyncTime","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","webkit","messageHandlers","jsHandler","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","settings","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","maxChats","filterValue","shouldHideChatTypes","onSelectedChatTypesChange","onFilterChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","useEffectWithPrevDeps","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","filterPlaceholder","searchInputId","isSearchable","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","prevIsActive","otherLanguages","unselected","newDoNotTranslate","filteredDisplayedOptions","shouldShowLoginCodeInChatList","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","rightIcon","onClickLabel","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","preloadBackwards","noScrollRestore","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","cn","createClassNameBuilder","noAppearAnimation","chosen","onToggleReaction","mediaAppearData","appearAnimation","staticIconData","isAnimationLoaded","markAnimationLoaded","isFirstPlay","unmarkIsFirstPlay","activate","deactivate","onMouseEnter","allAvailableReactions","enabledReactions","currentReactions","maxUniqueReactions","onShowMore","canSendReaction","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","ReactionSelectorReaction","isReactionPickerOpen","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenReactionPicker","bubbleStyle","ReactionSelector","messagesCount","MenuSeparator","Skeleton","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isServiceNotification","isServiceNotificationMessage","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","selectIsReactionPickerOpen","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","openReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","setIsMuteModalOpen","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","reactionPicker","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","storedPosition","renderingPosition","withPortal","isDense","handleToggleCustomReaction","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","native","IS_ELECTRON","PRODUCTION_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","fullInfo","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress"],"sourceRoot":""}