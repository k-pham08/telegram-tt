{"version":3,"file":"8211.2cfb5d8c9b5764b09896.js","mappings":"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","sources":["webpack://telegram-t/./src/components/auth/AuthCode.tsx","webpack://telegram-t/./src/components/auth/AuthPassword.tsx","webpack://telegram-t/./src/components/auth/AuthRegister.tsx"],"sourcesContent":["import type { FormEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport type { GlobalState } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { pick } from '../../util/iteratees';\n// import renderText from '../common/helpers/renderText';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n// import Loading from '../ui/Loading';\n// import TrackingMonkey from '../common/TrackingMonkey';\nimport { fallbackLangPackInitial as langPack } from '../../util/fallbackLangPackInitial';\n\ntype StateProps = Pick<GlobalState, 'authPhoneNumber' | 'authIsCodeViaApp' | 'authIsLoading' | 'authError'>;\n\nconst CODE_LENGTH = 5;\n\nconst AuthCode: FC<StateProps> = ({\n  authPhoneNumber,\n  // authIsCodeViaApp,\n  authIsLoading,\n  authError,\n}) => {\n  const {\n    setAuthCode,\n    returnToAuthPhoneNumber,\n    clearAuthError,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [code, setCode] = useState<string>('');\n  const [isTracking, setIsTracking] = useState(false);\n  // const [trackingDirection, setTrackingDirection] = useState(1);\n  const currentViewportHeight = useRef<number>(Number(window.visualViewport!.height));\n  const isFocused = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      inputRef.current!.focus();\n    }\n\n    /**\n     * TL - Use trick to make button always above keyboard\n     * Description:\n     *   - First, prevent input from being scroll to the center of the screen\n     *   - Second, caculate x value. It calculates by substract clientHeight and viewHeight\n     *   - Third, translate view up by x pixels.\n     */\n    inputRef.current!.addEventListener('focusin', () => {\n      if (!isFocused.current) {\n        inputRef.current!.style.transform = 'TranslateY(-10000px)';\n        inputRef.current!.style.caretColor = 'transparent';\n        setTimeout(() => {\n          inputRef.current!.style.transform = 'none';\n          const scrollPixel = containerRef.current!.clientHeight\n            - currentViewportHeight.current + ((window as any).numberKeyboardHeight ?? 0) / 1.15 + 10;\n\n          if (scrollPixel > 0) {\n            containerRef.current!.style.transform = `translateY(${-scrollPixel}px)`;\n            containerRef.current!.style.transition = 'transform 0.2s linear';\n          }\n          setTimeout(() => {\n            inputRef.current!.style.caretColor = '#8774E1';\n          }, 180);\n        }, 80);\n        isFocused.current = true;\n      }\n    });\n\n    inputRef.current!.addEventListener('blur', () => {\n      isFocused.current = false;\n      containerRef.current!.style.transform = 'translateY(0)';\n      containerRef.current!.style.transition = 'transform 0.2s linear';\n    });\n  }, []);\n\n  useHistoryBack({\n    isActive: true,\n    onBack: returnToAuthPhoneNumber,\n  });\n\n  const onCodeChange = useCallback((e: FormEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { currentTarget: target } = e;\n    target.value = target.value.replace(/[^\\d]+/, '').substr(0, CODE_LENGTH);\n\n    if (target.value === code) {\n      return;\n    }\n\n    setCode(target.value);\n\n    if (!isTracking) {\n      setIsTracking(true);\n    } else if (!target.value.length) {\n      setIsTracking(false);\n    }\n\n    if (target.value.length === CODE_LENGTH) {\n      setAuthCode({ code: target.value });\n    }\n  }, [authError, clearAuthError, code, isTracking, setAuthCode]);\n\n  function handleReturnToAuthPhoneNumber() {\n    returnToAuthPhoneNumber();\n  }\n\n  return (\n    <div className=\"custom-wrapper\">\n      <div ref={containerRef} className=\"auth-form\">\n        <div id=\"logo\" />\n        <h1 className=\"flex center\">\n          {authPhoneNumber}\n          <div\n            className=\"auth-number-edit div-button\"\n            onClick={handleReturnToAuthPhoneNumber}\n            role=\"button\"\n            tabIndex={0}\n            title={lang('WrongNumber')}\n          >\n            <i className=\"icon icon-edit\" />\n          </div>\n        </h1>\n        <p className=\"note\">\n          {langPack.SentAppCode1.value} <br /> {langPack.SentAppCode2.value}\n        </p>\n        <div className=\"label\">\n          {langPack.EnterCode.value}\n        </div>\n        <InputText\n          ref={inputRef}\n          className=\"custom-input noMarginBottom\"\n          id=\"sign-in-code\"\n          placeholder={lang('5 digit verification code')}\n          onInput={onCodeChange}\n          value={code}\n          error={authError && lang(authError)}\n          autoComplete=\"off\"\n          inputMode=\"numeric\"\n          onLoading={authIsLoading}\n          loadingSize=\"medium\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authPhoneNumber', 'authIsCodeViaApp', 'authIsLoading', 'authError']),\n)(AuthCode));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport MonkeyPassword from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError' | 'authHint'>;\n\nconst AuthPassword: FC<StateProps> = ({\n  authIsLoading, authError, authHint,\n}) => {\n  const { setAuthPassword, clearAuthError } = getActions();\n\n  const lang = useLang();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleChangePasswordVisibility = useCallback((isVisible) => {\n    setShowPassword(isVisible);\n  }, []);\n\n  const handleSubmit = useCallback((password: string) => {\n    setAuthPassword({ password });\n  }, [setAuthPassword]);\n\n  return (\n    <div id=\"auth-password-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <MonkeyPassword isPasswordVisible={showPassword} />\n        <h1>{lang('Login.Header.Password')}</h1>\n        <p className=\"note\">{lang('Login.EnterPasswordDescription')}</p>\n        <PasswordForm\n          clearError={clearAuthError}\n          error={authError && lang(authError)}\n          hint={authHint}\n          isLoading={authIsLoading}\n          isPasswordVisible={showPassword}\n          onChangePasswordVisibility={handleChangePasswordVisibility}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError', 'authHint']),\n)(AuthPassword));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { useState, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport AvatarEditable from '../ui/AvatarEditable';\n\ntype StateProps = Pick<GlobalState, 'authIsLoading' | 'authError'>;\n\nconst AuthRegister: FC<StateProps> = ({\n  authIsLoading, authError,\n}) => {\n  const { signUp, clearAuthError, uploadProfilePhoto } = getActions();\n\n  const lang = useLang();\n  const [isButtonShown, setIsButtonShown] = useState(false);\n  const [croppedFile, setCroppedFile] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n\n  const handleFirstNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    if (authError) {\n      clearAuthError();\n    }\n\n    const { target } = event;\n\n    setFirstName(target.value);\n    setIsButtonShown(target.value.length > 0);\n  }, [authError, clearAuthError]);\n\n  const handleLastNameChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setLastName(target.value);\n  }, []);\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    signUp({ firstName, lastName });\n\n    if (croppedFile) {\n      uploadProfilePhoto({ file: croppedFile });\n    }\n  }\n\n  return (\n    <div id=\"auth-registration-form\" className=\"custom-scroll\">\n      <div className=\"auth-form\">\n        <form action=\"\" method=\"post\" onSubmit={handleSubmit}>\n          <AvatarEditable onChange={setCroppedFile} />\n          <h2>{lang('YourName')}</h2>\n          <p className=\"note\">{lang('Login.Register.Desc')}</p>\n          <InputText\n            id=\"registration-first-name\"\n            label={lang('Login.Register.FirstName.Placeholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={authError && lang(authError)}\n            autoComplete=\"given-name\"\n          />\n          <InputText\n            id=\"registration-last-name\"\n            label={lang('Login.Register.LastName.Placeholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n            autoComplete=\"family-name\"\n          />\n          {isButtonShown && (\n            <Button type=\"submit\" ripple isLoading={authIsLoading}>{lang('Next')}</Button>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['authIsLoading', 'authError']),\n)(AuthRegister));\n"],"names":["memo","withGlobal","global","pick","_ref","authPhoneNumber","authIsLoading","authError","setAuthCode","returnToAuthPhoneNumber","clearAuthError","getActions","lang","useLang","inputRef","useRef","containerRef","code","setCode","useState","isTracking","setIsTracking","currentViewportHeight","Number","window","visualViewport","height","isFocused","useEffect","IS_TOUCH_ENV","current","focus","addEventListener","style","transform","caretColor","setTimeout","_numberKeyboardHeight","scrollPixel","clientHeight","numberKeyboardHeight","transition","useHistoryBack","isActive","onBack","onCodeChange","useCallback","e","currentTarget","target","value","replace","substr","length","React","className","ref","id","onClick","role","tabIndex","title","langPack","InputText","placeholder","onInput","error","autoComplete","inputMode","onLoading","loadingSize","authHint","setAuthPassword","showPassword","setShowPassword","handleChangePasswordVisibility","isVisible","handleSubmit","password","MonkeyPassword","isPasswordVisible","PasswordForm","clearError","hint","isLoading","onChangePasswordVisibility","onSubmit","signUp","uploadProfilePhoto","isButtonShown","setIsButtonShown","croppedFile","setCroppedFile","firstName","setFirstName","lastName","setLastName","handleFirstNameChange","event","handleLastNameChange","action","method","preventDefault","file","AvatarEditable","onChange","label","Button","type","ripple"],"sourceRoot":""}