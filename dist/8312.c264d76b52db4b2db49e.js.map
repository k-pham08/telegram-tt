{"version":3,"file":"8312.c264d76b52db4b2db49e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/currentTimeSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.module.scss?f702","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS, ARE_WEBCODECS_SUPPORTED } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = ARE_WEBCODECS_SUPPORTED && !IS_MOBILE ? 80 : 40;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import React, {\n  useRef, useState, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV, IS_VIDEO_PREVIEW_SUPPORTED } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  isActive?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst SeekLine: React.FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  url,\n  isActive,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    if (!IS_VIDEO_PREVIEW_SUPPORTED) return;\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (!IS_VIDEO_PREVIEW_SUPPORTED || isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!isLockedRef.current && !isSeeking) {\n      setSelectedTime(getCurrentTime());\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, 500);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from './hooks/currentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport {\n  IS_TOUCH_ENV, IS_IOS, IS_ANDROID, ARE_WEBCODECS_SUPPORTED,\n} from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst IS_PREVIEW_DISABLED = (IS_IOS || IS_ANDROID) && !ARE_WEBCODECS_SUPPORTED;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={IS_PREVIEW_DISABLED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            user={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          user={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon', 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, idPrefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    'no-selection',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={idPrefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[userId];\n\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={user} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !userReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${userId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <PrivateChatInfo\n                        userId={userId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { selectLanguageCode, selectRequestedTranslationLanguage, selectTabState } from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './MessageLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst MessageLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const { requestMessageTranslation, closeMessageLanguageModal } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((toLanguageCode: string) => {\n    if (!chatId || !messageId) return;\n\n    requestMessageTranslation({ chatId, id: messageId, toLanguageCode });\n    closeMessageLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeMessageLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={styles.listItem}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).messageLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId && messageId\n      ? selectRequestedTranslationLanguage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(MessageLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ty4iYfZBkv7TFGwTrzul\",\"list-item\":\"GXEouxz4KmZfOmlymVnB\",\"listItem\":\"GXEouxz4KmZfOmlymVnB\",\"title\":\"MpKdUudmoMIsoFkDFNbJ\",\"subtitle\":\"B0tluyEaLLlMRQ5TZMEP\",\"languages\":\"SxqwP1DiSMFc8Gh_KgfK\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState, TabState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    // eslint-disable-next-line no-console\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" id=\"tl-left-search\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    setState((current) => ({\n      ...current,\n      isDragging: false,\n      width: undefined,\n      height: undefined,\n    }));\n\n    onDragEnd();\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'div-button', 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n    } else {\n      openLimitReachedModal({\n        limit: 'chatlistInvites',\n      });\n    }\n  }, [\n    invites, state.folderId, state.isTouched, maxInviteLinks, isCreating, onSaveFolder, onShareFolder, lang,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(inviteLink);\n  }, [copyLink, inviteLink]);\n\n  const handleShare = useCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  }, [inviteLink]);\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  }, [folderId, onReset, url]);\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  }, [lang]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (!folderId || !url) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  }, [folderId, selectedIds, url]);\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={isLoading ? lang('Loading') : url!}\n        onRevoke={handleRevoke}\n        isDisabled={isDisabled}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/windowEnvironment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport {\n  playNotifySound,\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n} from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  lastSyncTime?: number;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  languages,\n  language,\n  canTranslate,\n  doNotTranslate,\n  lastSyncTime,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && !languages?.length) {\n      loadLanguages();\n    }\n  }, [languages, lastSyncTime, loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  }, [setSettingOption]);\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          {canTranslate && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      languages,\n      language,\n      canTranslate,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [hasCurrentUserFullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUser={currentUser}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const currentUserFullInfo = selectUserFullInfo(global, global.currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        user={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          user={user}\n          chat={chat}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\nconst PRELOAD_CONTACT = 10000;\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll\n      items={viewportIds}\n      onLoadMore={getMore}\n      preloadBackwards={PRELOAD_CONTACT}\n      noScrollRestoreOnTop\n      noScrollRestore\n      className=\"chat-list custom-scroll\"\n    >\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './ArchivedChats.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const backHandler = () => {\n    sendScreenName('tl_navigation_mainScreen');\n    onReset();\n  };\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={backHandler}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <ChatList\n        folderType=\"archived\"\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        foldersDispatch={foldersDispatch}\n        archiveSettings={archiveSettings}\n      />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = 2 * REM;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  isReady?: boolean;\n  chosen?: boolean;\n  noAppearAnimation?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  isReady,\n  noAppearAnimation,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaAppearData = useMedia(`sticker${reaction.appearAnimation?.id}`, !isReady || noAppearAnimation);\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady || noAppearAnimation);\n  const staticIconData = useMedia(`document${reaction.staticIcon?.id}`, !noAppearAnimation);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const [isFirstPlay, , unmarkIsFirstPlay] = useFlag(true);\n  const [isActivated, activate, deactivate] = useFlag();\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady && !isFirstPlay ? activate : undefined}\n    >\n      {noAppearAnimation && (\n        <img\n          className={cn('static-icon')}\n          src={staticIconData}\n          alt=\"\"\n        />\n      )}\n      {!isAnimationLoaded && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.appearAnimation?.id}\n          tgsUrl={mediaAppearData}\n          play={isFirstPlay}\n          noLoop\n          size={REACTION_SIZE}\n          onEnded={unmarkIsFirstPlay}\n        />\n      )}\n      {!isFirstPlay && !noAppearAnimation && (\n        <AnimatedSticker\n          key={reaction.selectAnimation?.id}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName, { createClassNameBuilder } from '../../../util/buildClassName';\nimport {\n  isSameReaction, canSendReaction, getReactionUniqueKey, sortReactions,\n} from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  topReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n  onShowMore: (position: IAnchorPosition) => void;\n  className?: string;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\nconst REACTIONS_AMOUNT = 6;\n\nconst ReactionSelector: FC<OwnProps> = ({\n  allAvailableReactions,\n  topReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  canPlayAnimatedEmojis,\n  onToggleReaction,\n  onShowMore,\n  className,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const availableReactions = useMemo(() => {\n    const reactions = allAvailableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }).filter(Boolean) || [];\n\n    return sortReactions(reactions, topReactions);\n  }, [allAvailableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions, topReactions]);\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions.length === REACTIONS_AMOUNT + 1\n      ? availableReactions\n      : availableReactions.slice(0, REACTIONS_AMOUNT);\n  }, [availableReactions]);\n  const withMoreButton = reactionsToRender.length < availableReactions.length;\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  const handleShowMoreClick = useLastCallback(() => {\n    const bound = ref.current?.getBoundingClientRect() || { x: 0, y: 0 };\n    onShowMore({\n      x: bound.x,\n      y: bound.y,\n    });\n  });\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={buildClassName(cn('&', lang.isRtl && 'isRtl'), className)} ref={ref}>\n      <div className={cn('bubble-small', lang.isRtl && 'isRtl')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('bubble-big', lang.isRtl && 'isRtl')} />\n        <div className={cn('items')} dir={lang.isRtl ? 'rtl' : undefined}>\n          {reactionsToRender.map((reaction, i) => (\n            <ReactionSelectorReaction\n              key={getReactionUniqueKey(reaction.reaction)}\n              isReady={isReady}\n              onToggleReaction={onToggleReaction}\n              reaction={reaction}\n              noAppearAnimation={!canPlayAnimatedEmojis}\n              chosen={userReactionIndexes.has(i)}\n            />\n          ))}\n          {withMoreButton && (\n            <Button\n              color=\"translucent\"\n              className={cn('show-more')}\n              onClick={handleShowMoreClick}\n            >\n              <i className=\"icon icon-down\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, targetHref, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenReactionPicker}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && seenByDatesCount\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, seenByDatesCount],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                seenByDatesCount === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (seenByDatesCount\n                    ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedTranslationLanguage,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n  isServiceNotificationMessage,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n  isReactionPickerOpen,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openMessageLanguageModal,\n    openReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return Object.keys(message.seenByDates).slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openMessageLanguageModal({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const isServiceNotification = isServiceNotificationMessage(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n\n    const { canTranslate: isTranslationEnabled, doNotTranslate } = global.settings.byKey;\n\n    const canTranslateLanguage = !detectedLanguage || !doNotTranslate.includes(detectedLanguage);\n    const canTranslate = IS_TRANSLATION_SUPPORTED && isTranslationEnabled && message.content.text\n      && canTranslateLanguage && !isLocal && !isServiceNotification && !isScheduled && !isAction && !hasTranslation\n      && !message.emojiOnlyCount;\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation,\n      canSelectLanguage: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, 'no-selection', isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectTabState,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  position,\n  isTranslucent,\n  withCustomReactions,\n}) => {\n  const { toggleReaction, closeReactionPicker } = getActions();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(styles.menuContent, !withCustomReactions && styles.onlyReactions)}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !withCustomReactions}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={handleToggleCustomReaction}\n        onReactionSelect={handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const { chatId, messageId, position } = state.reactionPicker || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : false;\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_ELECTRON, PRODUCTION_URL } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON ? PRODUCTION_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, 'sticker-set', isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-selection no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, 'no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  canSendPlainText,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (lastSyncTime && isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, lastSyncTime, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSelect = useLastCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  });\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { isUserId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              chat={chat}\n              user={user}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { isChatChannel } from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          chat={senderChat}\n          user={senderUser}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem no-selection with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem no-selection with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","ARE_WEBCODECS_SUPPORTED","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","duration","bufferedRanges","isReady","posterSize","isActive","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","IS_VIDEO_PREVIEW_SUPPORTED","floor","renderVideoPreview","createVideoPreviews","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isPlaying","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","IS_PREVIEW_DISABLED","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","reduce","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","slideClassName","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","ChatOrUserPicker","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","thumbnail","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","entries","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","fullClassName","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","thumbCustomEmojiId","isVideos","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","noContextMenu","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Picker","itemIds","lockedIds","onSelectedIdsChange","selectedIds","Badge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","memberIds","sort","leftId","rightId","handleCloseSeenByModal","noStatusOrTyping","formatDateAtTime","statusIcon","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","r","seenByUserIds","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","userReactions","reactor","seenByUser","FullNameTitle","peer","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","messageLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedTranslationLanguage","requestMessageTranslation","closeMessageLanguageModal","handleSelect","toLanguageCode","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","langCode","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","teactExperimentControlled","secondaryIcon","multiline","narrow","highlight","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","contextActions","useChatContextActions","useSelectWithEnter","MuteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","lastSyncTime","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","FloatingActionButton","settings","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","maxChats","filterValue","shouldHideChatTypes","onSelectedChatTypesChange","onFilterChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","useEffectWithPrevDeps","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","filterPlaceholder","searchInputId","isSearchable","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","prevIsActive","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","shouldShowLoginCodeInChatList","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","rightIcon","onClickLabel","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","preloadBackwards","noScrollRestore","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","backHandler","sendScreenName","onTransitionEnd","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","cn","createClassNameBuilder","noAppearAnimation","chosen","onToggleReaction","mediaAppearData","appearAnimation","staticIconData","isAnimationLoaded","markAnimationLoaded","isFirstPlay","unmarkIsFirstPlay","activate","deactivate","onMouseEnter","allAvailableReactions","enabledReactions","currentReactions","maxUniqueReactions","onShowMore","canSendReaction","sortReactions","reactionsToRender","REACTIONS_AMOUNT","withMoreButton","userReactionIndexes","chosenReactions","chosenOrder","findIndex","handleShowMoreClick","bound","ReactionSelectorReaction","isReactionPickerOpen","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenReactionPicker","bubbleStyle","ReactionSelector","messagesCount","MenuSeparator","Skeleton","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isServiceNotification","isServiceNotificationMessage","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","isTranslationEnabled","canTranslateLanguage","emojiOnlyCount","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","selectIsReactionPickerOpen","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openMessageLanguageModal","openReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","setIsMuteModalOpen","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","reactionPicker","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","storedPosition","renderingPosition","withPortal","isDense","handleToggleCustomReaction","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","native","IS_ELECTRON","PRODUCTION_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","fullInfo","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress"],"sourceRoot":""}