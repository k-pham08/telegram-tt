{"version":3,"file":"5018.e7e7494f2a4e7802fc99.js","mappings":"kTA0DO,SAASA,EACdC,GAEG,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADCC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM,OAAEK,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,OAAKE,GAAWC,GAIhBV,GAASY,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,OAAOG,EAAWN,GAC3EP,GAASc,EAAAA,EAAAA,IAA8Bd,EAAQS,EAAQC,OAAUG,OAAWA,OAAWA,EAAWN,IAJzFP,CAMX,EAzDAe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,OAAMG,EAAWN,EAAM,KAGhFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOlB,EAAqBC,EAAQO,EAAM,KAG5CQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvC,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMS,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,IAAiBC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOgB,gBAAgBC,gBAAgBL,IAAkB,CAAC,EAQjH,OANID,IAAUG,IACZrB,GAASc,EAAAA,EAAAA,IAA8Bd,EAAQS,EAAQC,EAAUe,EAAAA,OAAkBZ,OAAWA,EAAWN,KAGlGK,EAAAA,EAAAA,IAAsBZ,EAAQS,EAAQC,GAAU,EAAMQ,EAAOX,EAEzD,KAGfQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,UAAES,EAAS,MAAEnB,GAAQC,EAAAA,EAAAA,OAAsBS,GAC3C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOiB,EAAAA,EAAAA,IAA2B3B,EAAQS,EAAQC,EAAUgB,EAAWnB,EAAM,I,2BCtC/EQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,GACJW,EAAE,SACFlB,EAAWmB,EAAAA,GAAc,KACzBC,EAAO,SAAQ,qBACfC,GAAuB,EAAK,kBAC5BC,GAAoB,EAAK,kBACzBC,EAAiB,MACjB1B,GAAQC,EAAAA,EAAAA,OACNS,EAEEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAEtD4B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GA+CxC,OA9CI4B,EAASC,cAAcC,OAASF,EAASC,cAAcE,SACzDtC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoC,aAAc,IACTD,EAASC,aACZE,QAAQ,IAET/B,IAGA2B,GACHA,EAAmBzB,SAAWmB,GAC3BM,EAAmBxB,WAAaA,GAChCwB,EAAmBJ,OAASA,IAE3BF,IACF5B,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQ4B,EAAIlB,EAAU,aAAc,GAAIH,GAEvEP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9ByC,gBAAiB,CAAC,GACjBlC,IAILP,EAASD,EADTC,GAAS0C,EAAAA,EAAAA,IAAsB1C,EAAQO,GACDA,GAEtCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2C,mBAAmB,EACnBC,0BAAsB/B,KAClBe,KAAON,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBAAgBC,UAAY,CACnED,gBAAiB,CAAC,IAEnBtC,IAGDqB,KACWmB,EAAAA,EAAAA,IAAW/C,EAAQ4B,IAEtBoB,UAAYf,EACpBjB,EAAQiC,eAAe,CAAExC,OAAQmB,EAAKrB,UAC7BqB,KAAON,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2C,kBAC9ClC,EAAQmC,gBAAgB,CAAE5C,WAI9BS,EAAQoC,gBAAgB,CAAE7C,WAEnB8C,EAAAA,EAAAA,IAAyBrD,EAAQ4B,EAAIlB,EAAUoB,EAAMC,EAAsBC,EAAmBzB,EAAM,KAG7GQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,SAAEC,EAAWmB,EAAAA,IAAmBZ,EAExCqC,GAAUC,EAAAA,EAAAA,IAAqB9C,EAAQ,SAAUC,GACnD8C,EAAAA,IACFC,OAAOC,SAAUC,cAAcL,GAE/BG,OAAOG,KAAKN,EAAS,SACvB,KAGFvC,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OADAD,EAAQoC,gBAAgB,CAAE7C,WACnB8C,EAAAA,EAAAA,IAAyBrD,OAAQa,OAAWA,OAAWA,OAAWA,OAAWA,EAAWN,EAAM,KAGvGQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtCjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,KAC3BsB,EAAAA,EAAAA,IAAetB,EAAQO,GAC1BsD,iBAAiB,GAChBtD,GACHP,EAAS,IAAKA,EAAQ8D,qBAAqB,IAC3CC,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQgD,SAAS,IAAK/C,EAASV,SAAQ,KAGzCQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,KAAEwD,EAAI,SAAEvD,EAAQ,MAAEwD,EAAK,OAAEC,EAAM,MAAE5D,GAAQC,EAAAA,EAAAA,OAC7CS,EAMJ,OAJIR,GACFO,EAAQgD,SAAS,CAAEpC,GAAInB,EAAQC,WAAUH,WAGpCgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoE,eAAgB,CACd3D,SACAwD,OACAC,QACAC,WAED5D,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqE,kBAAcxD,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gCAAgC,CAACf,EAAQgB,EAASC,KACjE,MAAM,uBAAEqD,EAAsB,MAAE/D,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsE,0BACC/D,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,iBAAEsD,EAAgB,WAAEC,EAAU,MAAEjE,GAAQC,EAAAA,EAAAA,OAAsBS,GAE9D,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EAEH,YADAO,EAAQgD,SAAS,CAAEpC,GAAI4C,EAAW,GAAIjE,UAIxC,MAAMkE,EAAWD,EAAWE,QAAQjE,GAEpC,IAAkB,IAAdgE,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErCvD,EAAQgD,SAAS,CAAEpC,GAAI+C,EAAQ5C,sBAAsB,EAAMxB,SAAQ,KAGrEQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B4E,6BAAyB/D,GACxBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6E,mBAAehE,GACdN,EAAM,I,qGClHX,MACMuE,EAA8BC,EAAAA,IAA2BC,EAAAA,IAK/D,IAAIC,EA0uBJ,SAASC,EAAoBlF,EAAqBS,EAAgB0E,GAChE,MAAQrD,KAAMsD,EAAe,SAAE1E,IAAaC,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAC3EqF,EAAOC,EAAAA,GAEPC,EAAmC,cAApBH,GACjBI,EAAAA,EAAAA,IAA4BxF,EAAQS,IACpCgF,EAAAA,EAAAA,IAAmBzF,EAAQS,GAC/B,IAAK8E,IAAiB7E,EAAU,OAChC,MAAMgF,EAAWP,EACdQ,KAAK/D,GAAO2D,EAAa3D,KACzBuC,QAAQyB,IAAYC,EAAAA,EAAAA,IAA4B7F,EAAQ4F,EAASlF,GAAUoF,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAASpE,GAAKqE,EAASrE,KAEjDsE,EAASR,EAASS,QAAO,CAACC,EAAKR,KACnC,MAAMS,GAASC,EAAAA,EAAAA,IAAatG,EAAQ4F,GAKpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,GAAU,OACtDD,EAAIG,KAAM,GCxzBP,SACLlB,EACAO,GAEA,MAAMa,GAAQC,EAAAA,EAAAA,IAAuBd,GAC/Be,EAAiBF,EAAS,GAAEA,KAAW,GACvCxC,GAAO2C,EAAAA,EAAAA,GACXhB,OAAS/E,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,IAC/DgG,KAAK,IAGR,MAAQ,GAAEF,KAFUG,EAAAA,EAAAA,IAA6BzB,EAAMO,EAAS3B,GAAM,IAGxE,CD4yBgB8C,CAAyB1B,EAAMO,QAEpCQ,CAAG,GACT,IAEGY,EAAatB,EAASS,QAAO,CAACC,EAAKR,KACvC,MAAMS,GAASC,EAAAA,EAAAA,IAAatG,EAAQ4F,GAIpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,GAAU,OACtDD,EAAIG,KAAM,IAAEU,EAAAA,EAAAA,IAAsB5B,EAAMO,GAAS,EAAO,GAAG,QAEpDQ,CAAG,GACT,KAEHc,EAAAA,EAAAA,IAAoBhB,EAAOW,KAAK,MAAOG,EAAWH,KAAK,MACzD,EAvwBA9F,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,aAAEyG,EAAY,MAAE5G,GAAQC,EAAAA,EAAAA,OACtCS,EAIJ,OAFAjB,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,mBAAoByG,IAEnE3E,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,eAAgByG,EAAc5G,EAAM,KAG7FQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,UAAEoG,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAE7B,OAAOkF,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,eAAgB2G,EAAU,KAGhFtG,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,UAAEoG,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAQ,KAAEoB,GAASI,EAC7BoF,EAAqB,cAATxF,EAAuB,qBAAuB,YAEhE,OAAOsF,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU4G,EAAWD,EAAU,KAG3EtG,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,KACJgD,EAAI,OAAExD,EAAM,SAAEC,EAAQ,KAAEoB,GACtBb,EAEEqG,EAAqB,cAATxF,EAAuB,wBAA0B,eAEnE,OAAOsF,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU4G,EAAWrD,EAAK,KAGtElD,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAM6E,GAAeE,EAAAA,EAAAA,IAAmBzF,EAAQS,GAC1C8G,GAAcC,EAAAA,EAAAA,IAAkBxH,EAAQS,EAAQC,EAAUH,GAChE,IAAKgF,IAAiBgC,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAAc3F,GAC/C+F,QAAQpC,EAAa3D,KAAOiE,EAAAA,EAAAA,IAA4B7F,EAAQuF,EAAa3D,GAAKlB,GAAUkH,WAGrG,OAAKH,GAIEL,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,YAAa+G,QAJjE,CAI0F,KAG5F1G,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,iBAAEsD,EAAgB,MAAEhE,GAAQC,EAAAA,EAAAA,OAAsBS,GAClD,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAM6E,GAAeE,EAAAA,EAAAA,IAAmBzF,EAAQS,GAC1C8G,GAAcC,EAAAA,EAAAA,IAAkBxH,EAAQS,EAAQC,EAAUH,GAChE,IAAKgF,IAAiBgC,EACpB,OAGF,MAAMM,GAAeC,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GAGxD,IAAI2G,EAEJ,IAJiBU,EAAAA,EAAAA,IAAuB/H,EAAQS,EAAQC,EAAUH,IAIhDsH,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAK3C,GAE9B4C,EADiBH,EAAgBtD,QAAQmD,EAAaO,YAC1B7D,EAClC8C,EAAYc,GAAYH,EAAgB7H,OAAS,GAAKgI,GAAY,EAC9DE,OAAOL,EAAgBG,SACvBtH,CACN,MAbIwG,EAHE3G,IAAamB,EAAAA,IACFkB,EAAAA,EAAAA,IAAW/C,EAAQS,IAEd6H,aAAa1G,IAEZ2G,EAAAA,EAAAA,IAAiBvI,EAAQS,EAAQC,IAE5B8H,cAU5BxH,EAAQyH,gBAAgB,CAAEpB,YAAW9G,UACrCS,EAAQ0H,aAAa,CACnBjI,SACAC,WACA2G,UAAWA,EACX9G,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,UAAE2G,EAAS,OAAEsB,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClEvI,GAAQC,EAAAA,EAAAA,OACNS,EAEEkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+I,YAAa,CACXtI,SACAC,WACA2G,YACAsB,OAAQA,QAAAA,EAAUxG,EAAS4G,YAAYJ,OACvCC,OAAQA,QAAAA,EAAUzG,EAAS4G,YAAYH,OACvCC,aAAcA,GAAgB1G,EAAS4G,YAAYF,cAAgB7I,EAAO+I,YAAYC,iBACtFC,0BAAqEpI,IAA9CsB,EAAS4G,YAAYE,qBACxCjJ,EAAO+I,YAAYG,yBACnB/G,EAAS4G,YAAYE,qBACzBH,QAASA,GAAW3G,EAAS4G,YAAYD,UAE1CvI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJ2H,EAAM,MAAErI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+I,YAAa,KACRzH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOwI,YACjCH,SACAE,SAAS,IAEVvI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,aACJ4H,EAAY,qBAAEI,EAAoB,MAAE1I,GAAQC,EAAAA,EAAAA,OAC1CS,EAWJ,OATAjB,EAAS,IACJA,EACH+I,YAAa,IACR/I,EAAO+I,YACVC,iBAAkBH,EAClBK,yBAA0BD,KAIvB1G,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+I,YAAa,KACRzH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOwI,YACjCF,eACAI,yBAED1I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,QACJ6H,EAAO,MAAEvI,GAAQC,EAAAA,EAAAA,OACfS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+I,YAAa,KACRzH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOwI,YACjCD,YAEDvI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJ0H,EAAM,MAAEpI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+I,YAAa,KACRzH,EAAAA,EAAAA,IAAetB,EAAQO,GAAOwI,YACjCJ,WAEDpI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+I,YAAa,CACXH,OAAQzG,EAAS4G,YAAYH,OAC7BC,aAAc1G,EAAS4G,YAAYF,aACnCI,qBAAsB9G,EAAS4G,YAAYE,qBAC3CH,QAAS3G,EAAS4G,YAAYD,UAE/BvI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OAAER,EAAM,UAAE4G,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEnDkI,GAAsBC,EAAAA,EAAAA,IAAyBpJ,GAAQqJ,EAAAA,EAAAA,MAAe9I,GACtE4B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,GAAK4I,GAaE,GAAI1I,IAAW0B,EAASmH,YAAY7I,QAAU4G,IAAclF,EAASmH,YAAYjC,UACtF,OAAO9E,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsJ,YAAa,CACX7I,SACA4G,YACAkC,OAAQ,CAAC,IAEVhJ,QAnBHkD,OAAO+F,YAAW,KAChBxJ,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BsJ,YAAa,CACX7I,SACA4G,YACAkC,OAAQ,CAAC,IAEVhJ,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,GA3OW,IAuPhB,KAGlBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsJ,YAAa,CAAC,GACb/I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAQ,KAAEoB,GAASI,EAEnC,IAAIsG,EACJ,GAAI9H,IAAamB,EAAAA,GACf,GAAa,WAATC,EAAmB,CACrB,MAAM4H,GAAmBC,EAAAA,EAAAA,IAAgB3J,EAAQS,EAAQoB,EAAAA,IACzD,IAAK6H,GAAkBvJ,OACrB,OAGFqI,EAAgBkB,EAAiBA,EAAiBvJ,OAAS,EAC7D,MAGEqI,GAFazF,EAAAA,EAAAA,IAAW/C,EAAQS,IAEV6H,aAAa1G,QAKrC4G,GAFmBD,EAAAA,EAAAA,IAAiBvI,EAAQS,EAAQC,IAExB8H,cAGzBA,GAILxH,EAAQ0H,aAAa,CACnBjI,SACAC,WACA0E,gBAAiBtD,EACjBuF,UAAWmB,EACXoB,aAAa,EACb3H,mBAAmB,EACnB1B,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EAEvB2H,GAAaC,EAAAA,EAAAA,IAAiB9J,EAAQS,EAAQC,EAAUH,GAE9D,GAAKsJ,GAAoC,IAAtBA,EAAW1J,OAEvB,CACL,MAAMkH,EAAYwC,EAAWE,MAE7B/J,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,aAAc,IAAImJ,GAAatJ,IAExFwD,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQ0H,aAAa,CACnBjI,SACAC,WACA2G,UAAWA,EACX9G,QACA0B,mBAAmB,GAEvB,MAfEjB,EAAQgJ,iBAAiB,CAAEzJ,SAiBb,KAGlBQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,gBAAEuD,EAAkB,SAAQ,YAAEwE,EAAW,UAAEK,EAAS,cAAEC,EAAa,eACpGC,EAAc,oBAAEC,EAAmB,qBAAErI,EAAoB,kBAAEE,EAAiB,MAC5E1B,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAI,UAAEoG,GAAcpG,EAEpB,QAAkBJ,IAAdoJ,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmCtK,EAAQkK,EAAgBD,GACnEI,GAAKlK,UACLkH,IAAakD,EAAAA,EAAAA,IAAQF,GAE3B,CAEA,MAAMnI,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GACtDiK,GAAoBtI,GACxBzB,IAAWyB,EAAmBzB,QAC3BC,IAAawB,EAAmBxB,UAChC0E,IAAoBlD,EAAmBJ,KAiB5C,GAdImD,IACFwF,aAAaxF,GACbA,OAAcpE,GAEhBoE,EAAcxB,OAAO+F,YAAW,KAC9BxJ,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS0K,EAAAA,EAAAA,IAAqB1K,OAAQa,OAAWA,OAAWA,OAAWA,OAAWA,EAAWN,GAC7FP,GAAS2K,EAAAA,EAAAA,IAAqB3K,OAAQa,EAAWN,IACjDwD,EAAAA,EAAAA,IAAU/D,EAAO,GAChB4J,EAAc9E,EA/WI,MAiXrB9E,GAAS0K,EAAAA,EAAAA,IAAqB1K,EAAQS,EAAQ4G,EAAW3G,EAAUkJ,EAAaQ,EAAqB7J,GACrGP,GAAS2K,EAAAA,EAAAA,IAAqB3K,OAAQa,EAAWN,GAE7C4J,EAAgB,CAClB,MAAMN,GAAaC,EAAAA,EAAAA,IAAiB9J,EAAQS,EAAQC,EAAUH,IAAU,GACxEP,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,aAAc,IAAImJ,EAAYM,GAAiB5J,EAC1G,CAEIiK,IACFxK,GAAS2K,EAAAA,EAAAA,IAAqB3K,EAAQ4K,EAAAA,GAAAA,OAAuBrK,IAG/D,MAAMgH,GAAcC,EAAAA,EAAAA,IAAkBxH,EAAQS,EAAQC,EAAUH,GAChE,GAAIgH,GAAeA,EAAYsD,SAASxD,GAUtC,OATAtD,EAAAA,EAAAA,IAAU/D,EAAQ,CAAE8K,uBAAuB,SAC3C9J,EAAQgD,SAAS,CACfpC,GAAInB,EACJC,WACAoB,KAAMsD,EACNrD,uBACAE,oBACA1B,UASJ,GAJIiK,IACFxK,GAASwC,EAAAA,EAAAA,IAAsBxC,EAAQS,EAAQC,EAAU,mBAAeG,EAAWN,IAGjFgH,IAAgBiD,EAAkB,CACpC,MAAMO,EAAY1D,EAAYE,EAAY,GAAKqD,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrE5K,GAAS2K,EAAAA,EAAAA,IAAqB3K,EAAQ+K,EAAWxK,EACnD,EAEAwD,EAAAA,EAAAA,IAAU/D,EAAQ,CAAE8K,uBAAuB,IAE3C9J,EAAQgD,SAAS,CACfpC,GAAInB,EACJC,WACAoB,KAAMsD,EACNrD,uBACAE,oBACA1B,UAEFS,EAAQgK,qBAAqB,CAC3BzK,QACA0K,mBAAmB,GAEL,KAGlBlK,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,WACJiK,EAAU,WAAE/F,EAAU,UAAE8E,EAAS,YAAEkB,EAAW,MAAE5K,GAAQC,EAAAA,EAAAA,OACtDS,EACJ,IAAImK,EAIJ,OAHInB,IACFmB,GAAoBC,EAAAA,EAAAA,IAA0BrL,EAAQkL,EAAYjB,KAE7D1H,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,CACfqI,aACA/F,WAAYiG,GAAqBjG,EACjCmG,cAAc,EACdH,gBAED5K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,cAAUjC,EACVyK,cAAc,EACdC,WAAW,EACXC,YAAY,IAEbjL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,UAAEsK,EAAS,MAAEhL,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,IACZV,EAASU,gBACZ0I,YAEAC,WAAYD,GAAapJ,EAASU,gBAAgB2I,aAEnDjL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,WAAEuK,EAAU,MAAEjL,GAAQC,EAAAA,EAAAA,OAAsBS,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjC2I,aACAD,UAAWC,IAEZjL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,CAAC,GACjBtC,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sCAAsC,CAACf,EAAQgB,EAASC,KACvE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASsJ,iBACZ,OAGF,MAAQhL,OAAQyK,EAAU,WAAE/F,GAAehD,EAASsJ,iBAEpDzK,EAAQ0K,gBAAgB,CAAER,aAAY/F,aAAY5E,SAAQ,KAG5DQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,QAAE2E,EAAO,MAAErF,GAAQC,EAAAA,EAAAA,OAAsBS,EAE/C,OAAO0K,EAAAA,EAAAA,IAA2B3L,EAAQ4F,EAASrF,EAAM,KAG3DQ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACf,EAAQgB,EAASC,KAChE,MAAM,SAAEyE,EAAQ,MAAEnF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhD,IAAK,MAAM2E,KAAWF,EACpB1F,GAAS2L,EAAAA,EAAAA,IAA2B3L,EAAQ4F,EAASrF,GAGvD,OAAOP,CAAM,KAGfe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,QAAE2E,EAAO,MAAErF,GAAQC,EAAAA,EAAAA,OAAsBS,EAE/C,OAAO2K,EAAAA,EAAAA,IAA8B5L,EAAQ4F,EAASrF,EAAM,KAG9DQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASsJ,iBACZ,OAGF,MAAM,OAAEhL,EAAM,WAAE0E,GAAehD,EAASsJ,kBAClC,SAAE/K,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE3DgF,GAAeE,EAAAA,EAAAA,IAAmBzF,EAAQS,GAC3C8E,GAAiB7E,GACLyE,EAAWQ,KAAK/D,GAAO2D,EAAa3D,KAClDuC,QAAQyB,IAAYC,EAAAA,EAAAA,IAA4B7F,EAAQ4F,EAASlF,GAAUmL,cACrEC,SAASlG,GAAY5E,EAAQ+K,qBAAqB,CAAEnG,UAASrF,WAAS,KAGjFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,UAAEoG,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD+C,GAAWgI,EAAAA,EAAAA,IAAkBhM,EAAQO,GAC3C,OAAKyD,GAIEiI,EAAAA,EAAAA,IAAuBjM,EAAQgE,EAASpC,GAAIyF,EAAW9G,GAHrDP,CAG2D,KAGtEe,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,UACJoG,EAAS,UACT4C,EAAS,gBACTiC,EAAe,UACfC,EAAS,MACT5L,GAAQC,EAAAA,EAAAA,OACNS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMsD,GAAoBlD,EAEpDlC,GAASoM,EAAAA,EAAAA,IACPpM,EAAQS,EAAQC,EAAU0E,EAAiBiC,EAAW4C,EAAWiC,EAAiBC,EAAW5L,IAG/FwD,EAAAA,EAAAA,IAAU/D,GAENA,EAAOqM,4BACTrL,EAAQsL,yBACRtL,EAAQuL,iBAAiB,CAEvB3G,QAAU,mDAAkD4G,EAAAA,GAAe,WAAa,8BACxFjM,UAEJ,KAGFQ,EAAAA,EAAAA,IAAiB,0BAA2Bf,IAC1C,GAAKA,EAAOqM,0BAIZ,MAAO,IACFrM,EACHqM,2BAA2B,EAC5B,KAGHtL,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOyB,EAAAA,EAAAA,IAAsB1C,EAAQO,EAAM,KAG7CQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,OAAEwL,EAAM,MAAElM,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE1D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B0M,UAAW,CACTpK,QAAQ,EACRmK,WAEDlM,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B0M,UAAW,CACTpK,QAAQ,IAET/B,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,KACpD,GAAI2L,EAAAA,KAAoBC,KAAKC,MAAQxE,OAAOsE,EAAAA,KApmBR,OAqmBlC,OAGF,MAAMG,EAAiBC,UAAYC,MAAM,KAAKC,MAAM,EAAG,GAAGpG,KAAK,MACzD,qBAAEqG,GAAyBlN,EAEjC,GAAIkN,EAAqBC,MAAK/M,IAAA,IAAC,QAAEgN,GAAShN,EAAA,OAAKgN,IAAYN,CAAc,IACvE,OAGF,MAAMlH,EAAkC,CACtCnF,OAAQ4M,EAAAA,IACRC,MAAMC,EAAAA,EAAAA,MACNC,QAAS,CACPvJ,MAAMwJ,EAAAA,EAAAA,I,stEAAuC,IAE/CC,YAAY,GAGd1M,EAAQ2M,0BAA0B,CAChC/H,QAASA,EACTwH,QAASN,GACT,KAGJ/L,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,QAAE2E,EAAO,QAAEwH,GAAYnM,GACvB,qBAAEiM,GAAyBlN,EAC3B4N,GAAc7K,EAAAA,EAAAA,IAAW/C,EAAQqN,EAAAA,KAEjCQ,EAAQC,KAAKC,IACjBH,EAAYtF,aAAa1G,IAAM,KAC5BsL,EAAqBvH,KAAIqI,IAAA,IAAC,GAAEpM,GAAIoM,EAAA,OAAKpM,CAAE,KAEtCqM,GAAkBf,EAAqB/M,OAAS,GAtoBf,IAwoBjCyB,EAAKkM,KAAKI,MAAML,GAASI,EAE/BrI,EAAQuI,gBAAkBvI,EAAQhE,GAClCgE,EAAQhE,GAAKA,EAEb,MAAMwM,EAAsB,CAC1BxM,KACAgE,UACAwH,UACAiB,UAAU,GAGZrO,EAAS,IACJA,EACHkN,qBAAsB,IACjBA,EAAqBD,OAvpBW,KAwpBnCmB,KAGJrK,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQsN,UAAU,CAChB,QAAS,aACT1M,GAAIgE,EAAQhE,GACZnB,OAAQmF,EAAQnF,OAChBmF,WACA,KAGJ7E,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,UAAE4G,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuO,aAAc,CAAE9N,SAAQ4G,cACvB9G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BuO,kBAAc1N,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OAAER,EAAM,UAAE4G,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwO,YAAa,CAAE/N,SAAQ4G,cACtB9G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwO,iBAAa3N,GACZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CwN,GAAiBC,EAAAA,EAAAA,IAAmC1O,EAAQS,EAAQmB,EAAIrB,GAE9E,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2O,qBAAsB,CAAElO,SAAQ4G,UAAWzF,EAAI6M,mBAC9ClO,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2O,0BAAsB9N,GACrBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASsJ,iBACZ,OAGF,MAAM,OAAEhL,EAAM,WAAE0E,GAAehD,EAASsJ,iBACxCvG,EAAoBlF,EAAQS,EAAQ0E,EAAW,KAGjDpE,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,WAAEkE,EAAU,MAAE5E,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GAClC4E,GAAoC,IAAtBA,EAAWhF,QAAiByO,GAI/C1J,EAAoBlF,EAAQ4O,EAAKhN,GAAIuD,EAAW,KEhyBlDpE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsO,aAEjD,OAAOC,EAAAA,EAAAA,IAAmB9O,EAAQ,CAChC+O,cAAe,CAAC,EAChBC,aAAc,CAAC,EACfC,mBAAepO,KACXK,EAAQ,CAAEgO,eAAgB,CAAEC,OAAQ1O,EAAQiF,UAAU,IAAW,CAAEwJ,oBAAgBrO,GACvFK,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAE4O,GAAcnO,GAAW,CAAC,EAC7D,OAAO6N,EAAAA,EAAAA,IAAmB9O,EAAQ,CAChCoP,aACC7O,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,GAAEW,GAAOX,GACT,qBAAEoO,GAAyBrP,EAEjC,IAAKqP,EACH,MAAO,IACFrP,EACHqP,qBAAsB,CAACzN,IAI3B,MAAM0N,EAAeD,EAAqBlL,QAAQ1D,GAAWA,IAAWmB,IAMxE,OALA0N,EAAaC,QAAQ3N,GACjB0N,EAAanP,OAnCY,IAoC3BmP,EAAavF,MAGR,IACF/J,EACHqP,qBAAsBC,EACvB,KAGHvO,EAAAA,EAAAA,IAAiB,2BAA4Bf,IACpC,IACFA,EACHqP,0BAAsBxO,OAI1BE,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,QAAEuM,EAAO,MAAEjN,GAAQC,EAAAA,EAAAA,OAAsBS,EAE/C,OAAOuO,EAAAA,EAAAA,IAA0BxP,EAAQwN,EAASjN,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAO6N,EAAAA,EAAAA,IAAmB9O,EAAQ,CAAES,OAAQmB,EAAIV,WAAOL,EAAWoO,mBAAepO,GAAaN,EAAM,KC/DtGQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByP,cAAe,CACbvO,QACAwO,eAAW7O,IAEZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2P,UAAW,CACTzO,QACA0O,YAAQ/O,EAERgP,aAAShP,IAEVN,EAAM,KCnBXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MACJC,EAAK,MACLX,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAO6O,EAAAA,EAAAA,IAAiB9P,EAAQ,CAC9B+P,mBAAelP,EACfmP,kBAAcnP,EACdqO,eAAgBvH,QAAQzG,GACxBA,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAEgP,EAAM,MAAE1P,GAAQC,EAAAA,EAAAA,OAAsBS,EAE9C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkQ,WAAY,CAAED,WACb1P,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkQ,WAAY,CACVC,iBAAiB,IAElB5P,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOmP,EAAAA,EAAAA,IAAsBpQ,EAAQO,EAAM,I,mCC1C9B,SAAS8P,EAAWC,GACjCC,SAASC,iBAAkC,gDACxC1E,SAAS2E,IACJH,EACGG,EAAKC,KAAK7F,SAAS,oBACtB4F,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,UAAW,mBAG3CF,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,iBAAkB,UAClD,GAEN,C,eCLO,SAASC,EAAoBC,GAC9BN,SAASO,QAAUD,IACrBN,SAASO,MAAQD,EAErB,CAGO,MAAME,GAAeC,EAAAA,EAAAA,IAASJ,EAXV,KAWmD,G,0BCsmB9E,IAAIK,EA2EAC,GAzpBJnQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEkQ,EAAK,MAAE5Q,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACnD4C,OAA4BhD,IAAVsQ,EAAsBA,IAAS7P,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsD,gBAKrF,OAHA7D,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAAE6D,mBAAmBtD,GAC5C,IAAKP,EAAQ8D,oBAAqBD,EAE9B,KAGf9C,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,gBAAEmQ,GAAoBnQ,EAE5B,MAAO,IACFjB,EACHoR,kBACD,KAGHrQ,EAAAA,EAAAA,IAAiB,wBAAyBf,IACjC,IACFA,EACHoR,qBAAiBvQ,OAIrBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqR,WAAY,CACVC,SAAU,IACLnP,EAASkP,WAAWC,SACvB,CAAC7Q,GAAS,IACL0B,EAASkP,WAAWC,SAAS7Q,GAChC8Q,WAAYpP,EAASkP,WAAWC,SAAS7Q,IAAW,CAAC,GAAG8Q,aAI7DhR,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACf,EAAQgB,EAASC,KAChE,MAAM,OAAEuQ,EAAM,MAAEjR,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GACpD,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqR,WAAY,CACVC,SAAU,IACLnP,EAASkP,WAAWC,SACvB,CAAC7Q,GAAS,IACL0B,EAASkP,WAAWC,SAAS7Q,GAChC8Q,UAAU,EACVE,WAAYD,MAIjBjR,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAM0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqR,WAAY,CACVC,SAAU,IACLnP,EAASkP,WAAWC,SACvB,CAAC7Q,GAAS,IACL0B,EAASkP,WAAWC,SAAS7Q,GAChC8Q,UAAU,MAIfhR,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAKoI,EAAAA,EAAAA,QAAkBqI,EAAAA,EAAAA,MAIvB,OAAOnP,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2R,kBAAyE,KAAtDrQ,EAAAA,EAAAA,IAAetB,EAAQO,GAAOqR,aAAazR,QAC7DI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2C,mBAAoBR,EAASQ,kBAC7BkP,WAAY,IACP1P,EAAS0P,WACZC,sBAAkBjR,IAEnBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAE6G,GAAcpG,GAAW,CAAC,EAC7D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6R,WAAY,KACPvQ,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsR,WACjCC,iBAAkBzK,IAEnB9G,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2R,oBAAoBrQ,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoR,mBACjDpR,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEwF,GAAUxF,GACZ,aAAE8Q,GAAiB/R,EACzB,IAAK+R,EACH,MAAO,IACF/R,EACH+R,aAAc,CAACtL,IAInB,MAAMuL,EAAYD,EAAa5N,QAAQ8N,GAAMA,IAAMxL,IAMnD,OALAuL,EAAUzC,QAAQ9I,GACduL,EAAU7R,OAtJU,IAuJtB6R,EAAUjI,MAGL,IACF/J,EACH+R,aAAcC,EACf,KAGHjR,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,QAAEiR,GAAYjR,GACd,OAAEkR,GAAWnS,EAAOoS,SAC1B,IAAKD,EACH,MAAO,IACFnS,EACHoS,SAAU,IACLpS,EAAOoS,SACVD,OAAQ,CACNE,KAAM,IACND,SAAU,CAACF,MAMnB,MAAMI,EAAcH,EAAOC,SAASjO,QAAQoO,GAAMA,EAAE3Q,KAAOsQ,EAAQtQ,KAGnE,OAFA0Q,EAAY/C,QAAQ2C,GAEb,IACFlS,EACHoS,SAAU,IACLpS,EAAOoS,SACVD,OAAQ,IACHA,EACHC,SAAUE,IAGf,KAGHvR,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,WAAEuR,GAAevR,GACjB,mBAAEwR,GAAuBzS,EAC/B,IAAKyS,EACH,MAAO,IACFzS,EACHyS,mBAAoB,CAACD,IAIzB,MAAMR,EAAYS,EAAmBtO,QAAQvC,GAAOA,IAAO4Q,IAM3D,OALAR,EAAUzC,QAAQiD,GACdR,EAAU7R,OA3MU,IA4MtB6R,EAAUjI,MAGL,IACF/J,EACHyS,mBAAoBT,EACrB,KAGHjR,EAAAA,EAAAA,IAAiB,0BAA2Bf,IACnC,IACFA,EACHyS,mBAAoB,QAIxB1R,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEyR,EAAK,cAAEC,GAAkB1R,EACjC,MAAO,IACFjB,EACHoS,SAAU,IACLpS,EAAOoS,SACVQ,MAAO,CACLC,OAAUF,EAAwB3S,EAAOoS,SAASQ,MAAMC,OAA9BH,IAG9BI,aAAc,IACT9S,EAAO8S,aACVF,MAAO,CACLC,OAASF,EAAgBD,EAAQ1S,EAAO8S,aAAaF,MAAMC,SAGhE,KAGH9R,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,SAAW8R,GAAiB9R,GAC5B+R,EAAAA,EAAAA,IAAqBD,EAAanN,QAAQ,KAiB5C7E,EAAAA,EAAAA,IAAiB,uCAAuC,CAACf,EAAQgB,EAASC,KACxE,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAExC2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EAAM,OAEX,MAAM,iBACJqE,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,IAA4B7E,GAC1B8E,GAAiBnJ,EAAAA,EAAAA,IAAQ,CAC7B0I,EAAmB,uCAAoCpS,EACvDqS,EAAgB,wCAAqCrS,EACrDsS,EAAgB,wCAAqCtS,EACrD2S,EAAgB,+CAA4C3S,EAC5D0S,EAAqB,+CAA4C1S,EACjEuS,EAAmB,uCAAoCvS,EACvDwS,EAAgB,wCAAqCxS,EACrDyS,EAAkB,0CAAuCzS,IACxD8E,KAAKgO,GAAMrO,EAAAA,GAAuBqO,KAErC,IAAKD,EAAevT,OAKlB,YAJAa,EAAQuL,iBAAiB,CACvB3G,QAASN,EAAAA,GAAuB,2BAChC/E,UAKJ,MAAMqT,EAAgBtO,EAAAA,GAAuB,sCACvCuO,EAAuBH,EAAe7M,KAAK,MAAM8J,QAAQ,YAAc,GAAEiD,OAE/E5S,EAAQuL,iBAAiB,CACvB3G,QAASN,EAAAA,GAAuB,8BAA+BuO,GAC/DtT,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChC6S,GAAmBxS,EAAAA,EAAAA,IAAetB,EAAQO,GAC7CwT,cAAc5P,QAAO/D,IAAA,IAAC,QAAE4T,GAAS5T,EAAA,OAAK4T,IAAY/S,EAAQ+S,OAAO,IAEpE,OAAOzR,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B+T,cAAeD,GACdvT,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,KAAEgT,EAAI,MAAE1T,GAAQC,EAAAA,EAAAA,OAAsBS,EAG5C,GAAI,YAAagT,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAOjU,EAGT,MAAMoU,EAAa,KAAI9S,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8T,SACrD,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWG,WAAWC,GAASA,EAAiB5O,UAAYqO,EAAKrO,WAChE,IAAxB0O,GACFF,EAAWK,OAAOH,EAAoB,EAE1C,CAIA,OAFAF,EAAW7N,KAAK0N,IAET1R,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqU,QAASD,GACR7T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CmT,EAAa,KAAI9S,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8T,SAIrD,OAFAD,EAAWrK,OAEJxH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqU,QAASD,GACR7T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAQyT,IAAKC,EAAgB,MAAEpU,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7D,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2U,oBACCpU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,WAAE2T,EAAU,MAAErU,GAAQC,EAAAA,EAAAA,OAAsBS,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6U,0BAA2BD,GAC1BrU,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B6U,+BAA2BhU,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,IACJyT,EAAG,OAAEjU,EAAM,UAAE4G,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAC9BS,EAEE2E,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,GAClD,IAAKzB,EAAS,OAEd,MAAMmP,EAAQnP,EAAQoP,UAAYpP,EAAQqP,SAC1C,GAAKF,EAAL,CAEA,KAAKG,EAAAA,EAAAA,IAAmBlV,EAAQ+U,GAY9B,OAXA/U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmV,gBAAiB,CACfJ,QACAjT,KAAM,OACNsT,UAAW,CACTC,OAAQ,WACRpU,aAGHV,QACHwD,EAAAA,EAAAA,IAAU/D,GAIZA,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BsV,WAAY,CACVZ,MACAjU,SACA4G,cAED9G,IACHwD,EAAAA,EAAAA,IAAU/D,EAxBQ,CAwBD,KAGnBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASC,KAC9C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BsV,gBAAYzU,GACXN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,IACJsU,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,MAAEnV,GAAQC,EAAAA,EAAAA,OAChCS,GAAW,CAAC,EAChB,IAAK0U,EAAAA,EAAAA,IAA0B3V,GAE/B,OAAOuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B4V,SAAU,CACRC,iBAAkBjJ,KAAKC,MACvB0I,MACAC,OACAC,QACAC,WAEDnV,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,eACJ6U,EAAc,kBAAEC,GACd9U,EAEJ,MAAO,IACFjB,EACHgW,mBAAoB,CAClBF,eAAgBA,QAAAA,EAAkB9V,EAAOgW,mBAAmBF,eAC5DC,kBAAmBA,QAAAA,EAAqB/V,EAAOgW,mBAAmBD,mBAErE,KAGHhV,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEgV,EAAK,MAAE1V,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkW,kBAAmB,CACjBD,UAED1V,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BkW,uBAAmBrV,GAClBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmW,+BAA2BtV,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OAAE4R,EAAM,MAAEtS,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoW,wBAAyBvD,GACxBtS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoW,6BAAyBvV,GACxBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kCAAkC,CAACf,EAAQgB,EAASC,KACnE,MAAM,IAAEoJ,GAAQpJ,GACV,aAAEoV,GAAiBrW,EAAO8S,aAEhC,MAAO,IACF9S,EACH8S,aAAc,IACT9S,EAAO8S,aACVuD,cAAcC,EAAAA,EAAAA,IAAO,IAAID,KAAiBhM,IAAM4C,MAAM,EAAGsJ,EAAAA,MAE5D,KAGHxV,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAM9C,OAHoB+K,EAAAA,EAAAA,IAAkBhM,EAAQO,IAC5BS,EAAQgD,SAAS,CAAEpC,GAAInB,EAAQC,SAAUmB,EAAAA,GAAgBtB,WAEpEgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwW,iBAAkB,CAChB/V,WAEDF,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BwW,sBAAkB3V,GACjBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,OAAER,EAAM,QAAEgW,EAAO,MAAElW,GAAQC,EAAAA,EAAAA,OAAsBS,EAMvD,OAHoB+K,EAAAA,EAAAA,IAAkBhM,EAAQO,IAC5BS,EAAQgD,SAAS,CAAEpC,GAAInB,EAAQF,WAE1CgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B0W,eAAgB,CACdjW,SACAgW,YAEDlW,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B0W,oBAAgB7V,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,gBAAE0V,GAAoB3W,GACtB,SAAE4W,EAAWD,EAAgBC,SAAQ,YAAEC,EAAcF,EAAgBE,aAAgB5V,EAE3F,MAAO,IACFjB,EACH2W,gBAAiB,CACfC,WACAC,eAEH,KAGH9V,EAAAA,EAAAA,IAAiB,mBAAoBf,IACnC,GAAIwD,EAAAA,IACF,OAGF,MAAMsT,EAAoB,qBAE1BC,MAAO,eAAqBnK,KAAKC,SAC9BmK,MAAMC,GAAaA,EAAShT,SAC5B+S,MAAM5J,IACLA,EAAUA,EAAQ8J,OAEdJ,EAAkBK,KAAK/J,IAAwBL,YAAZK,IACrCpN,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHoX,mBAAmB,IAErBrT,EAAAA,EAAAA,IAAU/D,GACZ,IAEDqX,OAAO7C,IACF8C,EAAAA,KAEFC,QAAQC,MAAM,4BAA6BhD,EAC7C,GACA,KAGNzT,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQqV,EAAQpU,KAC3DjB,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHoX,kBAAmBzP,QAAQ1G,KAE7B8C,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,eAAgBf,KAC1BsB,EAAAA,EAAAA,IAAetB,GAAQQ,EAAAA,EAAAA,OAAmBiX,qBAC/CC,EAAAA,EAAAA,IAAyB,KAO3B3W,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,UAAE0W,EAAS,MAAEpX,GAAQC,EAAAA,EAAAA,OAAsBS,EAmBjD,OAjBI0W,GACE1G,GAAsB2G,cAAc3G,GAExCA,EAAuBxN,OAAOoU,aAAY,KACxC7W,EAAQoC,gBAAgB,CACtB7C,SACA,GAXsB,OAc1BqX,cAAc3G,GACdA,OAAuBpQ,GAGzBb,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2X,aACCpX,GAEI,IACFP,EACH8X,2BAA4BH,GAAYI,EAAAA,EAAAA,WAA6BlX,EACtE,KAGHE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,sBAAE+W,GAA0BhY,EAAOiY,SAASC,MAC5CC,EAAgBnY,EAAOmY,cAE7B,GAAI5H,SAASO,MAAMjG,SAASuN,EAAAA,KAG1B,OAFA/H,GAAW,QACXO,EAAqB,GAAEyH,EAAAA,OAAcD,EAAAA,OAIvC,GAAIpY,EAAO8X,4BAA8BhK,KAAKwK,MAAM1L,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEM0L,GAFoBR,EAAAA,EAAAA,MAEY/X,EAAO8X,2BAE7C,GAAIS,EAAY,EAGd,OAFA3H,EAAqB,GAAE2H,iBAAyBA,EAAY,EAAI,IAAM,WACtElI,GAAW,EAGf,CAEAA,GAAW,GAEX,MAAMmI,GAAc7X,EAAAA,EAAAA,IAAyBX,EAAQO,GAErD,GAAIiY,GAAeR,IAA0BhY,EAAOyY,SAASC,eAAgB,CAC3E,MAAM,OAAEjY,EAAM,SAAEC,GAAa8X,EACvBG,GAAc5V,EAAAA,EAAAA,IAAW/C,EAAQS,GACvC,GAAIkY,EAAa,CACf,MAAM7H,GAAQ8H,EAAAA,EAAAA,GAAatT,EAAAA,GAAwBqT,EAAalY,IAAW0X,GAC3E,OAAIQ,EAAY3V,SAAW2V,EAAYE,SAASnY,QAC9CqQ,EAAc,GAAED,OAAW6H,EAAYE,OAAOnY,GAAUoQ,cAI1DC,EAAaD,EAEf,CACF,CAEAF,EAAoByH,EAAAA,IAAW,IAIjC,IACIS,EADAC,EAA+B,GAGnCC,EAAAA,EAAAA,KAAahZ,IAEX,MAAM,gBAAEoD,EAAe,eAAE6V,IAAmBC,EAAAA,EAAAA,MAEtCC,EAAkBnZ,EAAOyY,SAASC,iBAAmBxH,EACrDkI,EAAmBnR,OAAOoR,OAAOrZ,EAAOsZ,SAASnV,QAAQwP,GAAMA,EAAEgE,YAAWxX,OAC5EoZ,GAAcjY,EAAAA,EAAAA,IAAetB,GAAQQ,EAAAA,EAAAA,OAAmB+Y,YAE1DJ,GACF/V,IAGEgW,IAAqBL,GAAwBQ,IAC3CT,GAAerO,aAAaqO,GAEhCA,EAAgBrV,OAAO+F,YAAW,KAChCxJ,GAASyJ,EAAAA,EAAAA,MACT,MAAM+P,EAAsBvR,OAAOoR,OAAOrZ,EAAOsZ,SAASnV,QAAQwP,GAAMA,EAAEgE,YAAWxX,OACrF8Y,EAAeO,KAAwBC,EAAAA,EAAAA,MAAuBtZ,OAAO,GAnBpD,MAuBrB+Q,EAAqBlR,EAAOyY,SAASC,eACrCK,EAAuBK,CAAgB,KCjtBzCrY,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CyY,GAASpY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QAAQD,OASrD,OARA1Z,GAAS4Z,EAAAA,EAAAA,IAAa5Z,EAAQO,GAC9BP,GAAS6Z,EAAAA,EAAAA,IAAa7Z,EAAQO,IACrBgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjCD,WAEDnZ,EACU,KAGfQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEuW,EAAK,MAAEjX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjCD,OAAQ,SACRlC,UAEDjX,EAAM,I,gBCzBXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,QAAEoZ,EAAO,cAAEC,EAAa,kBAAEC,EAAiB,OAAErR,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClGvI,GAAQC,EAAAA,EAAAA,OACNS,EAEEkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bia,YAAa,IACR9X,EAAS8X,YACZxZ,SACAC,WACAoZ,UACAC,gBACAC,oBACArR,SACAiO,UAAU,EACVhO,OAAQA,QAAAA,EAAUzG,EAAS8X,YAAYrR,OACvCC,aAAcA,GAAgB1G,EAAS8X,YAAYpR,cAAgB7I,EAAOia,YAAYjR,iBACtFF,QAASA,GAAW3G,EAAS8X,YAAYnR,SAE3CjG,gBAAiB,CAAC,GACjBtC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OACJ2H,EAAM,QAAEE,EAAO,aAAED,EAAY,SAAE+N,IAC7BtV,EAAAA,EAAAA,IAAetB,EAAQO,GAAO0Z,YAElC,OAAO1X,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bia,YAAa,CACXrR,SACAE,UACA8N,WACA/N,iBAEDtI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OACJ2H,EAAM,MACNrI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bia,YAAa,KACR3Y,EAAAA,EAAAA,IAAetB,EAAQO,GAAO0Z,YACjCrR,SACAE,SAAS,IAEVvI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,aACJ4H,EAAY,MACZtI,GAAQC,EAAAA,EAAAA,OACNS,EAUJ,OARAjB,EAAS,IACJA,EACHia,YAAa,IACRja,EAAOia,YACVjR,iBAAkBH,KAIftG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bia,YAAa,KACR3Y,EAAAA,EAAAA,IAAetB,EAAQO,GAAO0Z,YACjCpR,iBAEDtI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,QACJ6H,EAAO,MACPvI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bia,YAAa,KACR3Y,EAAAA,EAAAA,IAAetB,EAAQO,GAAO0Z,YACjCnR,YAEDvI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,SAAE2V,EAAQ,MAAErW,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bia,YAAa,KACR3Y,EAAAA,EAAAA,IAAetB,EAAQO,GAAO0Z,YACjCrD,aAEDrW,EAAM,I,+CC3FX,IAAI2Z,GAAiB,GACrBC,EAAAA,EAAAA,KAAe,MAET1Q,EAAAA,EAAAA,MAAYgP,SAAS2B,cAAgBF,GAA8D,IAA5CjS,OAAOC,MAAKuB,EAAAA,EAAAA,MAAY6P,SAASnZ,SAC1Fka,EAAAA,EAAAA,KACF,KAGFtZ,EAAAA,EAAAA,IAAiB,eAAeuZ,MAAOta,EAAQgB,EAASC,KACtD,MAAM,SAAEwX,EAAQ,MAAElY,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDjB,GAASua,EAAAA,EAAAA,IAAuBva,EAAQ,CACtCwa,WAAW,KAEbzW,EAAAA,EAAAA,IAAU/D,SACJya,EAAAA,EAAAA,IAAchC,GAEpB,MAAMiC,EAAcC,KAAKC,UAAU,KAAKC,EAAAA,EAAAA,MAAqB5K,OAAQjQ,EAAOmY,gBAC5EnY,GAASyJ,EAAAA,EAAAA,MACT,MAAMqR,GAAaC,EAAAA,EAAAA,KAAgBR,EAAAA,EAAAA,IAAuBva,EAAQ,CAChEoa,aAAa,EACb5C,WAAO3W,EACP2Z,WAAW,KAGb,UACQQ,EAAAA,EAAAA,IAAeN,EAAaI,IAElCG,EAAAA,EAAAA,MACAjb,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASua,EAAAA,EAAAA,IAAuBva,EAAQ,CACtCoa,aAAa,EACb5C,WAAO3W,EACP2Z,WAAW,KAEbzW,EAAAA,EAAAA,IAAU/D,IAEVkb,EAAAA,EAAAA,KAAiB,EAenB,CAdE,MAAO1G,IACP2G,EAAAA,EAAAA,MAEAnb,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASua,EAAAA,EAAAA,IAAuBva,EAAQ,CACtCwa,WAAW,KAEbzW,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQuL,iBAAiB,CACvB3G,QAAS,yBACTrF,UAEFS,EAAQoa,0BAA0B,CAAE5J,OAAQ6J,EAAAA,GAAAA,iBAAkC9a,SAChF,MAGFQ,EAAAA,EAAAA,IAAiB,iBAAkBf,KAC5Bsb,EAAAA,EAAAA,OAEEC,EAAAA,EAAAA,IAAsBvb,OAG/Be,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAMua,EAAkBvT,OAAOoR,OAAOrZ,EAAOsZ,UACvC,YAAEoB,EAAW,WAAEI,GAAe7Z,EAC9Bwa,EAAUd,KAAKe,MAAMhB,IAC3BiB,EAAAA,EAAAA,IAAaF,EAASA,EAAQxL,QAE9B,MAAM2L,EAAiB5b,GACvBA,EAAS2a,KAAKe,MAAMZ,IACbxB,QAAUsC,EAAetC,SAChCuC,EAAAA,EAAAA,IAAa7b,GAAQ8b,EAAAA,EAAAA,IAAUC,EAAAA,KAE/B/b,GAASua,EAAAA,EAAAA,IACPva,EACA,CACE0Y,gBAAgB,EAChBlB,WAAO3W,EACPmb,qBAAsB,KAG1BjY,EAAAA,EAAAA,IAAU/D,IAEVib,EAAAA,EAAAA,MAEAO,EAAgB1P,SAAQ1L,IAAA,IAAGwB,GAAIrB,EAAK,YAAEgZ,GAAanZ,EAAA,OAAKY,EAAQib,KAAK,CAAE1b,QAAOgZ,eAAc,IAC5FvY,EAAQkb,SAAS,KAGnBnb,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,SAAEwX,GAAaxX,GACrBkb,EAAAA,EAAAA,IAAe1D,GAAUzB,KAAKhW,EAAQob,cAAc,KAClDpb,EAAQqb,yBAAyB,GACjC,KAMJtb,EAAAA,EAAAA,IAAiB,2BAA4Bf,IAA6B,IAAAsc,EACxE,MAAMN,GAA6D,QAAtCM,EAACtc,EAAOyY,UAAUuD,4BAAoB,IAAAM,EAAAA,EAAI,GAAK,EAE5E,OAAO/B,EAAAA,EAAAA,IAAuBva,EAAQ,CACpCgc,uBACAO,aAAeP,GARU,EASrBpP,KAAKC,MAR6B,UAQehM,GACrD,KAGJE,EAAAA,EAAAA,IAAiB,8BAA+Bf,IACvCua,EAAAA,EAAAA,IAAuBva,EAAQ,CACpCgc,qBAAsB,EACtBO,kBAAc1b,OAIlBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEuW,GAAUvW,EAElB,OAAOsZ,EAAAA,EAAAA,IAAuBva,EAAQ,CAAEwX,SAAQ,KAGlDzW,EAAAA,EAAAA,IAAiB,sBAAuBf,IAC/Bua,EAAAA,EAAAA,IAAuBva,EAAQ,CAAEwX,WAAO3W,OAGjDE,EAAAA,EAAAA,IAAiB,oBAAoB,KACnCmZ,GAAiB,CAAI,KCpIvBnZ,EAAAA,EAAAA,IAAiB,YAAY,CAACf,EAAQgB,EAASC,KAC7C,MAAM,GACJW,EAAE,MACFrB,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAIW,GACKW,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bwc,eAAgB,CACd/b,OAAQmB,EACRyF,eAAWxG,EACX4D,cAAU5D,IAEXN,IAGEgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bwc,oBAAgB3b,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,OACJR,EAAM,UACN4G,EAAS,SACT5C,EAAQ,MACRlE,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bwc,eAAgB,CACd/b,SACA4G,YACA5C,aAEDlE,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bwc,eAAgB,IACXra,EAASqa,eACZnV,eAAWxG,EACX4D,cAAU5D,IAEXN,EAAM,I,8CCoDX,MAEMkc,EAA0B,IAAIC,IAE9BC,GAA0B3L,EAAAA,EAAAA,KAAU4L,GAAOA,KAAM,KAAK,GAo1B5DtC,eAAetP,GACbhL,EACA4O,EACAlO,EACAmc,EACA9R,GAIA,IAHA+R,EAAU5c,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACV6c,EAAe7c,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAA8c,EAAA9c,UAAAC,OAAA8c,EAAA,IAAA5c,MAAA2c,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAD,EAAAC,EAAA,GAAAhd,UAAAgd,GAAA,IACnB3c,GAAQC,EAAAA,EAAAA,OAAkByc,EAE9B,MAAMxc,EAASmO,EAAKhN,GAEpB,IAAIub,EACAC,EAAYC,EAAAA,IAChB,OAAQtS,GACN,KAAKuS,EAAAA,GAAAA,UACCT,GACFM,GAAa,EACbC,GAAa,GAEbD,OAAYtc,EAEd,MACF,KAAKyc,EAAAA,GAAAA,OACHH,IAAcrP,KAAKwK,MAAM+E,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKC,EAAAA,GAAAA,SACHH,IAAcE,EAAAA,IAAqB,GAC/BR,IACFO,GAAa,GAKnBpd,GAASyJ,EAAAA,EAAAA,MACT,MAAMvD,QAAeqX,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C3O,MAAM7L,EAAAA,EAAAA,IAAW/C,EAAQS,GACzBoc,WACAM,YACAlH,MAAOmH,EACP1c,aAGF,IAAKwF,EACH,OAGF,MAAM,SACJR,EAAQ,MAAE8X,EAAK,MAAErO,EAAK,mBAAEsO,GACtBvX,EAEJlG,GAASyJ,EAAAA,EAAAA,MAET,MAAMiU,EAAgBjd,IAAW4M,EAAAA,IAC7BrN,EAAOkN,qBAAqB/I,QAAOwZ,IAAA,IAAC,UAAEC,GAAWD,EAAA,OAAMC,CAAS,IAAEjY,KAAIkY,IAAA,IAAC,QAAEjY,GAASiY,EAAA,OAAKjY,CAAO,IAC9F,GACEkY,EAAe,GAAoBC,OAAOrY,EAAUgY,GACpDM,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCzT,EAAMpC,OAAOC,KAAK8V,GAAMrY,IAAI0C,QAElC,GAAI3H,IAAamB,EAAAA,GAAgB,CAC/B,MAAMqc,GAAuBC,EAAAA,EAAAA,IAAqBne,EAAQS,EAAQC,IAAa,CAAC,EAC1E2J,EAAI,IAAM6T,IAAyB7T,EAAI,IAAO6T,IAAyBxd,GAC3E2J,EAAIkF,QAAQ7O,EAEhB,CAEAV,GAASoe,EAAAA,EAAAA,IAAoBpe,EAAQS,EAAQud,GAC7Che,EAAS8c,GACLuB,EAAAA,EAAAA,IAAoBre,EAAQS,EAAQC,EAAU2J,IAC9CiU,EAAAA,EAAAA,IAAgBte,EAAQS,EAAQC,EAAU2J,GAE9CrK,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACtDxd,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,OACtDnP,GAASye,EAAAA,EAAAA,IAAkBze,EAAQS,EAAQgd,GAE3C,IAAIiB,GAAYC,EAAAA,EAAAA,IAAgB3e,EAAQS,EAAQC,GAChD,MAAMke,EAAe/B,GAAWgC,EAAAA,EAAAA,IAA8B7e,EAAQS,EAAQC,EAAUmc,QAAYhc,EAWpG,GATIic,GAAc4B,GAAaE,IACxBA,EAAaze,UAAU2e,EAAAA,EAAAA,IAA4BJ,EAAWE,KACjE5e,GAASse,EAAAA,EAAAA,IAAgBte,EAAQS,EAAQC,EAAUke,GACnDF,GAAYC,EAAAA,EAAAA,IAAgB3e,EAAQS,EAAQC,GAC5CV,GAAS+e,EAAAA,EAAAA,IAAmB/e,EAAQS,EAAQC,EAAUke,GACtD9B,GAAa,KAIZC,EAAiB,CACpB,MAAMiC,EAAalC,EAAa8B,EAAgBF,GAC1C,eAAEO,GAAmBC,GAAiBF,EAAYnC,EAAU9R,GAClE/K,GAASmf,EAAAA,EAAAA,IAAuBnf,EAAQS,EAAQC,EAAUue,EAAiB1e,EAC7E,EAEAwD,EAAAA,EAAAA,IAAU/D,EACZ,CA+CA,SAASkf,GACPE,EACAvC,EACA9R,GAEA,MAAM,OAAE5K,GAAWif,EACbC,EAAQxC,EArBhB,SAA0BuC,EAAqBvC,GAC7C,OAAIA,EAAWuC,EAAU,GAChB,EAGLvC,EAAWuC,EAAUA,EAAUjf,OAAS,GACnCif,EAAUjf,OAAS,EAGrBif,EAAU7K,WAAU,CAAC3S,EAAI0d,IAC9B1d,IAAOib,GACHjb,EAAKib,GAAYuC,EAAUE,EAAI,GAAKzC,GAE5C,CAQ2B0C,CAAiBH,EAAWvC,IAAa,EAG5D2C,EAFczU,IAAcuS,EAAAA,GAAAA,UAEM+B,EAASA,EAAQ,GAAMlf,EACzDid,EAFWrS,IAAcuS,EAAAA,GAAAA,OAEFxP,KAAKwK,MAAM+E,EAAAA,IAAqB,GAAKA,EAAAA,IAC5DoC,EAAOD,EAAoBpC,EAC3BsC,EAAKF,EAAoBpC,EAAY,EACrC6B,EAAiBG,EAAUnS,MAAMa,KAAKC,IAAI,EAAG0R,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQ7U,GACN,KAAKuS,EAAAA,GAAAA,UACHqC,EAAeH,GAAqB,EACpCI,EAAcH,GAAQ,EACtB,MACF,KAAKnC,EAAAA,GAAAA,SACHqC,EAAeH,EAAoBrf,EACnCyf,EAAcF,GAAMvf,EAAS,EAC7B,MACF,KAAKmd,EAAAA,GAAAA,OACL,QACEqC,EAAeV,EAAe9e,OAAS,EACvCyf,EAAcX,EAAe9e,SAAWkd,EAAAA,IAI5C,MAAO,CAAE4B,iBAAgBU,eAAcC,cACzC,CAEAtF,eAAeuF,GAAmC7f,EAAW8f,GAgB3D,IAAI9L,EACJ,MAAM+L,EAAmBD,EAAOE,WAAa,CAACC,EAAkBC,KACzDzD,EAAwB0D,IAAID,KAC/BlM,EAAUkM,EACVzD,EAAwB2D,IAAIF,EAAgBH,IAG9C/f,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACHqgB,YAAa,CACXC,iBAAkB,IACbtgB,EAAOqgB,YAAYC,iBACtB,CAACJ,GAAiB,CAAED,gBAI1Blc,EAAAA,EAAAA,IAAU/D,EAAO,OACfa,GAGAif,EAAOS,YAAcC,EAAAA,WACjBC,EAAAA,EAAAA,MAGRzgB,GAASyJ,EAAAA,EAAAA,WACsB5I,IAA3Bif,EAAOY,kBAINZ,EAAOS,YAAcT,EAAOY,kBAAoB7e,EAAAA,KACnDie,EAAOS,YAAaI,EAAAA,EAAAA,IAAyB3gB,EAAQ8f,EAAOlR,KAAKhN,GAAIke,EAAOY,kBAG1EZ,EAAOS,aAAeT,EAAOc,iBAAmBd,EAAOY,kBAAoB7e,EAAAA,KAC7Eie,EAAOc,iBAAkBD,EAAAA,EAAAA,IAAyB3gB,EAAQ8f,EAAOlR,KAAKhN,GAAIke,EAAOY,wBAG7EnD,EAAAA,EAAAA,IAAQ,cAAeuC,EAAQC,GAEjCA,GAAoB/L,GACtByI,EAAwBoE,OAAO7M,GAEnC,EAhkCAjT,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UACJ8J,EAAYuS,EAAAA,GAAAA,OAAwB,gBACpCP,GAAkB,EAAK,kBACvB9R,GAAoB,EAAK,MACzB1K,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhB,IAAI,OAAER,EAAM,SAAEC,GAAaO,GAAW,CAAC,EAEvC,IAAKR,IAAWC,EAAU,CACxB,MAAMwB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGFzB,EAASyB,EAAmBzB,OAC5BC,EAAWwB,EAAmBxB,QAChC,CAEA,MAAMkO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAEhC,IAAKmO,GAAQA,EAAKkS,aAChB,OAGF,MAAMvZ,GAAcC,EAAAA,EAAAA,IAAkBxH,EAAQS,EAAQC,EAAUH,GAC1Dme,GAAYC,EAAAA,EAAAA,IAAgB3e,EAAQS,EAAQC,GAElD,GAAK6G,GAAgBA,EAAYpH,QAAU4K,IAAcuS,EAAAA,GAAAA,OAqBlD,CACL,MAAMT,EAAW9R,IAAcuS,EAAAA,GAAAA,UAA8B/V,EAAY,GAAKA,EAAYA,EAAYpH,OAAS,GACzG2c,EAAanV,QAAQ+W,IAAcA,EAAU7T,SAASgS,IACtDmC,EAAclC,GAChB+B,EAAAA,EAAAA,IAA8B7e,EAAQS,EAAQC,EAAUmc,GAAY6B,GAClE,eACJO,EAAc,aAAEU,EAAY,YAAEC,GAC5BV,GAAiBF,EAAYnC,EAAU9R,GAY3C,GAVI4U,IACF3f,GAASmf,EAAAA,EAAAA,IAAuBnf,EAAQS,EAAQC,EAAUue,EAAgB1e,KAG5EwgB,EAAAA,EAAAA,KAAU,MAcdzG,eACEta,EACAgB,EACA4e,EAAsB9C,EAAqBC,EAC3CnO,EAAelO,EAAkBqK,EAA8B8R,GAE/D,QAAA5c,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAEzBwf,SACG5U,GACJhL,EAAQ4O,EAAMlO,EAAUmc,EAAU9R,EAAW+R,EAAYC,EAAiBxc,GAIzEwc,GACH/b,EAAQgK,qBAAqB,CAC3BvK,OAAQmO,EAAKhN,GAAIlB,WAAUqK,YAAWgS,iBAAiB,EAAMxc,SAGnE,CA/BWygB,CACHhhB,EAAQgB,EAAS4e,EAAa9C,EAAYC,EAAiBnO,EAAMlO,EAAWqK,EAAW8R,EAAUtc,EAClG,IAGCwc,EACF,MAEJ,KA3CmF,CACjF,MAAMF,GAAWoE,EAAAA,EAAAA,IAAuBjhB,EAAQS,EAAQF,KAAU2gB,EAAAA,EAAAA,IAAqBlhB,EAAQS,EAAQC,GACjGoc,EAAanV,QAAQkV,GAAY6B,IAAcA,EAAU7T,SAASgS,IAClEmC,GAAclC,GAChB+B,EAAAA,EAAAA,IAA8B7e,EAAQS,EAAQC,EAAUmc,GACxD6B,IAAc,IACZ,eACJO,EAAc,aAAEU,EAAY,YAAEC,GAC5BV,GAAiBF,EAAYnC,EAAUS,EAAAA,GAAAA,QAEvCqC,IACF3f,GAASmf,EAAAA,EAAAA,IAAuBnf,EAAQS,EAAQC,EAAUue,EAAgB1e,IAGvEqf,IACHmB,EAAAA,EAAAA,KAAU,KACH/V,GACHhL,EAAQ4O,EAAMlO,EAAWmc,EAAUS,EAAAA,GAAAA,OAA0BR,EAAYC,EAAiBxc,EAC3F,GAGP,EAwBAwD,EAAAA,EAAAA,IAAU/D,EAAQ,CAAE8K,sBAAuBG,GAAoB,KAuBjElK,EAAAA,EAAAA,IAAiB,eAAeuZ,MAAOta,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,UAAE4G,EAAS,iBAAE8Z,EAAgB,aAAEC,GACnCngB,EAEE2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAMhJ,QAw0BR0U,eACEta,EAAW4O,EAAevH,EAAmB8Z,GAE7C,MAAMjb,QAAeqX,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3O,OAAMvH,cACrD,GAAKnB,EAAL,CAIA,GAAIA,IAAWmb,EAAAA,GAmBf,OALArhB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQ4O,EAAKhN,GAAIyF,EAAWnB,EAAON,SAC9D5F,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,QAC7DzZ,EAAAA,EAAAA,IAAU/D,GAEHkG,EAAON,QAlBZ,GAAIub,EAAkB,CACpBnhB,GAASyJ,EAAAA,EAAAA,MACT,MAAM8X,GAAezM,EAAAA,EAAAA,IAAkB9U,EAAQ4O,EAAKhN,GAAIuf,GACxDnhB,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQ4O,EAAKhN,GAAIuf,EAAkB,IACzDI,EACHC,sBAAkB3gB,KAEpBkD,EAAAA,EAAAA,IAAU/D,EACZ,CAXF,CAsBF,CAp2BwByhB,CAAYzhB,EAAQ4O,EAAMvH,EAAW8Z,GAC3D,GAAIvb,GAAWwb,EAAc,CAC3B,MAAM,cAAE5Y,EAAa,WAAEkZ,GAAeN,EACtCphB,GAASyJ,EAAAA,EAAAA,MAETzJ,GAAS2hB,EAAAA,EAAAA,IACP3hB,EACA4F,EACAnF,EACA+H,EACAkZ,IAEF3d,EAAAA,EAAAA,IAAU/D,EACZ,MAGFe,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,YAAEuX,EAAW,MAAEjY,GAAQC,EAAAA,EAAAA,OAAsBS,EAEnD,IAAKuX,EACH,OAGF,MAAM,OAAE/X,EAAM,SAAEC,EAAQ,KAAEoB,GAAS0W,EAInC,GAFAvX,GAAU2gB,EAAAA,EAAAA,IAAK3gB,EAAS,CAAC,UAEZ,cAATa,IAAyBb,EAAQ4gB,YACnC,OAAOtf,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B4C,qBAAsB3B,GACrBV,GAGL,MAAMqO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BoH,GAAeC,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GAClDohB,EAAoBja,GAAeiN,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQoH,QAAgBhH,EAErF+f,EAAkBhS,EAAK5L,SACzB2d,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,GACzCohB,GAAmBC,qBAAuBD,GAAmBN,iBAE3D1B,EAAS,IACV7e,EACH2N,OACA8R,gBAAiBlI,EAAY9X,SAC7B6f,WAAY1Y,EACZ+Y,kBACAoB,WAAWC,EAAAA,EAAAA,IAAgBjiB,EAAQS,EAAQC,GAC3CwhB,QAAQC,EAAAA,EAAAA,IAAaniB,EAAQS,IAG/BO,EAAQyH,gBAAgB,CAAEpB,eAAWxG,EAAWN,UAChDS,EAAQohB,oBAAoB,CAAE7hB,UAE9B,MAAM8hB,GAAYphB,EAAQqhB,aAAerhB,EAAQqhB,YAAYniB,QAAU,EACjEoiB,GAAaF,GAAYphB,EAAQuhB,oBAEvC,GAAIH,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAe3C,EACvCD,GAAY7f,EAAQ,IACfyiB,EACHzC,WAAYsC,EAAcA,EAAY,QAAKzhB,GAE/C,MAAO,GAAI0hB,EAAW,CACpB,MAAM,KACJte,EAAI,SAAEye,EAAQ,YAAEJ,KAAgBK,GAC9B7C,EACE8C,EAsyCV,SAAgCN,GAC9B,OAAOA,EAAYnc,QAAO,CAACC,EAAK4Z,EAAYX,EAAOwD,IACnC,IAAVxD,GACFjZ,EAAIG,KAAK,CAACyZ,IACH5Z,IAGI0c,GAAkB9C,KACV8C,GAAkBD,EAAIxD,EAAQ,IAEjDjZ,EAAIA,EAAIjG,OAAS,GAAGoG,KAAKyZ,GAEzB5Z,EAAIG,KAAK,CAACyZ,IAGL5Z,IACN,GACL,CAvzCmB2c,CAAuBT,GAEtCM,EAAO9W,SAAQ,CAACkX,EAAOC,KACrB,MAAMC,GAAqBlW,EAAAA,EAAAA,IAAMgW,EAA0BG,EAAAA,KAC3D,IAAK,IAAI7D,EAAI,EAAGA,EAAI4D,EAAmB/iB,OAAQmf,IAAK,CAClD,MAAO8D,KAAoBC,GAAmBH,EAAmB5D,GAC3DrV,EAAa,GAAE2C,KAAKC,QAAQoW,IAAa3D,IAEzCgE,EAAgB,IAANhE,GAA0B,IAAf2D,EAE3BpD,GAAY7f,EAAQ,IACf2iB,EACH1e,KAAMqf,EAAUrf,OAAOpD,EACvB6hB,SAAUY,EAAUZ,OAAW7hB,EAC/Bmf,WAAYoD,EACZnZ,UAAWoZ,EAAgBljB,OAAS,EAAI8J,OAAYpJ,IAGtDwiB,EAAgBvX,SAASkU,IACvBH,GAAY7f,EAAQ,IACf2iB,EACH3C,aACA/V,aACA,GAEN,IAEJ,KAAO,CACL,MAAM,KACJhG,EAAI,SAAEye,EAAQ,YAAEJ,EAAW,WAAE/B,KAAeoC,GAC1C7C,EAEA7b,GACF4b,GAAY7f,EAAQ,IACf2iB,EACH1e,OACAye,WACAnC,eAIJ+B,GAAaxW,SAASkU,IACpBH,GAAY7f,EAAQ,IACf2iB,EACH3C,cACA,GAEN,CAEgB,KAGlBjf,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,YACJuX,EAAW,KAAEvU,EAAI,SAAEye,EAAQ,MAAEniB,GAAQC,EAAAA,EAAAA,OACnCS,EAEJ,IAAKuX,EACH,OAGF,MAAM,OAAE/X,EAAM,SAAEC,EAAUoB,KAAMsD,GAAoBoT,EAC9C5J,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BmF,GAAU2d,EAAAA,EAAAA,IAAqBvjB,EAAQS,EAAQC,EAAU0E,GAC1DwJ,GAAShJ,KAIT2X,EAAAA,EAAAA,IAAQ,cAAe,CAC1B3O,OAAMhJ,UAAS3B,OAAMye,WAAUV,WAAWC,EAAAA,EAAAA,IAAgBjiB,EAAQS,EAAQC,KAG5EM,EAAQwiB,aAAa,CAAEnc,eAAWxG,EAAWN,UAAQ,KAGvDQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,UAAE4G,GAAcpG,EACxB2E,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,GAC5C0Y,EAAmBna,GAAW6W,EAAwBgH,KAAIC,EAAAA,EAAAA,IAAqB9d,IACjFma,IACF4D,EAAAA,EAAAA,IAAkB5D,GAGpB/e,EAAQsN,UAAU,CAChB,QAAS,iBACTjE,IAAK,CAAChD,GACN5G,UACA,KAGJM,EAAAA,EAAAA,IAAiB,aAAauZ,MAAOta,EAAQgB,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,MAAEkjB,EAAK,YAAEC,GACvB5iB,EACJ,IAAK2iB,EACH,OAGF,MAAM,KAAE3f,EAAI,SAAEye,GAAakB,EACrBhV,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BqjB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQS,GAC5BqjB,IAAQE,EAAAA,EAAAA,IAAcF,KAE1BF,EAAMK,SAAU,EAChBL,EAAMC,YAAcA,EACpB7jB,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,QAASkjB,GAC/D5jB,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAE0jB,UAAWrW,KAAKwK,MAAM1L,KAAKC,MAAQ,QAEzE9I,EAAAA,EAAAA,IAAU/D,SAEWud,EAAAA,EAAAA,IAAQ,YAAa,CACxC3O,OACA3K,OACAye,WACA0B,cAActc,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GACjDA,UAAUigB,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,OAInDkjB,EAAMK,SAAU,GAGlBjkB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,QAASkjB,GAC/D5jB,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAE0jB,UAAWrW,KAAKwK,MAAM1L,KAAKC,MAAQ,QAEzE9I,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,UAAEwiB,EAAS,YAAER,GAC5C5iB,EACJ,KAAKqjB,EAAAA,EAAAA,IAAYtkB,EAAQS,EAAQC,GAC/B,OAGF,MAAMkO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE3B4jB,IACE9G,EAAAA,EAAAA,IAAQ,aAAc3O,GAAM+R,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,IAG5E,MAAM6jB,EAAiCV,EAAc,CAAEA,cAAa5f,KAAM,SAAOpD,EAIjF,OAHAb,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,QAAS6jB,IACtDL,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAE0jB,eAAWtjB,GAEpC,KAGfE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,SAAEC,EAAQ,UAAEshB,GAAc/gB,EAExC,OAAOmG,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,YAAashB,EAAU,KAG7EjhB,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,UACJoG,EAAS,QAAEmd,EAAO,UAAEC,EAAS,SAAEC,EAAQ,MAAEnkB,GAAQC,EAAAA,EAAAA,OAC/CS,EAEE2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GAClCqO,IAIA2O,EAAAA,EAAAA,IAAQ,aAAc,CACzB3O,OAAMvH,YAAWmd,UAASC,YAAWC,YACrC,KAGJ3jB,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM+V,GAAQhE,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,SACjD6c,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3O,OAAMlO,SAAUikB,IAEpD3kB,GAASyJ,EAAAA,EAAAA,OACSE,EAAAA,EAAAA,IAAgB3J,EAAQS,EAAQC,IACvCoL,SAASlK,IAClB5B,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmB,EAAI,CAAEgjB,UAAU,GAAQ,IAErE5kB,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQ4O,EAAKhN,GAAIC,EAAAA,GAAgB,YAAa,KAC1EkC,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,WAAEkE,EAAU,mBAAE0f,EAAkB,MAAEtkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAEF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvB0M,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,IAE3B8c,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE3O,OAAMzJ,aAAY0f,uBAEnD,MAAMC,GAAYC,EAAAA,EAAAA,IAAgB/kB,EAAQS,EAAQC,GAC9CokB,GAAa3f,EAAW0F,SAASia,IACnC9jB,EAAQwiB,aAAa,CAAEnc,eAAWxG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,WAAEkE,EAAU,MAAE5E,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5CiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,GAAWyB,EACb0M,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,IAE3B8c,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE3O,OAAMzJ,eAEhD,MAAM2f,GAAYE,EAAAA,EAAAA,IAAyBhlB,EAAQS,GAC/CqkB,GAAa3f,EAAW0F,SAASia,IACnC9jB,EAAQwiB,aAAa,CAAEnc,eAAWxG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,iBAAiBuZ,MAAOta,EAAQgB,EAASC,KACxD,MAAM,OAAER,EAAM,mBAAEokB,EAAkB,MAAEtkB,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5D2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,aAGI2O,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3O,OAAMiW,uBAEvC7kB,GAASyJ,EAAAA,EAAAA,MACT,MAAMwb,GAAatkB,EAAAA,EAAAA,IAAyBX,EAAQO,GAChD0kB,GAAcA,EAAWxkB,SAAWA,GACtCO,EAAQgD,SAAS,CAAEpC,QAAIf,EAAWN,UAIpC,MAAM2kB,EAAUllB,EAAOmlB,YAAYnH,KACnC/V,OAAOoR,OAAO6L,GAASpZ,SAASsZ,IAC9B,GAAIA,EAAOC,gBAAgBxa,SAASpK,IAAW2kB,EAAOE,eAAeza,SAASpK,GAAS,CACrF,MAAM8kB,EAAqBH,EAAOC,gBAAgBlhB,QAAQvC,GAAOA,IAAOnB,IAClE+kB,EAAmBJ,EAAOE,eAAenhB,QAAQvC,GAAOA,IAAOnB,IAE/DglB,EAAgB,IACjBL,EACHC,gBAAiBE,EACjBD,cAAeE,IAGjBjI,EAAAA,EAAAA,IAAQ,iBAAkB,CACxB3b,GAAIwjB,EAAOxjB,GACX8jB,aAAcD,GAElB,IACA,KAGJ1kB,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,WACJkE,EAAU,OAAEwgB,EAAM,YAAEC,EAAW,MAAErlB,GAAQC,EAAAA,EAAAA,OACvCS,EACEiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,GAAWyB,EACb0M,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE1ByF,QAAeqX,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CsI,KAAMjX,EAAMzJ,aAAYwgB,SAAQC,gBAGlC5kB,EAAQuL,iBAAiB,CACvB3G,QAASM,GACL4f,EAAAA,EAAAA,IAAU,2BACV,2EACJvlB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,qBAAqBuZ,MAAOta,EAAQgB,EAASC,KAC5D,MAAM,OAAEoU,EAAM,OAAE5U,EAAM,SAAEC,GAAaO,EACrC,GAAIR,IAAWT,EAAOmY,cAAe,OAErC,MAAMvJ,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EAAM,OACX,MAAMkV,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQS,GAC5BqjB,KAASiC,EAAAA,EAAAA,IAAUjC,KAASE,EAAAA,EAAAA,IAAcF,WAExCvG,EAAAA,EAAAA,IAAQ,oBAAqB,CACjCsI,KAAMjX,EAAMlO,WAAU2U,UACtB,KAGJtU,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAE4M,EAAK,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvCiB,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvB0M,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF+N,GAAwB,MACjBY,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC3O,OAAMlO,WAAUmN,SAChB,IAGApN,IAAW4M,EAAAA,MACbrN,EAAS,IACJA,EACHkN,qBAAsBlN,EAAOkN,qBAAqBvH,KAAKoN,GAC9CA,EAAa1E,UAAY0E,EAAanR,IAAMiM,EAAQ,IAAKkF,EAAc1E,UAAU,GAAU0E,MAKxG,MAAMxL,GAAcC,EAAAA,EAAAA,IAAkBxH,EAAQS,EAAQC,EAAUH,GAC1DylB,GAAQC,EAAAA,EAAAA,IAAoBjmB,EAAQS,EAAQC,GAClD,IAAK6G,IAAgBye,IAAUpX,EAAKsX,YAClC,OAAOlmB,EAGT,MAAMmmB,EAw8BR,SAAwB9b,EAAeoV,EAAcC,GACnD,IAAI0G,EAAQ,EAEZ,IAAK,IAAI9G,EAAI,EAAG3L,EAAItJ,EAAIlK,OAAQmf,EAAI3L,IAC9BtJ,EAAIiV,IAAMG,GAAQpV,EAAIiV,IAAMI,GAC9B0G,MAGE/b,EAAIiV,IAAMI,IALuBJ,KAUvC,OAAO8G,CACT,CAt9BoBC,CAAe9e,EAAcye,EAAOnY,GACtD,IAAKsY,EACH,OAAOnmB,EAGT,GAAI4O,EAAK5L,SAAW4L,EAAKiK,SAASnY,GAAW,CAC3C,MAAM4lB,EAAQ1X,EAAKiK,OAAOnY,GAC1BV,GAASumB,EAAAA,EAAAA,IAAiBvmB,EAAQS,EAAQC,EAAU,CAClD8lB,uBAAwB3Y,IAE1B,MAAM4Y,EAAsB3Y,KAAKC,IAAI,EAAGuY,EAAMJ,YAAcC,GAM5D,OAL4B,IAAxBM,IACFzmB,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClCylB,YAAapY,KAAKC,IAAI,EAAGa,EAAKsX,YAAc,OAGzCQ,EAAAA,EAAAA,IAAY1mB,EAAQS,EAAQC,EAAU,CAC3CwlB,YAAaO,GAEjB,CAGA,OAAI/lB,IAAamB,EAAAA,IAIVqiB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAChC+lB,uBAAwB3Y,EACxBqY,YAAapY,KAAKC,IAAI,EAAGa,EAAKsX,YAAcC,UAN9C,CAOE,KAGJplB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,WAAEkE,EAAU,MAAE5E,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GAClCqO,IAIA2O,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3O,OAAMzJ,cAAa,KAGxDpE,EAAAA,EAAAA,IAAiB,sBAAsBuZ,MAAOta,EAAQgB,EAASC,KAC7D,MAAM,KAAEgD,EAAI,MAAE1D,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtC0lB,QAAuBpJ,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEtZ,SAE9DjE,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2mB,kBACCpmB,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,IAAKK,EAAAA,EAAAA,IAAetB,EAAQO,GAAOomB,eAInC,OAAOpkB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2mB,oBAAgB9lB,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,OAAER,EAAM,UAAE4G,EAAS,QAAEuf,GAAY3lB,EACjC2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE5BmO,IACG2O,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3O,OAAMvH,YAAWuf,WAClD,KAGF7lB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,OAAER,EAAM,UAAE4G,GAAcpG,EACxB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE5BmO,IACG2O,EAAAA,EAAAA,IAAQ,eAAgB,CAAE3O,OAAMvH,YAAWuf,QAAS,IAC3D,KAGF7lB,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASC,KAC9C,MAAM,OAAER,EAAM,UAAE4G,GAAcpG,EACxB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BomB,GAAO/R,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,IAAYmG,QAAQqZ,KAC/DjY,GAAQiY,IACLtJ,EAAAA,EAAAA,IAAQ,YAAa,CAAE3O,OAAMvH,YAAWwf,QAC/C,KAGF9lB,EAAAA,EAAAA,IAAiB,yBAAyBuZ,MAAOta,EAAQgB,EAASC,KAChE,MAAM,KACJ2N,EAAI,UAAEvH,EAAS,OAAEyf,EAAM,OAAElX,EAAM,MAAEqG,EAAK,kBAAE8Q,EAAiB,MAAExmB,GAAQC,EAAAA,EAAAA,OACjES,EAEEiF,QAAeqX,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD3O,OAAMvH,YAAWyf,SAAQlX,SAAQqG,UAGnC,IAAK/P,EACH,OAGFlG,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAE7D,MAAMrb,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,IAClC,YAAE+I,GAAgBnH,GAClB,OAAEoH,GAAWpH,EAASmH,YAE5BtJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BsJ,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAACud,IAASxQ,EAAAA,EAAAA,IAAO,KACVyQ,GAAqBxd,GAAUA,EAAOud,GAAUvd,EAAOud,GAAU,MAClE5gB,GAAUA,EAAOsX,MAAM7X,KAAKme,GAASA,EAAKliB,QAGlDolB,QAAS,IACH1d,EAAY0d,QAAU1d,EAAY0d,QAAU,CAAC,EACjD,CAACF,GAAS5gB,EAAO+gB,YAAc,MAGlC1mB,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OAAER,EAAM,IAAE4J,GAAQpJ,EAClB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC5BmO,IACG2O,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE3O,OAAMvE,OAC7C,KAGFtJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,SACJyjB,EAAQ,YAAE7C,EAAW,MAAEthB,GAAQC,EAAAA,EAAAA,OAC7BS,GAEE,WACJiK,EAAU,WAAE/F,EAAU,SAAErC,EAAQ,YAAEqI,EAAW,UAAEI,EAAS,WAAEC,EAAU,WAAE0b,IACpE5lB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBAC5BskB,GAAuBC,EAAAA,EAAAA,IAA2BpnB,GAClDqnB,EAAWnc,GAAanI,EAAAA,EAAAA,IAAW/C,EAAQkL,QAAcrK,EACzDymB,EAASxkB,GAAWC,EAAAA,EAAAA,IAAW/C,EAAQ8C,QAAYjC,EACnD6E,EAAWwF,GAAc/F,EAC3BA,EACCY,MAAK,CAACwhB,EAAGC,IAAMD,EAAIC,IACnB7hB,KAAK/D,IAAOkT,EAAAA,EAAAA,IAAkB9U,EAAQkL,EAAYtJ,KAAKuC,OAAOwD,cAC/D9G,EAEJ,IAAKwmB,IAAaC,IAAW5hB,GAAawhB,IAAeI,EAAOtkB,QAC9D,OAGF,MAAMkf,GAASC,EAAAA,EAAAA,IAAaniB,EAAQ8C,GAE9B2kB,EAAe/hB,EAASvB,QAAQujB,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAatnB,SACVod,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9B8J,WACAC,SACAJ,aACAxhB,SAAU+hB,EACV/C,WACA7C,cACAK,SACA/W,cACAI,YACAC,aACA2b,yBAIJzhB,EACGvB,QAAQujB,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3C5b,SAASlG,IACR,MAAM,KAAE3B,EAAI,SAAEye,GAAa9c,EAAQ4H,QAAQvJ,MAAQ,CAAC,GAC9C,QAAEiO,EAAO,KAAE2U,GAASjhB,EAAQ4H,QAE7BqS,GAAY7f,EAAQ,CACvB4O,KAAM0Y,EACN1G,gBAAiBsG,EACjBxG,gBAAiBwG,GAAcrlB,EAAAA,GAC/BoC,OACAye,WACAxQ,UACA2U,OACAnC,WACA7C,cACAK,UACA,IAGNliB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,CAAC,GACjBtC,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBuZ,MAAOta,EAAQgB,EAASC,KAC/D,MAAM,OAAER,GAAWQ,EACb2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE3O,SACxD,IAAK1I,EACH,OAGF,MAAM,SAAER,GAAaQ,EAEf8X,GAAOC,EAAAA,EAAAA,IAAqBvY,EAAU,MACtC2E,EAAMpC,OAAOC,KAAK8V,GAAMrY,IAAI0C,QAAQtC,MAAK,CAACwhB,EAAGC,IAAMA,EAAID,IAK7D,GAHAvnB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS4nB,EAAAA,EAAAA,IAAyB5nB,EAAQ4O,EAAKhN,GAAIoc,GACnDhe,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQ4O,EAAKhN,GAAIC,EAAAA,GAAgB,eAAgBwI,GACzEuE,GAAM5L,QAAS,CACjB,MAAM6kB,EAA+C,CAAC,EACtDniB,EAASoG,SAASlG,IAChB,MAAMlF,GAAWonB,EAAAA,EAAAA,IAA0B9nB,EAAQ4F,GAC7CmiB,EAAoBF,EAAmBnnB,IAAa,GAC1DqnB,EAAkBxhB,KAAKX,EAAQhE,IAC/BimB,EAAmBnnB,GAAYqnB,CAAiB,IAGlD9f,OAAO+f,QAAQH,GAAoB/b,SAAQkC,IAA8B,IAA5BtN,EAAUunB,GAAaja,EAClEhO,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQ4O,EAAKhN,GAAIyG,OAAO3H,GAAW,eAAgBunB,EAAa,GAEhG,EACAlkB,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,OACJR,EAAM,GAAEmB,GACNX,EAEE2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE3BmO,IAIA2O,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC3O,OACAvE,IAAK,CAACzI,IACN,KAGJb,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,UAAE4G,EAAS,YAAEwa,GACjB5gB,EAEE2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BmF,EAAUgJ,IAAQsZ,EAAAA,EAAAA,IAAuBloB,EAAQ4O,EAAKhN,GAAIyF,GAC3DuH,GAAShJ,IAIT2X,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC3O,OACAhJ,UACAic,eACA,KAGJ9gB,EAAAA,EAAAA,IAAiB,2BAA2BuZ,MAAOta,EAAQgB,EAASC,KAClE,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAMuZ,GAAkBC,EAAAA,EAAAA,IAAuBpoB,EAAQS,EAAQC,IAAWkB,GAEpEsE,QAAeqX,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE3O,OAAMlO,WAAUynB,oBACrEjiB,IACLlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,QAC7DzZ,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmBuZ,MAAOta,EAAQgB,EAASC,KAC1D,MAAM,UAAEoG,EAAS,OAAE5G,GAAWQ,EAExB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAEhC,IAAKmO,EAAM,OAEX5O,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQ4G,EAAW,CACpDghB,gBAAiB,MAGnBtkB,EAAAA,EAAAA,IAAU/D,GAEV,MAAMkG,QAAeqX,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE3O,OAAMvH,cAExDrH,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQ4G,EAAW,CACpDghB,gBAAiBniB,EACjBoiB,sBAAuBpiB,KAGzBnC,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,IAAEoJ,EAAG,YAAEke,GAAgBtnB,EACvBunB,EAAoBD,EAAcle,GACpCiM,EAAAA,EAAAA,IAAOjM,EAAIlG,QAAQqO,IAAgBxS,EAAO8S,aAAakL,KAAKxL,MAC1DiW,QAAoBlL,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD/K,WAAYgW,IAETC,IAELzoB,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACH8S,aAAc,IACT9S,EAAO8S,aACVkL,KAAM,IACDhe,EAAO8S,aAAakL,SACpBC,EAAAA,EAAAA,IAAqBwK,EAAa,UAI3C1kB,EAAAA,EAAAA,IAAU/D,GAAO,KAmPnBe,EAAAA,EAAAA,IAAiB,sBAAsBuZ,MAAOta,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE3O,OAAMlO,aAC5D,IAAKwF,EACH,OAGF,MAAM,SAAER,EAAQ,MAAEyJ,EAAK,MAAEqO,GAAUtX,EAE7B8X,GAAOC,EAAAA,EAAAA,IAAqBvY,EAAU,MACtC2E,EAAMpC,OAAOC,KAAK8V,GAAMrY,IAAI0C,QAAQtC,MAAK,CAACwhB,EAAGC,IAAMA,EAAID,IAE7DvnB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASoe,EAAAA,EAAAA,IAAoBpe,EAAQ4O,EAAKhN,GAAIoc,GAC9Che,GAAS0oB,EAAAA,EAAAA,IAAqB1oB,EAAQ4O,EAAKhN,GAAIlB,EAAU2J,GACzDrK,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACtDxd,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,QACtDpL,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,cAAcuZ,MAAOta,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,UAAE4G,GAAcpG,EACxB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,cAAe,CAAE3O,OAAMvH,cAC/CnB,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQ4G,EAAW,CACpDshB,YAAaziB,KAEfnC,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OAAER,EAAM,SAAEmoB,GAAa3nB,EACvB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BooB,GAAa9lB,EAAAA,EAAAA,IAAW/C,EAAQ4oB,KAAa7E,EAAAA,EAAAA,IAAW/jB,EAAQ4oB,GACtE,GAAKha,GAASia,EAMd,OAFKtL,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE2E,OAAQ2G,EAAYja,UAEjDka,EAAAA,EAAAA,IAAmB9oB,EAAQS,EAAQ,CAAEmoB,YAAW,KAGzD7nB,EAAAA,EAAAA,IAAiB,cAAcuZ,MAAOta,EAAQgB,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACb2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,cAAe,CAAE3O,SAC9C,IAAK1I,EAOH,OANAlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClCsoB,cAAe,UAEjBhlB,EAAAA,EAAAA,IAAU/D,GAKZA,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAC7Dxd,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOiJ,MAAO,OAC7DnP,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAEsoB,cAAe7iB,EAAOgc,UAC5Dne,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBuZ,MAAOta,EAAQgB,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACb2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE3O,SACpD1I,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASgpB,EAAAA,EAAAA,IAAuBhpB,EAAQS,EAAQyF,EAAOR,SAAS,IAChE1F,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAC7Dxd,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOiJ,MAAO,QAC7DpL,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACb2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BmF,GAAUqjB,EAAAA,EAAAA,IAAuBjpB,EAAQS,GAC1CmO,GAAShJ,IAIT2X,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE3O,OAAMsa,OAAQtjB,EAAQujB,UAAW,KAG1EpoB,EAAAA,EAAAA,IAAiB,uBAAuBuZ,MAAOta,EAAQgB,EAASC,KAC9D,MAAM,OAAER,EAAM,SAAEoc,GAAa5b,EACvB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EAAM,OAEX,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE3O,OAAMiO,aAE5D,IAAK3W,EAAQ,OAEb,MAAM,SAAER,EAAQ,MAAEyJ,EAAK,MAAEqO,GAAUtX,EAE7B8X,GAAOC,EAAAA,EAAAA,IAAqBvY,EAAU,MACtC2E,EAAMpC,OAAOC,KAAK8V,GAAMrY,IAAI0C,QAElCrI,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASoe,EAAAA,EAAAA,IAAoBpe,EAAQ4O,EAAKhN,GAAIoc,GAC9Che,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACtDxd,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,OACtDnP,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClC2oB,eAAgB,IAAKxa,EAAKwa,gBAAkB,MAAQ/e,MAGtDtG,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,WAAEkE,EAAU,MAAE5E,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EAAM,OAEX,MAAMwa,GAAkBxa,EAAKwa,gBAAkB,IAAIjlB,QAAQvC,IAAQuD,EAAW0F,SAASjJ,KACvF5B,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQ4O,EAAKhN,GAAI,CACnCwnB,oBAGFrlB,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQqoB,iBAAiB,CAAElkB,aAAY5E,SAAQ,KAGjDQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GAElCqO,GAAMwa,gBAEXpoB,EAAQ0H,aAAa,CAAEjI,OAAQmO,EAAKhN,GAAIyF,UAAWuH,EAAKwa,eAAe,GAAI7oB,SAAQ,KAGrFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,GAAKqO,EAIL,OAFA2O,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE3O,UAEtBsV,EAAAA,EAAAA,IAAWlkB,EAAQ4O,EAAKhN,GAAI,CACjC0nB,yBAAqBzoB,EACrBuoB,oBAAgBvoB,GAChB,KAGJE,EAAAA,EAAAA,IAAiB,WAAW,CAACf,EAAQgB,EAASC,KAC5C,MAAM,IAAEyT,EAAG,gBAAE6U,EAAe,MAAEhpB,GAAQC,EAAAA,EAAAA,OAAsBS,EACtDuoB,GAAkBC,EAAAA,EAAAA,GAAe/U,GAEvC,GAAI8U,EAAgBE,MAAMC,EAAAA,MAAgBH,EAAgBE,MAAME,EAAAA,KAE9D,YADA5oB,EAAQ6oB,iBAAiB,CAAEnV,MAAKnU,UAIlC,MAAM,UAAEupB,EAAS,OAAEC,GAAW/pB,EAC9B,GAAI8pB,EAAW,CACb,MAAME,EAAY,IAAIC,IAAIT,GAE1B,GAAIO,GAAQG,gBAAkBJ,EAAUK,iBAAiBtf,SAASmf,EAAUI,UAG1E,OAFAJ,EAAUK,aAAajK,IAvwCD,kBAuwC0B2J,EAAOG,qBACvDzmB,OAAOG,KAAKomB,EAAUtZ,KAAM,SAAU,YAIxC,GAAIoZ,EAAUQ,eAAezf,SAASmf,EAAUI,UAE9C,YADAppB,EAAQupB,mBAAmB,CAAE7V,MAAKnU,SAGtC,CAE4BipB,EAAgBE,MAAMc,EAAAA,MAAsBjB,EAKtE9lB,OAAOG,KAAK4lB,EAAiB,SAAU,YAFvCxoB,EAAQypB,oBAAoB,CAAE/V,IAAK8U,EAAiBjpB,SAGtD,KAGFQ,EAAAA,EAAAA,IAAiB,yBAAyBuZ,MAAOta,EAAQgB,EAASC,KAChE,MAAM,OAAER,EAAM,QAAEgW,EAAO,MAAElW,GAAQC,EAAAA,EAAAA,OAAsBS,EACvD,IAAI6iB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQS,GAC9B,GAAIqjB,IAAQ4G,EAAAA,EAAAA,IAAmC1qB,EAAQO,GAAQ,CAC7D,IAAIoqB,GAAWC,EAAAA,EAAAA,IAAmB5qB,EAAQS,GAC1C,IAAKkqB,EAAU,CACb,MAAM,WAAEE,GAAe/G,EACjB5d,QAAeqX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3b,GAAInB,EAAQoqB,eAC5D7qB,GAASyJ,EAAAA,EAAAA,MACTqa,EAAO5d,GAAQ4d,KACf6G,EAAWzkB,GAAQykB,QACrB,CAEA,GAAIA,EAAUG,gBAOZ,YANA9pB,EAAQ+pB,WAAW,CACjB9W,KAAM,CACJrO,SAASkgB,EAAAA,EAAAA,IAAU,oCAAoCkF,EAAAA,EAAAA,IAAgBlH,KAEzEvjB,SAIN,EAEK0qB,EAAAA,EAAAA,IAA8BjrB,EAAQS,EAAQF,IAKnDP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,SAAUrC,EACVymB,WAAYzQ,EACZnL,cAAc,IAEf/K,IACHwD,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQgD,SAAS,CAAEpC,GAAInB,EAAQC,SAAU+V,EAASlW,UAClDS,EAAQkqB,iBAAiB,CAAE3qB,UAC3BS,EAAQ0B,sBAAsB,CAAEnC,WAhB9BS,EAAQmqB,oCAAoC,CAAE1qB,SAAQF,SAgBhB,KAG1CQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B6C,gBAAiB,KACZvB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsC,gBACjCC,SAAU9C,EAAOmY,gBAElB5X,IACHwD,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQ0B,sBAAsB,CAAEnC,UAChCS,EAAQ6B,gBAAgB,CAAE6hB,UAAU,EAAMnkB,SAAQ,KAGpDQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,OACJR,EAAM,GAAEmB,EAAE,eAAEwpB,GAAiBC,EAAAA,EAAAA,IAAmBrrB,GAAO,MAAEO,GAAQC,EAAAA,EAAAA,OAC/DS,EAIJ,OAFSqqB,EAAAA,EAAAA,IAAkCtrB,EAAQS,EAAQmB,EAAIwpB,EAAgB7qB,EAElE,KAGfQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OACJR,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAClBS,EAIJ,OAFSsqB,EAAAA,EAAAA,IAAkCvrB,EAAQS,EAAQmB,EAAIrB,EAElD,KAGfQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,OACJR,EAAM,WAAE0E,EAAU,eAAEimB,GAAiBC,EAAAA,EAAAA,IAAmBrrB,IACtDiB,EAEE2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,GAAKmO,EAcL,OAZAzJ,EAAW2G,SAASlK,IAClB5B,GAASwrB,EAAAA,EAAAA,IAAyBxrB,EAAQS,EAAQmB,EAAIwpB,EAAgB,CACpEK,WAAW,GACX,KAGJlO,EAAAA,EAAAA,IAAQ,gBAAiB,CACvB3O,OACAzJ,aACAimB,mBAGKprB,CAAM,IAKf,IAAI0rB,GACAC,GAAmD,CAAC,EAExD,SAASC,KACHF,KACFjhB,aAAaihB,IACbA,QAAwB7qB,GAI1B,MAAM,iBAAEgrB,IAAqB3S,EAAAA,EAAAA,MAC7BjR,OAAO+f,QAAQ2D,IAAqB7f,SAAQggB,IAAmB,IAAjBrrB,EAAQ4J,GAAIyhB,EACxDD,EAAiB,CAAEprB,SAAQ4J,IAAKhK,MAAMof,KAAKpV,GAAM0hB,iBAAiB,GAAO,IAG3EJ,GAAsB,CAAC,CACzB,CA2FA,SAAS7I,GAAkB9C,GACzB,MAAM,iBACJgM,EAAgB,SAAEC,GAChBjM,EACJ,OAAIgM,EAAyB,OACzBC,IAAaC,EAAAA,IAAsB,MACnCC,EAAAA,IAAAA,IAAkCF,IAAaG,EAAAA,IAAAA,IAAkCH,GAAkB,QACnGI,EAAAA,IAAAA,IAAkCJ,GAAkB,QACpDjM,EAAWsM,MAAc,QACtB,MACT,EApGAvrB,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,IAAEoJ,EAAG,OAAE5J,GAAWQ,EAEnByqB,IACHliB,WAAWoiB,GAtBY,KAyBpBD,GAAoBlrB,KACvBkrB,GAAoBlrB,GAAU,IAAI8rB,KAGpCliB,EAAIyB,SAASlK,IACX+pB,GAAoBlrB,GAAQ+rB,IAAI5qB,EAAG,GACnC,KAGJb,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,OAAER,EAAM,IAAE4J,EAAG,gBAAE0hB,GAAoB9qB,EAEnC2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EAAM,OAEX,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD3O,OACAvE,MACA0hB,oBAGG7lB,IAELlG,GAASyJ,EAAAA,EAAAA,MACTvD,EAAO4F,SAAS2gB,IACdzsB,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQgsB,EAAO7qB,GAAI,CACpD8qB,MAAOD,EAAOC,MACdC,SAAUF,EAAOE,WAGnB,MAAM/mB,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQgsB,EAAO7qB,IACzD,IAAKgE,EAAS,OAEd,MAAMgnB,EAAgBhnB,EAAQinB,mBAAmBpsB,OAC3CC,EAAWkF,EAAQinB,mBAAmBnsB,SACvCksB,GAAkBlsB,IAEvBV,GAASumB,EAAAA,EAAAA,IAAiBvmB,EAAQ4sB,EAAelsB,EAAU,CACzDosB,cAAeL,EAAOK,cACtBC,iBAAkBN,EAAOM,iBACzBvkB,cAAeikB,EAAO5e,MACtB2Y,uBAAwBiG,EAAOO,YAC/B,KAGJjpB,EAAAA,EAAAA,IAAU/D,GAAO,I,2BClhDnB,MAGMitB,IAAkBC,EAAAA,EAAAA,KAAUtQ,GAAOA,KAAM,KAAK,GAkfpDtC,eAAe6S,GAA0CntB,EAAWqS,GAClE,MAAM+a,QAAuB7P,EAAAA,EAAAA,IAAQ,sBAAuB,CAAElL,SACzD+a,IAILptB,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACVD,OAAQib,KAGZrpB,EAAAA,EAAAA,IAAU/D,GACZ,CAEAsa,eAAe+S,GACbrtB,EACAgB,EACAssB,GAEA,QAAArtB,EAAAC,UAAAC,OAAA8c,EAAA,IAAA5c,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA2c,EAAA3c,EAAA,GAAAJ,UAAAI,GAAA,IACIitB,GAFAhtB,GAAQC,EAAAA,EAAAA,OAAkByc,EAG9B,IACEsQ,QAAmBhQ,EAAAA,EAAAA,IACjB,gBACA,CAAE+P,kBAkBN,CAhBE,MAAO9V,GACP,GAAoC,uBAA/BA,EAAmB5R,QAatB,OAZA5E,EAAQuL,iBAAiB,CACvB3G,SAASkgB,EAAAA,EAAAA,IAAU,6BACnBvlB,eAGE,cAAe+sB,IACdhsB,EAAAA,EAAAA,IAAetB,EAAQO,GAAO4V,4BAA8BmX,EAAeE,YAC9ExtB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmW,+BAA2BtV,GAC1BN,IACHwD,EAAAA,EAAAA,IAAU/D,IAIhB,CAGA,GAFAA,GAASyJ,EAAAA,EAAAA,OAEJ8jB,EAEH,OAGF,MAAM,IAAEnN,EAAG,SAAEhO,EAAQ,MAAEqb,GAAUF,EAI3BG,GAFN1tB,GAAS2tB,EAAAA,EAAAA,IAAiB3tB,EAAQogB,EAAIxe,GAAI,IAAKwe,EAAKhO,WAAUqb,WAElCrb,SAASwb,SAASnnB,MAC1CinB,GAAgBD,EAAMC,KACxB1tB,GAAS6tB,EAAAA,EAAAA,IAAwB7tB,KAGnC+D,EAAAA,EAAAA,IAAU/D,EACZ,CAkLAsa,eAAewT,GAAkC9tB,EAAWkB,EAAe6sB,EAAsBne,GACnD,QAAAoN,EAAA9c,UAAAC,OAAA2rB,EAAA,IAAAzrB,MAAA2c,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAA4O,EAAA5O,EAAA,GAAAhd,UAAAgd,GAAA,IAAxC3c,GAAQC,EAAAA,EAAAA,OAAkBsrB,EAC9B,MAAM5lB,QAAeqX,EAAAA,EAAAA,IAAQ,aAAc,CAAErc,QAAO0O,SAAQoe,SAAUD,IACjE7nB,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASiuB,EAAAA,EAAAA,IAAgBjuB,GAAS4P,EAAQ1J,EAAOgoB,KAAMhoB,EAAO+gB,WAAY1mB,IAC1EwD,EAAAA,EAAAA,IAAU/D,GACZ,EA5uBAe,EAAAA,EAAAA,IAAiB,mBAAmBuZ,MAAOta,EAAQgB,KACjD,MAAOmtB,EAAeC,SAA2BC,QAAQC,IAAI,EAC3D/Q,EAAAA,EAAAA,IAAQ,mBAAoB,CAAElL,KAAMrS,EAAOoS,SAASQ,MAAMP,QAC1DkL,EAAAA,EAAAA,IAAQ,uBAAwB,CAAElL,KAAMrS,EAAO8S,aAAaF,MAAMP,SAE/D+b,GAAsBD,IAI3BnuB,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASuuB,EAAAA,EAAAA,IACPvuB,EACA,QACAmuB,EAAc9b,KACd8b,EAAcK,MAGhBxuB,GAASyuB,EAAAA,EAAAA,IACPzuB,EACAouB,EAAkB/b,KAClB+b,EAAkBI,OAGpBzqB,EAAAA,EAAAA,IAAU/D,GAEVgB,EAAQ0tB,iBAAiB,CACvBrkB,IAAKrK,EAAOyS,qBACZ,KAGJ1R,EAAAA,EAAAA,IAAiB,qBAAqBuZ,MAAOta,EAAQgB,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAEhD2R,OACEC,OAAQ8b,EAAc,IAExBC,SAAUC,GACR7uB,EAAOoS,UAETQ,OACEC,OAAQic,EAAoB,KAE5B9uB,EAAO8S,aACLic,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAa5uB,OAIlB,IAAK,IAAImf,EAAI,EAAGA,EAAIyP,EAAa5uB,OAAQmf,IAAK,CAC5C,MAAM1d,EAAKmtB,EAAazP,GACpBuP,EAAOjtB,IAAKwQ,WAGhBpR,EAAQqsB,aAAa,CACnBC,eAAgB,CAAE1rB,KAAIipB,WAAYgE,EAAOjtB,GAAIipB,YAC7CtqB,UAGE+e,EA/D0B,IA+DQ,GAAKA,EAAI,SACvC0P,EAAAA,EAAAA,IAjEgB,KAmE1B,MAGFjuB,EAAAA,EAAAA,IAAiB,sBAAuBf,IACtC,MAAM,KAAEqS,GAASrS,EAAOoS,SAASD,QAAU,CAAC,EACvCgb,GAAmBntB,EAAQqS,EAAK,KAGvCtR,EAAAA,EAAAA,IAAiB,wBAAwBuZ,UACvC,MAAM,KAAEjI,GAASrS,EAAOoS,SAAS6c,UAAY,CAAC,EAExCC,QAAyB3R,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElL,SAC7D6c,IAILlvB,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACV6c,SAAUC,KAGdnrB,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBuZ,UACtC,MAAM,KAAEjI,GAASrS,EAAOoS,SAAS+c,SAAW,CAAC,EAEvCjpB,QAAeqX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9W,MAAO,OAAQ4L,SAClEnM,IAILlG,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACV+c,QAAS,CACP9c,KAAMnM,EAAOmM,KACbD,SAAUlM,EAAOkM,aAIvBrO,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BuZ,UACzC,MAAM,KAAEjI,GAASrS,EAAOoS,SAAS+c,SAAW,CAAC,EAEvCjpB,QAAeqX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9W,MAAO,OAAQ4L,SAClEnM,IAILlG,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACVgd,WAAY,CACV/c,KAAMnM,EAAOmM,KACbD,SAAUlM,EAAOkM,aAIvBrO,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBuZ,UACvC,MAAM,KAAEjI,GAASrS,EAAOoS,SAASid,UAAY,CAAC,EAExCA,QAAiB9R,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9W,MAAO,OAAQ4L,SACpEgd,IAILrvB,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACVid,SAAU,CACRhd,KAAMgd,EAAShd,KACfD,SAAUid,EAASjd,SAASjO,QAAQ+N,GAA8B,OAAlBA,EAAQzL,YAI9D1C,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBuZ,UACvC,MAAM,KAAEjI,GAASrS,EAAOoS,SAASkd,UAAY,CAAC,EACxCC,QAAyBhS,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElL,SAC7Dkd,IAILvvB,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASuuB,EAAAA,EAAAA,IACPvuB,EACA,WACAuvB,EAAiBld,KACjBkd,EAAiBf,OAEnBzqB,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBuZ,UACnC,MAAMiT,QAAmBhQ,EAAAA,EAAAA,IAAQ,qBACjC,IAAKgQ,EACH,OAGF,MAAM,IAAEnN,EAAG,SAAEhO,GAAamb,EAE1BvtB,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHwvB,aAAc,IAAKpP,EAAKhO,cAE1BrO,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBuZ,UACxC,MAAMiT,QAAmBhQ,EAAAA,EAAAA,IAAQ,0BACjC,IAAKgQ,EACH,OAEFvtB,GAASyJ,EAAAA,EAAAA,MAET,MAAM,IAAE2W,EAAG,SAAEhO,GAAamb,EAEpBkC,EAAU,IAAKrP,EAAKhO,YAE1BpS,GAAS2tB,EAAAA,EAAAA,IAAiB3tB,EAAQyvB,EAAQ7tB,GAAI6tB,GAC9CzvB,EAAS,IACJA,EACH0vB,oBAAqBD,EAAQ7tB,KAE/BmC,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BuZ,UACzC,MAAMiT,QAAmBhQ,EAAAA,EAAAA,IAAQ,4BACjC,IAAKgQ,EACH,OAEFvtB,GAASyJ,EAAAA,EAAAA,MAET,MAAM,IAAE2W,EAAG,SAAEhO,GAAamb,EACpBkC,EAAU,IAAKrP,EAAKhO,YAE1BpS,GAAS2tB,EAAAA,EAAAA,IAAiB3tB,EAAQyvB,EAAQ7tB,GAAI6tB,GAC9CzvB,EAAS,IAAKA,EAAQ2vB,qBAAsBF,EAAQ7tB,KACpDmC,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,eAAEqsB,EAAc,MAAE/sB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChD2uB,GAAYC,EAAAA,EAAAA,IAAiB7vB,EAAQstB,GACvCsC,GAAaA,EAAUxJ,QAAUwJ,GAAWxd,UAAUjS,QACrDktB,GAAartB,EAAQgB,EAASssB,EAAgB/sB,EAAM,KAG3DQ,EAAAA,EAAAA,IAAiB,sBAAsBuZ,UACrC,MAAOwV,EAAQC,SAAiB1B,QAAQC,IAAI,EAC1C/Q,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAELuS,GAAWC,IAIhB/vB,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASgwB,EAAAA,EAAAA,IAAsBhwB,EAAQ,IAAK8vB,EAAO1P,IAAKhO,SAAU0d,EAAO1d,WACzEpS,EAAS,IACJA,EACHiwB,qBAAsB,IAAKF,EAAQ3P,IAAKhO,SAAU2d,EAAQ3d,YAG5DrO,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BuZ,UAC1C,MAAMiT,QAAmBhQ,EAAAA,EAAAA,IAAQ,4BACjC,IAAKgQ,EACH,OAEFvtB,GAASyJ,EAAAA,EAAAA,MAET,MAAM,IAAE2W,EAAG,SAAEhO,GAAamb,EAE1BvtB,EAAS,IACJA,EACHkwB,oBAAqB,IAAK9P,EAAKhO,cAEjCrO,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBuZ,UAChC,MAAM,KAAEjI,GAASrS,EAAOkuB,KAAKiC,MAEvBC,QAAkB7S,EAAAA,EAAAA,IAAQ,iBAAkB,CAAElL,SAC/C+d,IAILpwB,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACHkuB,KAAM,IACDluB,EAAOkuB,KACViC,MAAOC,KAGXrsB,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,WAAWuZ,MAAOta,EAAQgB,EAASC,KAClD,MAAM,IACJovB,EAAG,aAAEC,EAAY,MACjB/vB,GAAQC,EAAAA,EAAAA,OACNS,EACEd,EAASH,EAAOkuB,KAAKiC,MAAMjC,MAAM/tB,OAEjC8V,GAAQsa,EAAAA,GAAAA,GAAmBvwB,EAAQ,aACnCwwB,GAAeC,EAAAA,GAAAA,GAAmBzwB,EAAQ,aAC1C0wB,GAAYtJ,EAAAA,EAAAA,IAA2BpnB,GAoB7C,IAlBKswB,GAAgBnwB,GAAUA,GAAU8V,GACvCjV,EAAQuL,iBAAiB,CACvBuE,MAAOxL,EAAAA,GAAuB,2BAA4B2Q,EAAM7N,YAChExC,QAAS8qB,EAAYprB,EAAAA,GAAuB,2CACxCA,EAAAA,GAAuB,mCACvBkrB,EAAapoB,gBACZsoB,GAAa,CAChBrb,OAAQ,CACNA,OAAQ,mBACRpU,QAAS,CAAEV,WAGfowB,UAAW,YACXpwB,iBAIiBgd,EAAAA,EAAAA,IAAQ,UAAW,CAAE8S,MAAKC,iBAE7C,OAIF,MAAMpC,GADNluB,GAASyJ,EAAAA,EAAAA,OACWykB,KAAKiC,MAAMjC,MAAM/pB,QAAO/D,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,IAAOyuB,EAAIzuB,EAAE,KAAK,GACpEgvB,EAAUN,EAAepC,EAAO,CAACmC,KAAQnC,GAE/CluB,EAAS,IACJA,EACHkuB,KAAM,IACDluB,EAAOkuB,KACViC,MAAO,IACFnwB,EAAOkuB,KAAKiC,MACfjC,KAAM0C,MAIZ7sB,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,QAAEiR,EAAO,MAAE3R,GAAQC,EAAAA,EAAAA,OAAsBS,EACzC4vB,EAAU7wB,EAAOoS,SAAS6c,SAAS7c,SAASjS,OAC5C8V,GAAQsa,EAAAA,GAAAA,GAAmBvwB,EAAQ,iBACnCwwB,GAAeC,EAAAA,GAAAA,GAAmBzwB,EAAQ,iBAC1C0wB,GAAYtJ,EAAAA,EAAAA,IAA2BpnB,GAEzC6wB,GAAW5a,GACbjV,EAAQuL,iBAAiB,CACvBuE,MAAOxL,EAAAA,GAAuB,+BAAgC2Q,EAAM7N,YACpExC,QAAS8qB,EAAYprB,EAAAA,GAAuB,+CACxCA,EAAAA,GAAuB,uCACvBkrB,EAAapoB,gBACZsoB,GAAa,CAChBrb,OAAQ,CACNA,OAAQ,mBACRpU,QAAS,CAAEV,WAGfowB,UAAW,YACXpwB,UAIA2R,IACGqL,EAAAA,EAAAA,IAAQ,cAAe,CAAErL,WAChC,KAGFnR,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,QAAEiR,GAAYjR,EAEhBiR,IACFlS,GAASyJ,EAAAA,EAAAA,MAITzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACV6c,SAAU,IACLjvB,EAAOoS,SAAS6c,SACnB7c,SAAUpS,EAAOoS,SAAS6c,SAAS7c,SAASjO,QAAO6J,IAAA,IAAC,GAAEpM,GAAIoM,EAAA,OAAKpM,IAAOsQ,EAAQtQ,EAAE,QAItFmC,EAAAA,EAAAA,IAAU/D,IAELud,EAAAA,EAAAA,IAAQ,cAAe,CAAErL,UAAS4e,QAAQ,IACjD,KAGF/vB,EAAAA,EAAAA,IAAiB,uBAAuBuZ,MAAOta,EAAQgB,EAASC,KAC9D,MAAM,QAAEiR,GAAYjR,QAECsc,EAAAA,EAAAA,IAAQ,sBAAuB,CAAErL,aAKtDib,IADS1jB,EAAAA,EAAAA,MACiB,KAG5B1I,EAAAA,EAAAA,IAAiB,uBAAuBuZ,gBACjBiD,EAAAA,EAAAA,IAAQ,yBAI7Bvd,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACVD,OAAQ,CACNC,SAAU,OAIhBrO,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,aAAE8vB,GAAiB9vB,EACnBssB,GAAasC,EAAAA,EAAAA,IAAiB7vB,EAAQ+wB,GAC5C,IAAKxD,EACH,OAGF,MAAM,WAAE1C,EAAU,cAAEmG,EAAa,WAAEC,GAAe1D,EAC5C2D,GAAeD,GAActpB,QAAQqpB,IAEtCzT,EAAAA,EAAAA,IAAS2T,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAclG,cAAa,KAGxG9pB,EAAAA,EAAAA,IAAiB,qBAAqBuZ,MAAOta,EAAQgB,EAASC,KAC5D,MAAM,SAAEkwB,GAAalwB,EAErB,IAAImwB,EAAuBpxB,EAAOqxB,cAAcF,GAChD,GAAIC,GAAsB5W,UACxB,OAGFxa,EAAS,IACJA,EACHqxB,cAAe,IACVrxB,EAAOqxB,cACV,CAACF,GAAW,IACPC,EACH5W,WAAW,MAIjBzW,EAAAA,EAAAA,IAAU/D,GAEV,MAAMqxB,QAAsB9T,EAAAA,EAAAA,IAAQ,qBAAsB,CACxD4T,WACAG,YAAaF,EAAuBA,EAAqBhkB,QAAU,IAMrE,GAFAgkB,GADApxB,GAASyJ,EAAAA,EAAAA,OACqB4nB,cAAcF,IAEvCE,EAaH,OAZArxB,EAAS,IACJA,EACHqxB,cAAe,IACVrxB,EAAOqxB,cACV,CAACF,GAAW,IACPC,EACH5W,WAAW,UAIjBzW,EAAAA,EAAAA,IAAU/D,GAKZA,EAAS,IACJA,EACHqxB,cAAe,IACVrxB,EAAOqxB,cACV,CAACF,GAAW,CACV3W,WAAW,EACXpN,QAASikB,EAAcjkB,QACvBmkB,SAAU,IACJH,GAAsBG,YACvBF,EAAcE,cAKzBxtB,EAAAA,EAAAA,IAAU/D,EAAO,KAqEnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCC,GACG+rB,IAAgB3S,UACnB,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,iBAAkB,CAAErc,UAEjD,IAAKgF,EACH,OAGFlG,GAASyJ,EAAAA,EAAAA,MACT,MAAM,SAAEmlB,EAAQ,MAAEhc,GAAU5S,EAAOoS,SAE7B1C,EAAYxJ,EAAOsoB,KAAK7oB,KAAIgY,IAAA,IAAC,GAAE/b,GAAI+b,EAAA,OAAK/b,CAAE,IAE5CgR,EAAMC,QACRD,EAAMC,OAAO/G,SAASlK,IACpB,IAAK8N,EAAU7E,SAASjJ,GAAK,CAC3B,MAAM,MAAEkP,GAAU8d,EAAShtB,IAAO,CAAC,EAC/BkP,IAAS0gB,EAAAA,GAAAA,GAAY1gB,EAAO5P,IAC9BwO,EAAUH,QAAQ3N,EAEtB,KAIJ5B,GAASuuB,EAAAA,EAAAA,IACPvuB,EACA,SACAkG,EAAOmM,KACPnM,EAAOsoB,MAGTxuB,GAASyxB,EAAAA,EAAAA,IAAoBzxB,EAAQkG,EAAOmM,KAAM3C,EAAWnP,IAC7DwD,EAAAA,EAAAA,IAAU/D,EAAO,GAErB,KAGFe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExB,iBAAVC,GACJ+rB,IAAgB,KACnBa,GAAW9tB,EAAQkB,EAAOlB,EAAO+pB,QAAQ2H,uBAAmB7wB,EAAWN,EAAM,GAEjF,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,MAAEC,EAAK,OAAE0O,IAAWtO,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoP,UAEnC,iBAAVzO,GACJ+rB,IAAgB,KACnBa,GAAW9tB,EAAQkB,EAAOlB,EAAO+pB,QAAQ2H,kBAAmB9hB,EAAQrP,EAAM,GAE9E,KAGFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEwF,GAAUxF,GACZ,KAAEoR,GAASrS,EAAOoS,SAASwb,SAE5BX,IAAgB3S,UACnBta,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHoS,SAAU,IACLpS,EAAOoS,SACVwb,SAAU,IACL5tB,EAAOoS,SAASwb,SACnBnnB,YAIN1C,EAAAA,EAAAA,IAAU/D,GAEV,MAAMkG,QAAeqX,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE9W,QAAO4L,SAE/DrS,GAASyJ,EAAAA,EAAAA,MAEJvD,GAAUlG,EAAOoS,SAASwb,SAASnnB,QAAUA,IAIlDzG,GAAS2xB,EAAAA,EAAAA,IAAuB3xB,EAAQyG,EAAOP,EAAOkM,SAAUlM,EAAOmM,OAEvEtO,EAAAA,EAAAA,IAAU/D,GAAO,GACjB,KAGJe,EAAAA,EAAAA,IAAiB,yBAA0Bf,IAClC,IACFA,EACHoS,SAAU,IACLpS,EAAOoS,SACVwb,SAAU,CAAC,QAKjB7sB,EAAAA,EAAAA,IAAiB,2BAA2B,CAACf,EAAQgB,EAASC,KAC5D,MAAM,MAAEwF,GAAUxF,EAElB,OAAO2wB,EAAAA,EAAAA,IAA0B5xB,EAAQyG,EAAM,KAGjD1F,EAAAA,EAAAA,IAAiB,4BAA6Bf,IACrC,IACFA,EACH8S,aAAc,IACT9S,EAAO8S,aACV8a,SAAU,CAAC,QAKjB7sB,EAAAA,EAAAA,IAAiB,6BAA6BuZ,UAC5C,MAAMiV,QAAyBhS,EAAAA,EAAAA,IAAQ,8BAClCgS,IAILvvB,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACH8S,aAAc,IACT9S,EAAO8S,aACV+e,YAAatC,EAAiBf,KAAK7oB,KAAIkY,IAAA,IAAC,GAAEjc,GAAIic,EAAA,OAAKjc,CAAE,IACrDoc,KAAM,IACDhe,EAAO8S,aAAakL,SACpBC,EAAAA,EAAAA,IAAqBsR,EAAiBf,KAAKsD,SAAS1R,GAAQA,EAAIhO,UAAY,KAAK,QAGxFA,SAAU,IACLpS,EAAOoS,SACVwc,SAAU,IACL5uB,EAAOoS,SAASwc,aAChB3Q,EAAAA,EAAAA,IAAqBsR,EAAiBf,KAAM,UAIrDzqB,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,eAAEqsB,EAAc,MAAE/sB,GAAQC,EAAAA,EAAAA,OAAsBS,GACjD4uB,EAAAA,EAAAA,IAAiB7vB,EAAQstB,UACtBD,GAAartB,EAAQgB,EAASssB,EAAgB/sB,GAGtDP,GAASyJ,EAAAA,EAAAA,MACT,MAAM2W,GAAMyP,EAAAA,EAAAA,IAAiB7vB,EAAQstB,GAChClN,GAAKoN,YAIVxtB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmW,0BAA2BiK,EAAIoN,WAC9BjtB,IACHwD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BuZ,UAC1C,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,4BACxBrX,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS+xB,EAAAA,EAAAA,IAA+B/xB,EAAQkG,EAAOmM,KAAMnM,EAAO8rB,gBACpEjuB,EAAAA,EAAAA,IAAU/D,GAAO,I,cC7uBnB,MAAMitB,IAAkBC,EAAAA,EAAAA,KAAUtQ,GAAOA,KAAM,KAAK,GAoFpDtC,eAAe2X,GACbjyB,GAGA,IAFAkB,EAAKhB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAAI4B,EAAgC5B,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEqxB,EAAmBhyB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAE+N,EAAc1O,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEsxB,EAAgBjyB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEuxB,EAAgBlyB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAA,QAAAZ,EAAAC,UAAAC,OAAA0d,EAAA,IAAAxd,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAud,EAAAvd,EAAA,GAAAJ,UAAAI,GAAA,IAGjH4F,GAFA3F,GAAQC,EAAAA,EAAAA,OAAkBqd,EAY9B,GAAIjP,EAAM,CACR,MAAMyjB,GAAqB9U,EAAAA,EAAAA,IAAQ,sBAAuB,CACxD3O,OACA1N,QACAY,OACAmU,MAAOqc,EAAAA,IACPzV,SAAUqV,EACVE,UACAD,YAEII,EAAgB3jB,EAAK5L,SAAUua,EAAAA,EAAAA,IAAQ,cAAe,CAC1D3O,OACA1N,QACA+U,MAAOuc,EAAAA,WACJ3xB,GAEE4xB,EAAa5Z,SAAgBwV,QAAQC,IAAI,CAAC+D,EAAoBE,IAErE,GAAIE,EAAa,CACf,MAAM,SACJ/sB,EAAQ,MAAE8X,EAAK,WAAEkV,EAAU,aAAEC,GAC3BF,GAEI5Z,OAAQ+Z,EAAW,MAAExM,GAAUvN,GAAU,CAAC,EAElD3S,EAAS,CACP2S,OAAQ+Z,EACRC,iBAAkBzM,EAClB1gB,WACA8X,QACArO,MAAO,GACPujB,aACAI,SAAUH,EAEd,CACF,MACEzsB,QAAeqX,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7Crc,QACAgxB,aACAjc,MAAOqc,EAAAA,IACPxwB,OACAqwB,UACAC,YAIJpyB,GAASyJ,EAAAA,EAAAA,MACT,MAAMspB,GAAqBC,EAAAA,EAAAA,IAA+BhzB,EAAQO,GAClE,IAAK2F,GAAqB,KAAVhF,GAAgBA,IAAU6xB,EAGxC,OAFA/yB,GAASizB,EAAAA,EAAAA,IAAiCjzB,EAAQ,CAAE0F,UAAU,GAASnF,QACvEwD,EAAAA,EAAAA,IAAU/D,GAIZ,MAAM,SACJ0F,EAAQ,MAAE8X,EAAK,MAAErO,EAAK,WAAEujB,EAAU,SAAEI,GAClC5sB,EAEAiJ,EAAMhP,SACRH,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,QAGpDqO,EAAMrd,SACRH,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,QAGpD9X,EAASvF,SACXH,GAASkzB,EAAAA,EAAAA,IAAYlzB,EAAQ0F,IAG/B1F,GAASmzB,EAAAA,EAAAA,IACPnzB,EACA0F,EACAgtB,EACA5wB,EACAgxB,EACAvyB,GAGE2F,EAAO2S,SACT7Y,GAASozB,EAAAA,EAAAA,IAAapzB,EAAQ4O,EAAMhN,GAAIsE,EAAO2sB,iBAAmB3sB,EAAO2S,SAG3E,MAAMwa,EAAentB,EAAO2S,QAAQlT,KAAImmB,IAAA,IAAC,GAAElqB,GAAIkqB,EAAA,OAAKlqB,CAAE,IAAEmE,MAAK,CAACwhB,EAAGC,IAAMA,EAAID,IAC3EvnB,GAAS8O,EAAAA,EAAAA,IAAmB9O,EAAQ,CAClCszB,cAAeD,GACd9yB,IAEHwD,EAAAA,EAAAA,IAAU/D,EACZ,CC1EAsa,eAAeiZ,GACbvzB,EACA4O,EACAlO,EACAoB,EACA+a,GAGA,IAFAE,EAAe7c,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAAD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IACnBC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM8F,QAAeqX,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD3O,OACA9M,OACAmU,MAA4B,EAArBud,EAAAA,IACPC,aAAc/yB,IAAamB,EAAAA,QAAiBhB,EAAYH,EACxDmc,aAGF,IAAK3W,EACH,OAGF,MAAM,MACJiJ,EAAK,MAAEqO,EAAK,SAAE9X,EAAQ,WAAEgtB,EAAU,aAAEC,GAClCzsB,EAEE8X,GAAOC,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCguB,EAAczrB,OAAOC,KAAK8V,GAAMrY,IAAI0C,QAE1CrI,GAASyJ,EAAAA,EAAAA,MAET,MAAMkqB,GAAgBC,EAAAA,EAAAA,IAAyB5zB,EAAQO,GAClDozB,IAIL3zB,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,OACtDnP,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACtDxd,GAASoe,EAAAA,EAAAA,IAAoBpe,EAAQ4O,EAAKhN,GAAIoc,GAC9Che,GAAS6zB,EAAAA,EAAAA,IAA8B7zB,EAAQ4O,EAAKhN,GAAIlB,EAAUoB,EAAM4xB,EAAahB,EAAYC,EAAcpyB,IAC/GwD,EAAAA,EAAAA,IAAU/D,GAEL+c,GACEwW,GAAkBvzB,EAAQ4O,EAAMlO,EAAUoB,EAAM6wB,GAAc,EAAMpyB,GAE7E,CCjJA,IAAIuzB,GA8MAlY,IFzNJ7a,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsO,aAE7C3N,IAAUT,GACPwsB,IAAgB3S,UACnB,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,cAAe,CAAErc,UAE9ClB,GAASyJ,EAAAA,EAAAA,MACT,MAAMspB,GAAqBC,EAAAA,EAAAA,IAA+BhzB,EAAQO,GAClE,IAAK2F,IAAW6sB,GAAuB7xB,IAAU6xB,EAG/C,OAFA/yB,GAASizB,EAAAA,EAAAA,IAAiCjzB,EAAQ,CAAEmP,OAAO,GAAS5O,QACpEwD,EAAAA,EAAAA,IAAU/D,GAIZ,MAAM,WACJ+zB,EAAU,WAAEC,EAAU,YAAEC,EAAW,YAAEC,GACnChuB,GAEA6tB,EAAW5zB,QAAU8zB,EAAY9zB,UACnCH,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB,IAAI8V,KAAeE,GAAc,SAG9ED,EAAW7zB,QAAU+zB,EAAY/zB,UACnCH,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB,IAAI+V,KAAeE,GAAc,QAGlFl0B,GAASizB,EAAAA,EAAAA,IAAiCjzB,EAAQ,CAAEmP,OAAO,GAAS5O,GACpEP,GAAS8O,EAAAA,EAAAA,IAAmB9O,EAAQ,CAClCgP,aAAc,CACZmlB,QAASJ,EAAWpuB,KAAIvF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,IACtCwyB,QAASJ,EAAWruB,KAAIqI,IAAA,IAAC,GAAEpM,GAAIoM,EAAA,OAAKpM,CAAE,KAExCmN,cAAe,KACVzN,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsO,aAAaE,cAC9ColB,QAASF,EAAYtuB,KAAIsX,IAAA,IAAC,GAAErb,GAAIqb,EAAA,OAAKrb,CAAE,IACvCwyB,QAASF,EAAYvuB,KAAIgY,IAAA,IAAC,GAAE/b,GAAI+b,EAAA,OAAK/b,CAAE,MAExCrB,IAEHwD,EAAAA,EAAAA,IAAU/D,EAAO,GAErB,KAGFe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,KAAEqM,EAAI,MAAE/M,GAAQC,EAAAA,EAAAA,OAAsBS,EACtCkxB,EAAU7kB,GAAO+mB,EAAAA,GAAAA,IAAiB/mB,GAAQA,EAEhDtN,GAAS8O,EAAAA,EAAAA,IAAmB9O,EAAQ,CAClCsN,OACApM,MAAO,GACP+N,cAAe,KACV3N,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsO,aAAaI,cAC9ChL,KAAM,CACJyuB,gBAAY7xB,EACZyzB,SAAU,GACV3B,aAAc,KAGjBpyB,IACHwD,EAAAA,EAAAA,IAAU/D,GAEV,MAAM,OAAES,IAAWa,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsO,aAEjDojB,GAAqBjyB,EAAQ,GAAI,YAAQa,EAD5BJ,GAASsC,EAAAA,EAAAA,IAAW/C,EAAQS,QAAUI,EACOsxB,EAAS7kB,EAAM/M,EAAM,KAGjFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,KAAEa,EAAI,MAAEvB,GAAQC,EAAAA,EAAAA,OAAsBS,GACtC,MACJC,EAAK,cAAE+N,EAAa,OAAExO,EAAM,KAAE6M,IAC5BhM,EAAAA,EAAAA,IAAetB,EAAQO,GAAOsO,aAC5BsjB,EAAU7kB,GAAO+mB,EAAAA,GAAAA,IAAiB/mB,GAAQA,EAC1CqlB,EAAgB1jB,IAAgBnN,IAAsC6wB,aAI5EV,GAAqBjyB,EAAQkB,EAAOY,EAAM6wB,EAF7BlyB,GAASsC,EAAAA,EAAAA,IAAW/C,EAAQS,QAAUI,EAEWsxB,EAAS7kB,EAAM/M,EAAM,KC7ErFQ,EAAAA,EAAAA,IAAiB,2BAA2BuZ,MAAOta,EAAQgB,EAASC,KAClE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACnEqO,EAAOnO,GAASsC,EAAAA,EAAAA,IAAW/C,EAAQS,QAAUI,EACnD,IAAI8yB,GAAgBY,EAAAA,EAAAA,IAAwBv0B,EAAQO,GACpD,IAAKqO,IAAS+kB,IAAkBjzB,EAC9B,OAGF,MAAM,MAAEQ,EAAK,QAAE2O,GAAY8jB,EACrB9W,EAAWhN,GAAS8iB,aAE1B,IAAIc,EAMJ,GALI/yB,IAAamB,EAAAA,KAEf4xB,GADmBlrB,EAAAA,EAAAA,IAAiBvI,EAAQS,EAASC,IAC1B+yB,eAGxBvyB,EACH,OAGF,MAAMgF,QAAeqX,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD3O,OACA9M,KAAM,OACNZ,QACAuyB,eACAxd,MAAOue,EAAAA,IACP3X,aAGF,IAAK3W,EACH,OAGF,MAAM,MACJiJ,EAAK,MAAEqO,EAAK,SAAE9X,EAAQ,WAAEgtB,EAAU,aAAEC,GAClCzsB,EAEE8X,GAAOC,EAAAA,EAAAA,IAAqBvY,EAAU,MACtCguB,EAAczrB,OAAOC,KAAK8V,GAAMrY,IAAI0C,QAE1CrI,GAASyJ,EAAAA,EAAAA,MAETkqB,GAAgBY,EAAAA,EAAAA,IAAwBv0B,EAAQO,GAC3CozB,GAAiBzyB,IAAUyyB,EAAczyB,QAI9ClB,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,OACtDnP,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACtDxd,GAASoe,EAAAA,EAAAA,IAAoBpe,EAAQ4O,EAAKhN,GAAIoc,GAC9Che,GAASy0B,EAAAA,EAAAA,IAA6Bz0B,EAAQ4O,EAAKhN,GAAIlB,EAAUgzB,EAAahB,EAAYC,EAAcpyB,IACxGwD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMkO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BkzB,GAAgBC,EAAAA,EAAAA,IAAyB5zB,EAAQO,GAEvD,IAAKqO,IAAS+kB,EACZ,OAGF,MAAQe,YAAa5yB,EAAI,cAAEmN,GAAkB0kB,EAEvC9W,GADiB/a,GAAQmN,GAAiBA,EAAcnN,KAC7B6wB,aAE5B7wB,GAIAyxB,GAAkBvzB,EAAQ4O,EAAMlO,EAAUoB,EAAM+a,OAAUhc,EAAWN,EAAM,KAGlFQ,EAAAA,EAAAA,IAAiB,wBAAwBuZ,MAAOta,EAAQgB,EAASC,KAC/D,MAAM,UAAE0zB,EAAS,MAAEp0B,GAAQC,EAAAA,EAAAA,OAAsBS,GAE3C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMmO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAMvH,QAAkBkW,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7D3O,OACA+lB,cAGGttB,GAILrG,EAAQ0H,aAAa,CACnBjI,OAAQmO,EAAKhN,GACbyF,YACA9G,SACA,KErHJQ,EAAAA,EAAAA,IAAiB,mBAAmBuZ,MAAOta,EAAQgB,EAASC,KAC1D,MAAM,SAAE+sB,EAAQ,MAAEztB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAIF,IAAIa,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8Q,WAAW4O,WAAa2U,EAAAA,GAAAA,WACxD,OAGF50B,GAAS60B,EAAAA,EAAAA,IACP70B,EAAQS,EAAQ,CAAEq0B,yBAAqBj0B,EAAWk0B,qBAAiBl0B,GAAaN,IAElFwD,EAAAA,EAAAA,IAAU/D,GAEV,MAAM,OAAEkG,EAAM,MAAEsR,SAAiB+F,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEyQ,aAEhEhuB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg1B,EAAAA,EAAAA,IACPh1B,GAAmB,IAAXkG,EAAkB0uB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0Br0B,GAEpFP,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxCq0B,qBAAgC,IAAX5uB,EACrB6uB,gBAAiB/G,EACjBxW,SACCjX,IACHwD,EAAAA,EAAAA,IAAU/D,QAEKa,IAAXqF,GACFlF,EAAQi0B,sBAAsB,CAAEhf,MAAO,iBAAkB1V,SAC3D,KAGFQ,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,SAAE+sB,EAAQ,MAAEztB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAMmO,QAAasmB,EAAAA,EAAAA,IAAmBl1B,EAAQgB,EAASP,EAAQF,GAC/D,IAAKqO,EAAM,OAEX5O,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQ40B,EAAAA,GAAAA,WAA+Br0B,IACzEwD,EAAAA,EAAAA,IAAU/D,GAEV,MAAMkG,QAAeqX,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE3O,OAAMof,aAExDhuB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQkG,EAAS0uB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0Br0B,GAC3GP,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxCq0B,yBAAqBj0B,EACrBk0B,qBAAiBl0B,EACjB2W,WAAO3W,GACNN,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzDqO,EAAOnO,IAAUsC,EAAAA,EAAAA,IAAW/C,EAAQS,GACrCA,GAAWmO,IAIhB2O,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE3O,QAAO,KAGxC7N,EAAAA,EAAAA,IAAiB,4BAA4B,CAACf,EAAQgB,EAASC,KAC7D,MAAM,OAAER,EAAM,OAAE00B,EAAM,MAAE50B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtDjB,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CAAE20B,cAAeD,GAAU50B,IACrEwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OAAER,EAAM,OAAE00B,EAAM,MAAE50B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhDwrB,EAAS0I,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYx0B,GAEnEb,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQgsB,EAAQlsB,IAClDwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BuZ,MAAOta,EAAQgB,EAASC,KAClE,MAAM,OACJR,EAAM,QAAE60B,EAAO,UAAEC,EAAS,MAAEtf,EAAK,MAAE1V,GAAQC,EAAAA,EAAAA,OACzCS,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B+0B,GAAQzR,EAAAA,EAAAA,IAAW/jB,EAAQs1B,GAAWt1B,EAAOmY,eACnD,IAAK0N,IAAS2P,EAAO,OAErB,MAAMtvB,QAAeqX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDsI,OAAM2P,QAAOD,YAAWtf,UAE1B,IAAK/P,EACH,OAEFlG,GAASyJ,EAAAA,EAAAA,MACT,MAAM,QAAEgsB,EAAO,MAAEjY,GAAUtX,EAE3BlG,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OAEtD,MAAMiP,EAAS8I,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3Dz1B,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQgsB,EAAQlsB,IAClDwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BuZ,MAAOta,EAAQgB,EAASC,KACjE,MAAM,OACJR,EAAM,KAAEgQ,EAAI,UAAE8kB,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE/kB,EAAK,MAAEvQ,GAAQC,EAAAA,EAAAA,OAC/ES,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKolB,EAAM,OAEX,MAAM3f,QAAeqX,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDsI,OACApV,OACA8kB,YACAI,aACAC,aACAC,kBACA/kB,UAEF,IAAK5K,EACH,OAGF,MAAM,UAAE4vB,EAAS,UAAEC,EAAS,MAAEvY,GAAUtX,EAExClG,GAASyJ,EAAAA,EAAAA,MACT,MAAM,WAAE4H,IAAe/P,EAAAA,EAAAA,IAAetB,EAAQO,GACxCk1B,GAAWpkB,EAAWC,SAAS7Q,GAAQg1B,SAAW,IACrDtxB,QAAQ0sB,GAAYA,EAAQpgB,OAASqlB,EAAUrlB,OAC5CilB,EAAiB,IAAKrkB,EAAWC,SAAS7Q,GAAQi1B,gBAAkB,IAEtEK,EAAUR,UACZG,EAAenmB,QAAQwmB,GAEvBN,EAAQlvB,KAAKwvB,GAGf/1B,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OAEtDxd,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxCg1B,UACAC,kBACCn1B,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,OACJR,EAAM,WAAEk1B,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE/kB,EAAK,MAAEvQ,GAAQC,EAAAA,EAAAA,OAC9DS,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKolB,EAAM,OAEX,MAAM3f,QAAeqX,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CsI,OACA8P,aACAC,aACAC,kBACA/kB,UAEF,IAAK5K,EACH,OAGFlG,GAASyJ,EAAAA,EAAAA,MACT,MAAMgsB,GAAUn0B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8Q,WAAWC,SAAS7Q,GAAQg1B,SAAW,GACrFz1B,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxCg1B,QAAS,IAAIA,EAASvvB,IACrB3F,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4BuZ,MAAOta,EAAQgB,EAASC,KACnE,MAAM,OACJR,EAAM,KAAEgQ,EAAI,MAAElQ,GAAQC,EAAAA,EAAAA,OACpBS,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKolB,EAAM,OAMX,UAJqBtI,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDsI,OACApV,SAGA,OAGFzQ,GAASyJ,EAAAA,EAAAA,MACT,MAAMusB,GAAkB10B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8Q,WAAWC,SAAS7Q,GAC1ET,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxCg1B,QAASO,GAAiBP,SAAStxB,QAAQgxB,GAAWA,EAAO1kB,OAASA,IACtEilB,eAAgBM,GAAiBN,gBAAgBvxB,QAAQgxB,GAAWA,EAAO1kB,OAASA,KACnFlQ,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oCAAoCuZ,MAAOta,EAAQgB,EAASC,KAC3E,MAAM,OACJR,EAAM,QAAE60B,EAAO,MAAE/0B,GAAQC,EAAAA,EAAAA,OACvBS,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B+0B,GAAQzR,EAAAA,EAAAA,IAAW/jB,EAAQs1B,GAAWt1B,EAAOmY,eAC9C0N,GAAS2P,SAEOjY,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/DsI,OACA2P,YAMFx1B,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxCi1B,eAAgB,IACfn1B,IACHwD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BuZ,MAC1Cta,EAAQgB,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAEgQ,EAAI,WAAEwlB,EAAU,aAAEC,EAAY,MAAEjgB,EAAK,MAAE1V,GAAQC,EAAAA,EAAAA,OACrDS,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B01B,EAAaD,GAAenS,EAAAA,EAAAA,IAAW/jB,EAAQk2B,QAAgBr1B,EACrE,IAAKglB,GAASqQ,IAAiBC,EAAa,OAE5C,MAAMjwB,QAAeqX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDsI,OACApV,OACAwlB,aACAE,aACAlgB,UAEF,IAAK/P,EACH,OAEF,MAAM,UAAEkwB,EAAS,MAAE5Y,GAAUtX,EAE7BlG,GAASyJ,EAAAA,EAAAA,MACT,MAAM4sB,GAAoB/0B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8Q,WAAWC,SAAS7Q,IAAS40B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO1kB,OAASA,IAIpEzQ,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxC40B,WAAY,IACPgB,EACHD,cAED71B,GACHP,GAASue,EAAAA,EAAAA,IAASve,EAAQwd,IAC1BzZ,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4BuZ,MAC3Cta,EAAQgB,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAEgQ,EAAI,WAAEwlB,EAAU,aAAEC,EAAY,MAAEjgB,EAAK,MAAE1V,GAAQC,EAAAA,EAAAA,OACrDS,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B01B,EAAaD,GAAenS,EAAAA,EAAAA,IAAW/jB,EAAQk2B,QAAgBr1B,EACrE,IAAKglB,GAASqQ,IAAiBC,EAAa,OAE5C,MAAMjwB,QAAeqX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDsI,OACApV,OACAwlB,aACAE,aACAlgB,QACAqgB,aAAa,IAEf,IAAKpwB,EACH,OAEF,MAAM,UAAEkwB,EAAS,MAAE5Y,GAAUtX,EAE7BlG,GAASyJ,EAAAA,EAAAA,MACT,MAAM4sB,GAAoB/0B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO8Q,WAAWC,SAAS7Q,IAAS40B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO1kB,OAASA,IAGpEzQ,GAAS60B,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CACxC40B,WAAY,IACPgB,EACHE,WAAYH,IAEb71B,GACHP,GAASue,EAAAA,EAAAA,IAASve,EAAQwd,IAC1BzZ,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBuZ,MAAOta,EAAQgB,EAASC,KAC/D,MAAM,OACJR,EAAM,WAAEw1B,EAAa,EAAC,aAAEC,EAAY,MAAEjgB,EAAQ,GAC5ChV,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B01B,EAAaD,GAAenS,EAAAA,EAAAA,IAAW/jB,EAAQk2B,QAAgBr1B,EACrE,IAAKglB,GAASqQ,IAAiBC,EAAa,OAE5C,MAAMjwB,QAAeqX,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDsI,OACAoQ,aACAE,aACAlgB,QACAqgB,aAAa,IAEf,IAAKpwB,EACH,OAEF,MAAM,UAAEkwB,EAAS,MAAE5Y,GAAUtX,EAE7BlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAE+1B,aAAcJ,IACpDp2B,GAASue,EAAAA,EAAAA,IAASve,EAAQwd,IAC1BzZ,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBuZ,MAAOta,EAAQgB,EAASC,KAC9D,MAAM,OACJR,EAAM,OAAEwP,EAAM,WAAEwmB,GACdx1B,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BqjB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQiQ,GAChC,IAAK4V,IAAS/B,EAAM,OAOpB,UALqBvG,EAAAA,EAAAA,IAAQ,sBAAuB,CAClDsI,OACA/B,OACA2S,eAEW,OAEbz2B,GAASyJ,EAAAA,EAAAA,MACT,MAAMitB,GAAa3zB,EAAAA,EAAAA,IAAW/C,EAAQS,GACjCi2B,IAEL12B,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClC+1B,aAAcE,EAAWF,cAAcryB,QAAQwyB,GAAaA,EAAS1mB,SAAWA,OAElFlM,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BuZ,MAAOta,EAAQgB,EAASC,KAClE,MAAM,OACJR,EAAM,WAAEg2B,EAAU,KAAEhmB,GAClBxP,EACE4kB,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQS,GAC3BolB,SAEgBtI,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDsI,OACA4Q,aACAhmB,WAIFzQ,GAASyJ,EAAAA,EAAAA,OACU1G,EAAAA,EAAAA,IAAW/C,EAAQS,KAGtCT,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAE+1B,aAAc,KACpDx2B,GAAS8oB,EAAAA,EAAAA,IAAmB9oB,EAAQS,EAAQ,CAC1Cm2B,mBAAoB,GACpBC,gBAAiB,KAEnB9yB,EAAAA,EAAAA,IAAU/D,IAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBuZ,MAAOta,EAAQgB,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACb2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC3BmO,SAEgB2O,EAAAA,EAAAA,IAAQ,sBAAuB3O,KAGpD5O,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClCwX,cAAUpX,KAEZkD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6BuZ,MAAOta,EAAQgB,EAASC,KACpE,MAAM,OACJgP,EAAM,KAAE6mB,EAAI,UAAEC,EAAS,MAAEx2B,GAAQC,EAAAA,EAAAA,OAC/BS,EAEE6iB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQiQ,GAChC,IAAK6T,EAAM,OAEX9jB,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQ40B,EAAAA,GAAAA,WAA+Br0B,IACzEwD,EAAAA,EAAAA,IAAU/D,GAEV,MAAMkG,QAAeqX,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDuG,OACAgT,OACAC,cAGF,IAAK7wB,EAKH,OAJAlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQ40B,EAAAA,GAAAA,MAA0Br0B,QACpEwD,EAAAA,EAAAA,IAAU/D,GAKZA,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,QAC7DzZ,EAAAA,EAAAA,IAAU/D,GAEV,MAAM,GAAE4B,EAAE,WAAEipB,GAAe/G,EAE3B,UADsBvG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3b,KAAIipB,eAKnD,OAHA7qB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQ40B,EAAAA,GAAAA,MAA0Br0B,QACpEwD,EAAAA,EAAAA,IAAU/D,GAIZgB,EAAQg2B,kBAAkB,CAAEC,UAAWhnB,IAEvCjQ,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQ40B,EAAAA,GAAAA,SAA6Br0B,IACvEwD,EAAAA,EAAAA,IAAU/D,GAEN82B,IAASC,GACX/1B,EAAQuL,iBAAiB,CACvB3G,QAASN,EAAAA,GAAuB,4CAA4C4xB,EAAAA,EAAAA,IAAuBpT,IACnGvjB,SAEJ,KAGFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE1D,OAAO4zB,EAAAA,EAAAA,IAAiB70B,EAAQS,EAAQ,CAAE+W,WAAO3W,GAAaN,EAAM,KDjbtEQ,EAAAA,EAAAA,IAAiB,QAAQ,CAACf,EAAQgB,KAC5BsW,EAAAA,KAEFC,QAAQ4f,IAAI,kBAGVrD,IACFrpB,aAAaqpB,IAGf9zB,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IAAKA,EAAQo3B,WAAW,IACjCrzB,EAAAA,EAAAA,IAAU/D,GAGV8zB,GAAuBrwB,OAAO+F,YAAW,KACvCxJ,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IAAKA,EAAQo3B,WAAW,IACjCrzB,EAAAA,EAAAA,IAAU/D,GACV8zB,QAAuBjzB,CAAS,GAvBL,MA0B7B,MAAM,aAAEw2B,EAAY,uBAAEC,GAA2Bt2B,EAEjDq2B,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAWnd,gBAwBfA,eAA6Dta,EAAWgB,GACtE,IAAI02B,GAAoB,EAExB13B,GAASyJ,EAAAA,EAAAA,MAET,IAAIkuB,GAAW,EAGf,MAEMC,EAFe3vB,OAAOC,KAAKlI,EAAO0F,SAAS4L,UAEbnL,QAAwD,CAACC,EAAK3F,KAChG2F,EAAI3F,GAAUwH,OACXC,KAAKlI,EAAO0F,SAAS4L,SAAS7Q,GAAQo3B,aACtC1xB,QAAwC,CAAC2xB,EAAMp3B,KAC9Co3B,EAAKzvB,OAAO3H,IAAa,CACvBkjB,OAAOU,EAAAA,EAAAA,IAAYtkB,EAAQS,EAAQ4H,OAAO3H,IAC1CokB,WAAWC,EAAAA,EAAAA,IAAgB/kB,EAAQS,EAAQ4H,OAAO3H,IAClDq3B,cAAcC,EAAAA,EAAAA,GAAmBh4B,EAAQS,EAAQ4H,OAAO3H,IACxDmH,cAAcC,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQ4H,OAAO3H,KAGnDo3B,IACN,CAAC,GACC1xB,IACN,CAAC,GAGJ,IAAK,MAAQxE,GAAIrB,KAAW0H,OAAOoR,OAAOrZ,EAAOsZ,SAAU,CACzDtZ,GAASyJ,EAAAA,EAAAA,MACT,MAAQhJ,OAAQw3B,EAAev3B,SAAUggB,IAAoB/f,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACnG23B,EAAiBxX,GAAmB7e,EAAAA,GACpCs2B,EAAazX,GAAmBuX,GAClC1vB,EAAAA,EAAAA,IAAiBvI,EAAQi4B,EAAevX,QAAmB7f,EACzD8X,EAAcsf,EAAgBj4B,EAAOmP,MAAM6O,KAAKia,QAAiBp3B,EACvE,GAAIo3B,GAAiBtf,EAAa,CAChC,MAAMzS,QA4Ga0I,EA5GkB+J,EA4GHjY,EA5GgBw3B,EA4GEE,EA5GcD,GAAY3R,wBA6G3EjJ,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9B3O,OACAlO,WACAmc,SAAUub,GAAmBxpB,EAAK4X,uBAClCrJ,YAAarP,KAAKwK,MAAM+E,EAAAA,IAAqB,GAAK,GAClDpH,MAAOoH,EAAAA,OAjHLrd,GAASyJ,EAAAA,EAAAA,MACT,MAAQhJ,OAAQ43B,IAAqB13B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAEjF,GAAI2F,GAAUmyB,IAAqBJ,EAAe,CAChD,MAAMK,GAAsB7yB,EAAAA,EAAAA,IAAmBzF,EAAQi4B,GACjDva,EAAgBua,IAAkB5qB,EAAAA,IACpCrN,EAAOkN,qBAAqB/I,QAAO/D,IAAA,IAAC,UAAEwd,GAAWxd,EAAA,OAAMwd,CAAS,IAAEjY,KAAIqI,IAAA,IAAC,QAAEpI,GAASoI,EAAA,OAAKpI,CAAO,IAC9F,GACE2yB,EAAoB5f,EAAY3V,SAAW2V,EAAYE,OACzD5Q,OAAOoR,OAAOV,EAAYE,QACzBlT,KAAIsX,IAAA,IAAC,cAAEzU,GAAeyU,EAAA,OAAKqb,EAAoB9vB,EAAc,IAC7DrE,OAAOwD,SACR,GAEEmW,EAAe,GAAoBC,OAAO7X,EAAOR,SAAUgY,GAC3D8a,EAAmC1a,EAAYC,OAAOwa,GACtDva,GAAOC,EAAAA,EAAAA,IAAqBua,EAAkC,MAC9D9Z,EAAYZ,EAAYnY,KAAIgY,IAAA,IAAC,GAAE/b,GAAI+b,EAAA,OAAK/b,CAAE,IAE3C+1B,IACH33B,EAAS,IACJA,EACH0F,SAAU,IACL1F,EAAO0F,SACV4L,SAAU,CAAC,IAIfrJ,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ+R,IAAwB,IAArBjc,GAAI62B,GAAY5a,EACvD7d,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B04B,WAAY,CAAC,GACZD,EAAW,IAEhBd,GAAW,GAGb33B,GAASoe,EAAAA,EAAAA,IAAoBpe,EAAQi4B,EAAeja,GACpDhe,GAASse,EAAAA,EAAAA,IAAgBte,EAAQi4B,EAAeC,EAAgBxZ,GAC5DyZ,GAAYhQ,kBACdnoB,GAASumB,EAAAA,EAAAA,IAAiBvmB,EAAQi4B,EAAeC,EAAgBC,IAGnElwB,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQggB,IAAwB,IAArBlqB,GAAI62B,GAAY3M,EACvD,MAAQrrB,OAAQk4B,EAAaj4B,SAAUk4B,IAAkBj4B,EAAAA,EAAAA,IAAyBX,EAAQy4B,IAAe,CAAC,EACtGE,IAAgBV,GAAiBW,IAAkBV,IACrDl4B,GAASmf,EAAAA,EAAAA,IAAuBnf,EAAQi4B,EAAeC,EAAgBxZ,EAAW+Z,GACpF,IAEFz4B,GAAS64B,EAAAA,EAAAA,IAAY74B,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOiJ,MAAO,OAChEnP,GAAS84B,EAAAA,EAAAA,IAAY94B,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAC5DtX,EAAOuX,mBAAmBtd,SAC5BH,GAASye,EAAAA,EAAAA,IAAkBze,EAAQi4B,EAAe/xB,EAAOuX,qBAG3Dia,GAAoB,CACtB,CACF,EAEA3zB,EAAAA,EAAAA,IAAU/D,GAEN2Y,GAAa3V,UACfhC,EAAQ+3B,WAAW,CAAEt4B,OAAQw3B,EAAgB9mB,OAAO,IAChDuP,GAAmBA,IAAoB7e,EAAAA,IACzCb,EAAQg4B,cAAc,CACpBv4B,OAAQw3B,EAAgBxhB,QAASiK,EAAiBuY,wBAAwB,IAIlF,CAuCF,IAAyBrqB,EAAelO,EAAkB03B,EArCxDp4B,GAASyJ,EAAAA,EAAAA,MAEJiuB,IACH13B,EAAS,IACJA,EACH0F,SAAU,IACL1F,EAAO0F,SACV4L,SAAU,CAAC,IAIfrJ,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQotB,IAAwB,IAArBt3B,GAAI62B,GAAYS,EACvDl5B,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B04B,WAAY,CAAC,GACZD,EAAW,KAMlBxwB,OAAOC,KAAK0vB,GAAgB9rB,SAASrL,IACnC,MAAM04B,EAAUvB,EAAen3B,GAC/BwH,OAAOC,KAAKixB,GAASrtB,SAASpL,IAC5BV,GAASo5B,EAAAA,EAAAA,IAAap5B,EAAQS,EAAQ4H,OAAO3H,GAAWk3B,EAAen3B,GAAQ4H,OAAO3H,IAAW,GACjG,KAGJqD,EAAAA,EAAAA,IAAU/D,GAEViI,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQutB,IAAmB,IAAhBz3B,GAAIrB,GAAO84B,EAClD,MAAQ54B,OAAQ64B,EAAajyB,UAAWkyB,IAAmBj4B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOwI,YACrFuwB,GAAeC,KAAmBzkB,EAAAA,EAAAA,IAAkB9U,EAAQs5B,EAAaC,IAC3Ev4B,EAAQw4B,iBAAiB,CAAEj5B,SAC7B,GAEJ,CApKYk5B,CAAuBz5B,EAAQgB,GAErChB,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACH05B,aAAc9sB,KAAKC,MACnBuqB,WAAW,IAEbrzB,EAAAA,EAAAA,IAAU/D,GAENsX,EAAAA,KAEFC,QAAQ4f,IAAI,oBAGdwC,EAAAA,EAAAA,MACAtC,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/Cja,EAAAA,EAAAA,IAAQ,oBACb+Z,GAAwB,GAE1B,KA8JJte,EAAAA,EAAAA,KAAahZ,IACX,MAAM,gBAAE45B,EAAe,UAAEC,GAAc75B,GACjC,YAAEuZ,IAAgBjY,EAAAA,EAAAA,IAAetB,IAClCuZ,GAAgBqC,IAAgBge,kBAAoBA,GACpDhe,IAAgBie,YAAcA,GAKX,yBAApBD,GAA4D,4BAAdC,IAEhD3gB,EAAAA,EAAAA,MAAa4gB,OANble,GAAiB5b,CASI,KE3PzBe,EAAAA,EAAAA,IAAiB,cAAcuZ,MAAOta,EAAQgB,EAASC,KACrD,MAAM,OACJR,EAAM,OACNklB,EAAM,YACNC,EAAW,MACXrlB,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMmO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,aAAc,CACzCsI,KAAMjX,EACN+W,SACAC,gBAGF5kB,EAAQuL,iBAAiB,CACvB3G,QAASM,GACL4f,EAAAA,EAAAA,IAAU,2BACV,2EACJvlB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsBuZ,MAAOta,EAAQgB,EAASC,KAC7D,MAAM,OACJR,EAAM,OACNklB,EAAM,YACNC,EAAW,MACXmU,EAAK,MACLx5B,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAMmO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,IAASmrB,EACZ,OAGF,MAAM7zB,QAAeqX,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDsI,KAAMjX,EACNmrB,QACApU,SACAC,gBAGF5kB,EAAQuL,iBAAiB,CACvB3G,QAASM,GACL4f,EAAAA,EAAAA,IAAU,2BACV,2EACJvlB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsBuZ,UACrC,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,uBACxBrX,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHg6B,eAAgB,CACdC,OAAQ/zB,EAAOg0B,eACfC,cAAelyB,OAAOC,KAAKhC,EAAOg0B,gBAClCE,QAASl0B,EAAOk0B,WAGpBr2B,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,0BAA0BuZ,MAAOta,EAAQgB,EAASC,KACjE,MAAM,KAAEoR,GAASpR,EAGjB,UADqBsc,EAAAA,EAAAA,IAAQ,yBAA0BlL,GAErD,OAGFrS,GAASyJ,EAAAA,EAAAA,MAET,MAAQ,CAAC4I,GAAOgoB,KAAoBC,GAAgBt6B,EAAOg6B,eAAeC,OAE1Ej6B,EAAS,IACJA,EACHg6B,eAAgB,CACdC,OAAQK,EACRH,cAAen6B,EAAOg6B,eAAeG,cAAch2B,QAAQo2B,GAAOA,IAAOloB,OAG7EtO,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,8BAA8BuZ,UAE7C,UADqBiD,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAMid,GADNx6B,GAASyJ,EAAAA,EAAAA,OACyBuwB,eAAeG,cAC9ChtB,MAAMkF,GAASrS,EAAOg6B,eAAeC,OAAO5nB,GAAMooB,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiB16B,EAAOg6B,eAAeC,OAAOO,GAEpDx6B,EAAS,IACJA,EACHg6B,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpBz2B,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBuZ,MAAOta,EAAQgB,EAASC,KAChE,MAAM,KAAEoR,EAAI,gBAAEsoB,EAAe,sBAAEC,GAA0B35B,QACpCsc,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDlL,OACAsoB,kBACAC,4BAOF56B,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHg6B,eAAgB,IACXh6B,EAAOg6B,eACVC,OAAQ,IACHj6B,EAAOg6B,eAAeC,OACzB,CAAC5nB,GAAO,IACHrS,EAAOg6B,eAAeC,OAAO5nB,WACRxR,IAApB85B,EAAgC,CAAEA,wBAAoB95B,UAC5BA,IAA1B+5B,EAAsC,CAAEA,8BAA0B/5B,OAK9EkD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,KAAE45B,GAAS55B,QAEIsc,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEsd,WAMnD76B,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHg6B,eAAgB,IACXh6B,EAAOg6B,eACVI,QAASS,KAGb92B,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBuZ,UACxC,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,0BAC7B,IAAKrX,EACH,OAEF,MAAM,MAAEsX,EAAK,kBAAEsd,GAAsB50B,EACrClG,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OAEtDxd,EAAS,IACJA,EACH+6B,kBAAmB,CACjBd,OAAQa,EACRX,cAAelyB,OAAOC,KAAK4yB,MAG/B/2B,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6BuZ,MAAOta,EAAQgB,EAASC,KACpE,MAAM,KAAEoR,GAASpR,EAGjB,UADqBsc,EAAAA,EAAAA,IAAQ,4BAA6BlL,GAExD,OAGFrS,GAASyJ,EAAAA,EAAAA,MAET,MAAQ,CAAC4I,GAAOgoB,KAAoBC,GAAgBt6B,EAAO+6B,kBAAkBd,OAE7Ej6B,EAAS,IACJA,EACH+6B,kBAAmB,CACjBd,OAAQK,EACRH,cAAen6B,EAAO+6B,kBAAkBZ,cAAch2B,QAAQo2B,GAAOA,IAAOloB,OAGhFtO,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iCAAiCuZ,gBAC3BiD,EAAAA,EAAAA,IAAQ,mCAK7Bvd,GAASyJ,EAAAA,EAAAA,MAETzJ,EAAS,IACJA,EACH+6B,kBAAmB,CACjBd,OAAQ,CAAC,EACTE,cAAe,MAGnBp2B,EAAAA,EAAAA,IAAU/D,GAAO,ICjNnB,MACMg7B,IAAwB9N,EAAAA,EAAAA,KAAUtQ,GAAOA,KAAM,KAAK,GC7BnD,SAASqe,GACdj7B,EAAWguB,EAAkBkN,GAE1B,QAAAj7B,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADCC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM+B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,OAAOgC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bm7B,WAAY,IACPh5B,EAASg5B,WACZC,WAAY,IACPj5B,EAASg5B,WAAWC,WACvB,CAACpN,GAAWkN,KAGf36B,EACL,CAEO,SAAS86B,GACdr7B,EAAWwa,GAER,QAAAwC,EAAA9c,UAAAC,OAAA6N,EAAA,IAAA3N,MAAA2c,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlP,EAAAkP,EAAA,GAAAhd,UAAAgd,GAAA,IADC3c,GAAQC,EAAAA,EAAAA,OAAkBwN,EAE9B,OAAOzL,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bm7B,WAAY,KACP75B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO46B,WACjC3gB,cAEDja,EACL,EDKAQ,EAAAA,EAAAA,IAAiB,gBAAgBuZ,MAAOta,EAAQgB,EAASC,KACvD,MAAM,OAAEgP,GAAWhP,EACb6iB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQiQ,GAChC,IAAK6T,EACH,OAGF,MAAM,GAAEliB,EAAE,WAAEipB,GAAe/G,EACrB5d,QAAeqX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3b,KAAIipB,eACpD,IAAK3kB,GAAQ4d,KAAM,OAEnB9jB,GAASyJ,EAAAA,EAAAA,MACT,MAAMkhB,GAAWC,EAAAA,EAAAA,IAAmB5qB,EAAQiQ,IACpC6T,KAAMwX,EAAS3Q,SAAU4Q,GAAgBr1B,GACpB4d,EAAK0X,aAAeF,EAAQE,YAC1B7Q,GAAU8Q,cAAc75B,KAAO25B,GAAaE,cAAc75B,IACzD+oB,GAAU+Q,eAAe95B,KAAO25B,GAAaG,eAAe95B,IAC5D+oB,GAAUgR,eAAe/5B,KAAO25B,GAAaI,eAAe/5B,KAEvFkiB,EAAK8X,QAAQz7B,QAChBa,EAAQg2B,kBAAkB,CAAEC,UAAWhnB,GACzC,KAGFlP,EAAAA,EAAAA,IAAiB,YAAYuZ,MAAOta,EAAQgB,EAASC,KACnD,MAAM,OAAEgP,GAAWhP,EACb6iB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQiQ,GAChC,IAAK6T,EACH,OAGF,MAAM5d,QAAeqX,EAAAA,EAAAA,IAAQ,aAAc,CAAEC,MAAO,CAACsG,KACrD,IAAK5d,EACH,OAGF,MAAM,MAAEsX,EAAK,iBAAEqe,GAAqB31B,EAEpClG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS84B,EAAAA,EAAAA,IAAY94B,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACzDxd,GAAS87B,EAAAA,EAAAA,IAAoB97B,EAAQ,IAChCA,EAAOwd,MAAMue,gBACbF,KAEL93B,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgBuZ,UAC/B,MAAQ0hB,UAAU,gBAAEC,IAAsBj8B,EAE1C,GAAOi8B,MAAmB1uB,EAAAA,EAAAA,MAAkB0uB,EArDX,IAsD/B,OAGF,MAAM/1B,QAAeqX,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKrX,EACH,OAGF,MAAM,IAAEmE,EAAG,MAAEmT,GAAUtX,EAEvBlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACtDxd,EAAS,IACJA,EACHg8B,SAAU,IACLh8B,EAAOg8B,SACV5H,QAAS/pB,EACT4xB,iBAAiB1uB,EAAAA,EAAAA,SAGrBxJ,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmBuZ,UAClC,MAAM4hB,QAAoB3e,EAAAA,EAAAA,IAAQ,oBAClC,IAAK2e,EACH,OAGFl8B,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBie,EAAY1e,MAAO,OAClExd,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqBie,EAAY/sB,MAAO,OAClEnP,GAASm8B,EAAAA,EAAAA,IAAgBn8B,EAAQk8B,EAAYL,kBAG7C,MAAMO,EAAoBtY,GAAmBA,EAAKuY,UAAYvY,EAAKwY,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcR,EAAY1e,MAAMzX,MAAK,CAACwhB,EAAGC,IAC7C+U,EAASI,QAAQP,EAAiB7U,GAAI6U,EAAiB5U,MACtDrjB,QAAQ2f,IAAUA,EAAK8Y,SAE1B58B,EAAS,IACJA,EACHk8B,YAAa,CACX9H,QAASsI,EAAY/2B,KAAKme,GAASA,EAAKliB,QAG5CmC,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7Bwc,EAAAA,EAAAA,IAAQ,mBAAmB,KAGlCxc,EAAAA,EAAAA,IAAiB,mBAAmBuZ,MAAOta,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACzDujB,EAAOrjB,GAASsjB,EAAAA,EAAAA,IAAW/jB,EAAQS,QAAUI,EACnD,IAAKijB,IAAQiC,EAAAA,EAAAA,IAAUjC,IAASA,EAAK+Y,aAAaC,cAChD,OAGF,MAAMjvB,EAAQiW,EAAK+Y,aAAahvB,MAC1B3H,QAAeqX,EAAAA,EAAAA,IAAQ,mBAAoBuG,EAAKliB,GAAIkiB,EAAK+G,WAAahd,GAC5E,IAAK3H,EACH,OAGF,MAAM,MAAEiJ,EAAK,QAAEglB,EAAO,cAAE2I,GAAkB52B,EAE1ClG,GAASyJ,EAAAA,EAAAA,MACL0F,EAAMhP,SACRH,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,QAExDnP,GAAS+8B,EAAAA,EAAAA,IAAW/8B,EAAQ8jB,EAAKliB,GAAI,CACnCi7B,YAAa,CACXhvB,MAAOsmB,EAAQh0B,OAASg0B,EAAQA,EAAQh0B,OAAS,GAAK,IACtDkK,KAAKiM,EAAAA,EAAAA,KAAQwN,EAAK+Y,aAAaxyB,KAAO,IAAI0T,OAAOoW,IACjD2I,oBAIJ/4B,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBuZ,MAAOta,EAAQgB,EAASC,KACxD,MAAM,OACJgP,EAAM,QAAEnH,GAAU,EAAK,UAAEwzB,EAAS,SAAED,EAAQ,uBAAEW,EAAsB,MACpEz8B,GAAQC,EAAAA,EAAAA,OACNS,EAEE6iB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQiQ,GAChC,IAAK6T,EACH,OASF,IAAI5d,EACJ,GAPAlF,EAAQi8B,qBAAqB,CAAEx8B,OAAQwP,EAAQnH,YAE/C9I,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQ40B,EAAAA,GAAAA,WAA+Br0B,IACzEwD,EAAAA,EAAAA,IAAU/D,IAGL8jB,EAAKoZ,WAAapZ,EAAKqZ,YAC1Bj3B,QAAeqX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6f,MAAOtZ,EAAKqZ,YAAab,YAAWD,iBACzE,CACL,MAAM,GAAEz6B,EAAE,WAAEipB,GAAe/G,EAC3B5d,QAAeqX,EAAAA,EAAAA,IAAQ,gBAAiB,CACtC3b,KACAipB,aACAsS,YAAa,GACbb,YACAD,WACAW,0BAEJ,CAEI92B,IACFlF,EAAQq8B,iBAAiB,CAAE58B,OAAQwP,IAEnCjQ,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS+8B,EAAAA,EAAAA,IACP/8B,EACA8jB,EAAKliB,GACL,CACE06B,YACAD,cAGJt4B,EAAAA,EAAAA,IAAU/D,IAGZA,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg1B,EAAAA,EAAAA,IAAyBh1B,EAAQ40B,EAAAA,GAAAA,SAA6Br0B,GACvEP,GAASoQ,EAAAA,EAAAA,IAAsBpQ,EAAQO,IACvCwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBuZ,MAAOta,EAAQgB,EAASC,KACxD,MAAM,OAAEgP,GAAWhP,EAEb6iB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQiQ,GAEhC,IAAK6T,EACH,OAGF,MAAM,GAAEliB,EAAE,WAAEipB,GAAe/G,QAErBvG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3b,KAAIipB,cAAa,KAGpD9pB,EAAAA,EAAAA,IAAiB,qBAAqBuZ,MAAOta,EAAQgB,EAASC,KAC5D,MAAM,UAAEg2B,GAAch2B,EAChBq8B,GAAYC,EAAAA,EAAAA,IAAStG,GAE3B,IAAInT,EAAOwZ,GAAYvZ,EAAAA,EAAAA,IAAW/jB,EAAQi3B,QAAap2B,EACvD,MAAM+N,EAAQ0uB,OAA4Cz8B,GAAhCkC,EAAAA,EAAAA,IAAW/C,EAAQi3B,GAC7C,IAAKnT,IAASlV,EACZ,OAGF,IAAI+b,GAAWC,EAAAA,EAAAA,IAAmB5qB,EAAQi3B,GAC1C,GAAInT,IAAS6G,GAAU8Q,aAAc,CACnC,MAAM,GAAE75B,EAAE,WAAEipB,GAAe/G,EACrB5d,QAAeqX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3b,KAAIipB,eACpD,IAAK3kB,GAAQ4d,KACX,OAGFA,EAAO5d,EAAO4d,KACd6G,EAAWzkB,EAAOykB,QACpB,CAEA,MAAMzkB,QAAeqX,EAAAA,EAAAA,IAAQ,qBAAsBuG,EAAMlV,GACzD,IAAK1I,IAAWA,EAAO01B,OACrB,OAGF57B,GAASyJ,EAAAA,EAAAA,MAET,MAAM+zB,EAAa1Z,GAAQlV,GACrB,OAAEgtB,EAAM,MAAEpe,GAAUtX,EAC1B01B,EAAO71B,MAAMwhB,GAAOA,EAAE3lB,KAAO47B,GAAYhC,YAAc,EAAI,IAC3D,MAAME,EAAgB/Q,GAAU+Q,cAC1BC,EAAgBhR,GAAUgR,cAC5BD,GAAeE,EAAOr1B,KAAKm1B,GAC3BC,GAAeC,EAAOrsB,QAAQosB,GAElC37B,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OAGpDxd,EADEs9B,GACOP,EAAAA,EAAAA,IAAW/8B,EAAQi3B,EAAW,CAAE2E,YAEhC1X,EAAAA,EAAAA,IAAWlkB,EAAQi3B,EAAW,CAAE2E,YAG3C73B,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExCC,GAEA85B,IAAsB1gB,UACzB,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,cAAe,CAAErc,UAE9ClB,GAASyJ,EAAAA,EAAAA,MACT,MAAMspB,GAAqBzxB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOk9B,WAAWv8B,MAEpE,IAAKgF,IAAW6sB,GAAuB7xB,IAAU6xB,EAG/C,OAFA/yB,GAAS09B,EAAAA,EAAAA,IAA+B19B,GAAQ,EAAOO,QACvDwD,EAAAA,EAAAA,IAAU/D,GAIZ,MAAM,WAAEg0B,EAAU,YAAEE,GAAgBhuB,EAEpC,IAAI8J,EACAD,EACAikB,EAAW7zB,SACbH,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB+V,EAAY,OAC3DhkB,EAAegkB,EAAWruB,KAAIvF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,KAE1CsyB,EAAY/zB,SACdH,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBiW,EAAa,OAC5DnkB,EAAgBmkB,EAAYvuB,KAAIqI,IAAA,IAAC,GAAEpM,GAAIoM,EAAA,OAAKpM,CAAE,KAGhD5B,GAAS09B,EAAAA,EAAAA,IAA+B19B,GAAQ,EAAOO,GACvDP,GAAS8P,EAAAA,EAAAA,IAAiB9P,EAAQ,CAAEgQ,eAAcD,iBAAiBxP,IAEnEwD,EAAAA,EAAAA,IAAU/D,EAAO,GACjB,KAGJe,EAAAA,EAAAA,IAAiB,iBAAiBuZ,MAAOta,EAAQgB,EAASC,KACxD,MACEk8B,YAAaC,EAAK,UAAEd,EAAS,SAAED,EAAQ,MACvC97B,GAAQC,EAAAA,EAAAA,OACNS,EAEEiF,QAAeqX,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE6f,QAAOd,YAAWD,aAC7Dn2B,GASLlF,EAAQgD,SAAS,CAAEpC,GAAIsE,EAAQ3F,UAE/BP,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASoQ,EAAAA,EAAAA,IAAsBpQ,EAAQO,IACvCwD,EAAAA,EAAAA,IAAU/D,IAZRgB,EAAQuL,iBAAiB,CACvB3G,QAASN,EAAAA,GAAuB,qCAChC/E,SAUa,KAGnBQ,EAAAA,EAAAA,IAAiB,cAAc,CAACf,EAAQgB,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACbu8B,GAAaD,EAAAA,EAAAA,IAAS98B,IAAUsjB,EAAAA,EAAAA,IAAW/jB,EAAQS,IAAUsC,EAAAA,EAAAA,IAAW/C,EAAQS,GACjF+8B,IAIAjgB,EAAAA,EAAAA,IAAQ,aAAcigB,EAAW,KAGxCz8B,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,YAAE08B,EAAW,QAAEC,GAAY38B,GAE5Bsc,EAAAA,EAAAA,IAAQ,oBAAqBogB,EAAaC,EAAQ,I,gBExWzD,MAAMC,GAAkBrd,EAAAA,IAAUsd,EAAAA,GAEnB,MAAMC,GAGnBC,YAAoBC,EAA2BC,G,UAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,E,EAA2B,K,OAAA,G,iTAAA,gB,uFAC1E,CAEAC,kBACON,KAELO,KAAKC,UAAY56B,OAAOG,KAAK,mBAAe/C,EAAWu9B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEAt6B,KAAK8Q,GACH,GAAI0pB,KAAKC,UAKP,OAJAD,KAAKC,UAAWE,SAAS7tB,KAAOgE,EAChC0pB,KAAKC,UAAWG,aAChBJ,KAAKC,eAAYx9B,GAKnB,IAAKg9B,GAAiB,CACpB,MAAMY,EAAQh7B,OAAOG,KAAK8Q,OAAK7T,EAAWu9B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,gBACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAYx9B,CACnB,ECfF,MAAM+9B,GAAY,4BAEZC,IAAwB7tB,EAAAA,EAAAA,KAAU4L,GAAOA,KAAM,KAAK,GA0pB1DtC,eAAewkB,GACb9+B,EAAW++B,EAAcC,EAAoBC,SAEvC1hB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEwhB,MAAKE,iBAAgBD,cACxDh/B,GAASyJ,EAAAA,EAAAA,YACHy1B,GAAel/B,EACvB,CAEAsa,eAAe4kB,GAAsCl/B,EAAWqS,GAC9D,MAAMnM,QAAeqX,EAAAA,EAAAA,IAAQ,iBAAkB,CAAElL,SAC5CnM,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAC7Dxd,EAAS,IACJA,EACHm/B,WAAY,CACV9sB,KAAMnM,EAAOmM,KACb+sB,KAAMl5B,EAAOk5B,QAGjBr7B,EAAAA,EAAAA,IAAU/D,GACZ,CAgMA,SAASq/B,GACPr/B,EACAgB,EACA0T,EAAaxO,GAEb,QAAAjG,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IADIC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,GAAoB,YAAhB8F,EAAOpE,KAAoB,CAC7B9B,GAASyJ,EAAAA,EAAAA,MACT,MAAMtH,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASm9B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAER,EAAG,yBAAES,GAA6Bt5B,EAYlD,OAXAlG,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bs/B,QAAS,IACJn9B,EAASm9B,QACZG,QAAS,CACPF,SACAxqB,MAAOgqB,EAAIn9B,GACX49B,8BAGHj/B,QACHwD,EAAAA,EAAAA,IAAU/D,EAEZ,CAEA,MAAM0/B,EAA0B,aAAhBx5B,EAAOpE,KAAsBoE,EAAOwO,IAAMA,EAC1DjR,OAAOG,KAAK87B,EAAS,SAAU,YAC/B1+B,EAAQ2+B,kBAAkB,CAAEp/B,SAC9B,CAkEA+Z,eAAeslB,GACbhxB,GACA,IADelO,EAAQR,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG2B,EAAAA,GAAgBg+B,EAAe3/B,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAE0f,EAAmBrgB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAAEqhB,EAA0BhiB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,QAEpG0c,EAAAA,EAAAA,IAAQ,cAAe,CAC3B3O,OACAgS,gBAAiBlgB,EACjBuD,KAAM47B,EACNtf,aACA2B,UAEJ,CAEA,IAAI4d,GAEJxlB,eAAeylB,GACb//B,EACAgB,EAAgC4N,EAAevH,EAAmB4M,GAElE,IAFiF+rB,EAAM9/B,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAQ,QAAA+/B,EAAA//B,UAAAC,OAAAwd,EAAA,IAAAtd,MAAA4/B,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAviB,EAAAuiB,EAAA,GAAAhgC,UAAAggC,GAAA,IAC3F3/B,GAAQC,EAAAA,EAAAA,OAAkBmd,EAE9B,MAAM,WACJoN,EAAU,iBAAExe,EAAgB,QAAE4zB,EAAO,SAAEC,GACrCp/B,EAEAg/B,IACGF,KACHA,GAAc,IAAI/B,GAAa,8BAA8B,KAC3DxxB,EAAiB,CAAE3G,QAAS,qCAAsCrF,SAAQ,KAI9Eu/B,GAAY3B,mBAGd,MAAMj4B,QAAeqX,EAAAA,EAAAA,IAAQ,uBAAwB,CACnD9c,OAAQmO,EAAKhN,GACbipB,WAAYjc,EAAKic,WACjBxjB,YACA4M,OACA+rB,WAGF,IAAK95B,EACH,OAEF,MAAM,QAAEN,EAASy6B,MAAOC,EAAO,IAAE5rB,GAAQxO,EAErCo6B,EACFvV,EAAW,CAAE9W,KAAM,CAAErO,QAASA,GAAW,SAAWrF,UAC3CqF,EACT2G,EAAiB,CAAE3G,UAASrF,UACnBmU,IACLsrB,EAEEtrB,EAAI7J,SAAS+zB,IACfkB,GAAal8B,KAAK8Q,IAElBorB,GAAapB,gBACb0B,EAAS,CACP1rB,MAAKjU,OAAQmO,EAAKhN,GAAIyF,YAAW9G,WAIrC4/B,EAAQ,CAAEzrB,MAAKnU,UAGrB,CC/iCO,SAASggC,GAAiBtsB,GAC/B,MAAM/S,EAAQ+G,OAAOC,KAAK+L,GAAMtO,KAAK66B,GAAO,GAAEA,KAAKvsB,EAAKusB,OAAM35B,KAAK,KACnE,OAAO3F,EAAMf,OAAS,EAAK,IAAGe,IAAU,EAC1C,CC2FAoZ,eAAemmB,GACbzgC,EAAW0gC,GAEsB,QAAAzgC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,KAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAAA,IAD7BC,GAAQC,EAAAA,EAAAA,OAAkBJ,EAE9B,MAAM8F,QAAeqX,EAAAA,EAAAA,IAAQ,iBAAkBmjB,GAC/C,IAAKx6B,EACH,OAGF,MAAM,KAAEy6B,EAAI,QAAEC,EAAO,MAAEpjB,GAAUtX,EAQjC,OANAlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS6gC,EAAAA,EAAAA,IAAe7gC,EAAQ2gC,EAAMpgC,GACtCP,GAAS8gC,EAAAA,EAAAA,IAAe9gC,EAAQ+gC,EAAAA,GAAAA,SAAsBxgC,GACtDP,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,QACtDzZ,EAAAA,EAAAA,IAAU/D,GAEH4gC,CACT,CAqUAtmB,eAAe0mB,GACbhhC,EAAW0gC,EAAsCO,EAAkBC,GAEnE,QAAAC,EAAAjhC,UAAAC,OAAAwd,EAAA,IAAAtd,MAAA8gC,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAzjB,EAAAyjB,EAAA,GAAAlhC,UAAAkhC,GAAA,IADI7gC,GAAQC,EAAAA,EAAAA,OAAkBmd,EAE9B,MAAMzX,QAAeqX,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDmjB,eAAcO,cAAaC,eAE7B,IAAKh7B,EACH,OAGF,MAAM,GAAEtE,EAAE,gBAAEy/B,GAAoBn7B,EAChClG,GAASyJ,EAAAA,EAAAA,MAETzJ,GAASshC,EAAAA,EAAAA,IAAiBthC,EAAQ4B,EAAIrB,GAClC8gC,GACFrhC,GAASuhC,EAAAA,EAAAA,IAAsBvhC,EAAQqhC,EAAiB9gC,GACxDP,GAAS8gC,EAAAA,EAAAA,IAAe9gC,EAAQ+gC,EAAAA,GAAAA,SAAsBxgC,IAEtDP,GAAS8gC,EAAAA,EAAAA,IAAe9gC,EAAQ+gC,EAAAA,GAAAA,SAAsBxgC,IAExDwD,EAAAA,EAAAA,IAAU/D,EACZ,EF3aAe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UAAEoG,EAAS,OAAEm6B,EAAM,MAAEjhC,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAQugC,EAAO1/B,MACb,IAAK,UACHd,EAAQ4+B,eAAe,CAAEC,QAAS2B,EAAOv9B,KAAM1D,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAEmU,GAAQ8sB,EAChBxgC,EAAQm/B,QAAQ,CAAEzrB,MAAKnU,UACvB,KACF,CACA,IAAK,WAAY,CACf,MAAMqO,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EACH,OAGGmxB,GAAqB//B,EAAQgB,EAAS4N,EAAMvH,EAAWm6B,EAAOvtB,UAAMpT,EAAWN,GACpF,KACF,CACA,IAAK,cACHS,EAAQygC,cAAc,CAAEh1B,OAAQ+0B,EAAO/0B,OAAQlM,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMujB,EAAO9jB,EAAOmY,eAAgB4L,EAAAA,EAAAA,IAAW/jB,EAAQA,EAAOmY,oBAAiBtX,EAC/E,IAAKijB,EACH,OAEF9iB,EAAQ+pB,WAAW,CACjB9W,KAAM,CACJkpB,YAAarZ,EAAKqZ,YAClBb,UAAWxY,EAAKwY,WAAa,GAC7BD,SAAUvY,EAAKuY,UAAY,GAC3BpsB,OAAQ6T,EAAKliB,IAEfrB,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAMqO,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EACH,OAEF,MAAM,iBAAE8yB,GAAqBF,EAC7BxgC,EAAQ2gC,WAAW,CACjBD,mBAAkBjhC,OAAQmO,EAAKhN,GAAIyF,YAAW9G,UAEhD,KACF,CACA,IAAK,MAAO,CACV,MAAMqO,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EACH,OAEF5N,EAAQ4gC,YAAY,CAClBnhC,OAAQmO,EAAKhN,GACbyF,YACA9G,UAEF,KACF,CACA,IAAK,OAAQ,CACX,MAAMqO,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EACH,OAGGmxB,GAAqB//B,EAAQgB,EAAS4N,EAAMvH,OAAWxG,GAAW,EAAMN,GAC7E,KACF,CACA,IAAK,kBAAmB,CACtB,MAAM,MAAEW,EAAK,WAAE2gC,GAAeL,EAC9BxgC,EAAQ8gC,gBAAgB,CACtB5gC,QAAO2gC,aAAYx6B,YAAW9G,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAE0P,GAAWuxB,EACnBxgC,EAAQ+gC,iBAAiB,CAAEngC,GAAIqO,EAAQ1P,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAEmU,GAAQ8sB,GACV,OAAE/gC,IAAWE,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAC/D,IAAKE,EACH,OAEF,MAAMmF,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,GAClD,IAAKzB,GAASqP,SAAU,OACxB,MAAM+sB,GAAQC,EAAAA,GAAAA,MACdjhC,EAAQkhC,qBAAqB,CAC3BxtB,MAAKK,MAAOnP,GAASqP,SAAU+sB,QAAOG,WAAYX,EAAOv9B,KAAM1D,UAEjE,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAEmU,GAAQ8sB,EACV5yB,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EACH,OAEF,MAAMhJ,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQ4O,EAAKhN,GAAIyF,GACnD,IAAKzB,EACH,OAEF,MAAMmP,EAAQnP,EAAQoP,UAAYpP,EAAQqP,SAC1C,IAAKF,EACH,OAEF,MAAMitB,GAAQC,EAAAA,GAAAA,MACdjhC,EAAQohC,eAAe,CACrB1tB,MACAK,QACAstB,OAAQzzB,EAAKhN,GACbogC,QACAG,WAAYX,EAAOv9B,KACnB1D,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAEmU,GAAQ8sB,EACV5yB,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EACH,OAEF5N,EAAQshC,kBAAkB,CACxB7hC,OAAQmO,EAAKhN,GACbyF,YACAk7B,SAAUf,EAAOe,SACjB7tB,MACAnU,UAEF,KACF,EAAC,KAILQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,QAAE4+B,EAAO,OAAEp/B,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD2N,EAAOnO,GAASsC,EAAAA,EAAAA,IAAW/C,EAAQS,IAAUuL,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvE2B,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAE5D,IAAKqO,IAAS1M,EACZ,OAGF,MAAM,SAAExB,GAAawB,EACrBlB,EAAQyH,gBAAgB,CAAEpB,eAAWxG,EAAWN,UAChDS,EAAQohB,oBAAoB,CAAE7hB,UAEzBq/B,GACHhxB,EAAMlO,EAAUm/B,GAAS/3B,EAAAA,EAAAA,IAAmB9H,EAAQ4O,EAAKhN,GAAIlB,IAAWyhB,EAAAA,EAAAA,IAAaniB,EAAQ4O,EAAKhN,IACnG,KAGHb,EAAAA,EAAAA,IAAiB,cAAcuZ,MAAOta,EAAQgB,EAASC,KACrD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,GACxC,cAAEkX,GAAkBnY,EACpB4O,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACjCw+B,EAAM5mB,IAAiBqqB,EAAAA,EAAAA,IAAUxiC,EAAQS,GAC1C0X,GAAkBvJ,GAASmwB,SAIXxhB,EAAAA,EAAAA,IAAQ,iBAAkBwhB,EAAIn9B,GAAIm9B,EAAIlU,cAK3D7qB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASyiC,EAAAA,EAAAA,IAAqBziC,EAAQ++B,EAAIn9B,KAC1CmC,EAAAA,EAAAA,IAAU/D,GACL4/B,GAAehxB,EAAM/M,EAAAA,GAAgB,cAAUhB,GAAWshB,EAAAA,EAAAA,IAAaniB,EAAQS,IAAQ,KAG9FM,EAAAA,EAAAA,IAAiB,qBAAqBuZ,UACpC,MAAM,gBAAE2hB,GAAoBj8B,EAAO0iC,cACnC,GAAIzG,IAAmB1uB,EAAAA,EAAAA,MAAkB0uB,EA3LR,GA4L/B,OAGF,MAAM/1B,QAAeqX,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKrX,EACH,OAGF,MAAM,IAAEmE,EAAG,MAAEmT,GAAUtX,EAEvBlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OACtDxd,EAAS,IACJA,EACH0iC,cAAe,IACV1iC,EAAO0iC,cACVtO,QAAS/pB,EACT4xB,iBAAiB1uB,EAAAA,EAAAA,SAGrBxJ,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,OACJR,EAAM,SAAEutB,EAAQ,MAAE9sB,EAAK,OAAE0O,EAAM,MAC/BrP,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAI0hC,GAAgBrhC,EAAAA,EAAAA,IAAetB,EAAQO,GAAO46B,WAAWC,WAAWpN,GACxE,IAAsB,IAAlB2U,EAAJ,CAIA,QAAsB9hC,IAAlB8hC,EAA6B,CAC/B,MAAQ7e,KAAM8e,EAAS,KAAEh0B,SAAe2O,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEyQ,cAAe,CAAC,EAEpF,GADAhuB,GAASyJ,EAAAA,EAAAA,OACJm5B,IAAch0B,EAGjB,OAFA5O,EAASi7B,GAAyBj7B,EAAQguB,GAAU,EAAOztB,QAC3DwD,EAAAA,EAAAA,IAAU/D,GAIZA,GAASue,EAAAA,EAAAA,IAASve,EAAQ,CAAE,CAAC4iC,EAAUhhC,IAAKghC,IAC5C5iC,GAASwe,EAAAA,EAAAA,IAASxe,EAAQ,CAAE,CAAC4O,EAAKhN,IAAKgN,IACvC+zB,EAAgB,CACd/gC,GAAIghC,EAAUhhC,GACdV,MAAO,GACP0O,OAAQ,GACRizB,cAAUhiC,EACViiC,aAAa,EACbjzB,QAAS,GACTkzB,UAAW,GAGb/iC,EAASi7B,GAAyBj7B,EAAQguB,EAAU2U,EAAepiC,IACnEwD,EAAAA,EAAAA,IAAU/D,EACZ,EAEIkB,IAAUyhC,EAAczhC,OAAUyhC,EAAcG,cAI/CjE,IAAsB,MAspB7BvkB,eAAsDta,EAASid,GAYhB,IAZkB,SAC/D+Q,EAAQ,cACR2U,EAAa,OACbliC,EAAM,MACNS,EAAK,OACL0O,GAODqN,EAAA,QAAAD,EAAA9c,UAAAC,OAAA6N,EAAA,IAAA3N,MAAA2c,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlP,EAAAkP,EAAA,GAAAhd,UAAAgd,GAAA,IAAM3c,GAAQC,EAAAA,EAAAA,OAAkBwN,EAC/BhO,GAASyJ,EAAAA,EAAAA,MACT,MAAMs1B,GAAMhb,EAAAA,EAAAA,IAAW/jB,EAAQ2iC,EAAc/gC,IACvCgN,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKs+B,IAAQnwB,EACX,OAGF,MAAMo0B,EAAwBL,EAAczhC,QAAUA,EAEtDlB,EAASi7B,GADTj7B,EAASq7B,GAA2Br7B,GAAQ,EAAMO,GACRytB,EAAU,IAC/C2U,EACHzhC,WACI8hC,GAAyB,CAAEpzB,YAAQ/O,EAAWgP,QAAS,KAC1DtP,IACHwD,EAAAA,EAAAA,IAAU/D,GAEV,MAAMkG,QAAeqX,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDwhB,MACAnwB,OACA1N,QACA0O,OAAQozB,OAAwBniC,EAAY+O,IAG9C5P,GAASyJ,EAAAA,EAAAA,MACT,MAAMw5B,GAAmB3hC,EAAAA,EAAAA,IAAetB,EAAQO,GAAO46B,WAAWC,WAAWpN,GAE7E,GADAhuB,EAASq7B,GAA2Br7B,GAAQ,EAAOO,IAC9C2F,IAAW+8B,GAAoB/hC,IAAU+hC,EAAiB/hC,MAE7D,YADA6C,EAAAA,EAAAA,IAAU/D,GAIZ,MAAMkjC,EAAa,IAAI3W,KAAK0W,EAAiBpzB,SAAW,IAAIlK,KAAKsO,GAASA,EAAKrS,MACzEuhC,EAAaj9B,EAAO2J,QAAQ1L,QAAQ8P,IAAUivB,EAAW/iB,IAAIlM,EAAKrS,MAExE5B,EAASi7B,GAAyBj7B,EAAQguB,EAAU,IAC/CiV,EACHG,KAAMl9B,EAAOk9B,KACbL,UAAWn2B,KAAKC,MAA2B,IAAnB3G,EAAO68B,aAC3BI,EAAWhjC,QAAU,CAAEkjC,UAAWn9B,EAAOm9B,cACzCn9B,EAAO28B,UAAY,CAAEA,SAAU38B,EAAO28B,aACtC38B,EAAOo9B,eAAiB,CAAEA,cAAep9B,EAAOo9B,eACpDR,YAAa58B,EAAO2J,QAAQ1P,OAAS,GAAKwH,QAAQzB,EAAO+gB,YACzDpX,QAAqC,KAA5BozB,EAAiBrzB,QAAiBqzB,EAAiBrzB,SAAW1J,EAAO+gB,WAC1E/gB,EAAO2J,SACNozB,EAAiBpzB,SAAW,IAAIkO,OAAOolB,GAC5CvzB,OAAQuzB,EAAWhjC,OAAS+F,EAAO+gB,WAAa,IAC/C1mB,IAEHwD,EAAAA,EAAAA,IAAU/D,EACZ,CAntBIujC,CAAgBvjC,EAAQ,CACtBguB,WACA2U,cAAeA,EACfliC,SACAS,QACA0O,UACCrP,EAAM,GAtCX,CAuCE,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,MACJC,EAAK,WAAE2gC,EAAU,UAAEx6B,EAAS,OAAElD,EAAM,MAAE5D,GAAQC,EAAAA,EAAAA,OAC5CS,EACJ,IAAI,MACF8T,GACE9T,EACJ,MAAM2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,IAAKqO,EACH,OAGF,IAAKmG,GAAS1N,EAAW,CACvB,MAAMzB,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQ4O,EAAKhN,GAAIyF,GACnD,IAAKzB,EACH,OAEFmP,EAAQnP,EAAQoP,UAAYpP,EAAQqP,QACtC,CAEA,IAAKF,EACH,OAGF,MAAMyuB,GAAYzf,EAAAA,EAAAA,IAAW/jB,EAAQ+U,GAChCyuB,GAILxiC,EAAQyiC,kBAAkB,CACxBx/B,KAAO,IAAGu/B,EAAUE,UAAW,GAAG1V,YAAY9sB,IAC9CT,OAAQohC,EAAajzB,EAAKhN,QAAKf,EAC/BsD,SACA5D,SAEc,KAGlBQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,GACJW,EAAE,QAAE+hC,EAAO,SAAEjf,EAAQ,YAAE7C,EAAW,YAAErJ,EAAW,MAC/CjY,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKW,EACH,OAGF,MAAM,OAAEnB,EAAM,SAAEC,GAAa8X,EACvB5J,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BoH,GAAeC,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GAClDohB,EAAoBja,GAAeiN,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQoH,QAAgBhH,EACrF+f,EAAmBhS,EAAK5L,SAAWtC,IAAamB,EAAAA,IAClD8e,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,GACzCohB,GAAmBC,qBAAuBD,GAAmBN,iBAEjExgB,EAAQyH,gBAAgB,CAAEpB,eAAWxG,EAAWN,UAChDS,EAAQohB,oBAAoB,CAAE7hB,WAEzBgd,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC3O,OACAg1B,SAAUhiC,EACV+hC,UACApjB,WAAY1Y,GAAgB+Y,EAC5BA,kBACAsB,QAAQC,EAAAA,EAAAA,IAAaniB,EAAQS,GAC7BikB,WACAmf,aAAchiB,GACd,KAGJ9gB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,SAAE+sB,EAAQ,MAAE7c,EAAK,MAAE5Q,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvD,IAAI0hC,GAAgBrhC,EAAAA,EAAAA,IAAetB,EAAQO,GAAO46B,WAAWC,WAAWpN,GAEnE2U,KAIAxxB,GAASvE,KAAKC,MAAQ81B,EAAcI,YAEzCJ,EAAgB,CACd/gC,GAAI+gC,EAAc/gC,GAClBV,MAAO,GACP0O,OAAQ,GACRizB,cAAUhiC,EACViiC,aAAa,EACbjzB,QAAS,GACTkzB,UAAW,GAGb/iC,EAASi7B,GAAyBj7B,EAAQguB,EAAU2U,EAAepiC,IACnEwD,EAAAA,EAAAA,IAAU/D,IAAO,KAGnBe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5Ck6B,GAAa75B,EAAAA,EAAAA,IAAetB,EAAQO,GAAO46B,WAAWC,WAE5DnzB,OAAOC,KAAKizB,GAAYrvB,SAASkiB,IAC/BhtB,EAAQ8iC,eAAe,CAAE9V,WAAUztB,SAAQ,GAC3C,KAGJQ,EAAAA,EAAAA,IAAiB,YAAYuZ,MAAOta,EAAQgB,EAASC,KACnD,MAAM,MAAE8T,EAAK,MAAEgvB,GAAU9iC,EAEnB89B,GAAMhb,EAAAA,EAAAA,IAAW/jB,EAAQ+U,GAC/B,IAAKgqB,EACH,OAGF,IAAIpU,GAAWC,EAAAA,EAAAA,IAAmB5qB,EAAQ+U,GACrC4V,IAEHA,SADqBpN,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE3b,GAAIm9B,EAAIn9B,GAAIipB,WAAYkU,EAAIlU,eACzDF,UAGjBA,GAAUqZ,iBACNzmB,EAAAA,EAAAA,IAAQ,iBAAkBwhB,EAAIn9B,GAAIm9B,EAAIlU,kBAGxCtN,EAAAA,EAAAA,IAAQ,WAAY,CACxBwhB,MACAkF,WAAYF,GACZ,KAGJhjC,EAAAA,EAAAA,IAAiB,wBAAwBuZ,MAAOta,EAAQgB,EAASC,KAC/D,MAAM,IACJyT,EAAG,MAAEK,EAAK,MAAEitB,EAAK,WAAEG,EAAU,MAC7B5hC,GAAQC,EAAAA,EAAAA,OACNS,EAEE89B,GAAMhb,EAAAA,EAAAA,IAAW/jB,EAAQ+U,GAC/B,IAAKgqB,EAAK,OAEV,KAAK7pB,EAAAA,EAAAA,IAAmBlV,EAAQ+U,GAY9B,OAXA/U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmV,gBAAiB,CACfJ,QACAjT,KAAM,SACNsT,UAAW,CACTC,OAAQ,uBACRpU,aAGHV,QACHwD,EAAAA,EAAAA,IAAU/D,GAIZ,MAAMkkC,QAAmB3mB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE7I,MAAKqqB,MAAKiD,UAChEkC,IAILlkC,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmkC,OAAQ,CACNzvB,IAAKwvB,EACLnvB,QACAotB,eAED5hC,IACHwD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,IACJyT,EAAG,MAAEK,EAAK,OAAEstB,EAAM,MAAEL,EAAK,SAAEtd,EAAQ,WAAEyd,EAAU,cAAEiC,EAAa,WAAEH,EAAU,MAC1E1jC,GAAQC,EAAAA,EAAAA,OACNS,EAEE89B,GAAMhb,EAAAA,EAAAA,IAAW/jB,EAAQ+U,GAC/B,IAAKgqB,EAAK,OACV,MAAMlZ,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQqiC,GAChC,IAAKxc,EAAM,OAEX,KAAK3Q,EAAAA,EAAAA,IAAmBlV,EAAQ+U,GAY9B,OAXA/U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmV,gBAAiB,CACfJ,QACAjT,KAAM,SACNsT,UAAW,CACTC,OAAQ,iBACRpU,aAGHV,QACHwD,EAAAA,EAAAA,IAAU/D,GAIZ,MAAMkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GAC5D,IAAK2B,EACH,OAGF,MAAM,OAAEzB,EAAM,SAAEC,GAAawB,EACvBmiC,EAAQ5jC,IAAUqH,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GACrDwhB,GAASC,EAAAA,EAAAA,IAAaniB,EAAQS,GAC9ByF,QAAeqX,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C7I,MACAqqB,MACAlZ,OACAmc,QACAtd,WACAlD,iBAAkB6iB,QAASxjC,EAC3BH,WACA0jC,gBACAH,aACA/hB,WAEF,IAAKhc,EACH,OAGF,MAAQwO,IAAKwvB,EAAU,QAAEP,GAAYz9B,EAErClG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmkC,OAAQ,CACNzvB,IAAKwvB,EACLnvB,QACA4uB,UACAniB,iBAAkB6iB,QAASxjC,EAC3BH,WACAyhC,eAED5hC,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqBuZ,MAAOta,EAAQgB,EAASC,KAC5D,MAAM,MACJ8T,EAAK,QAAEuvB,EAAO,SAAEC,EAAQ,MAAEvC,EAAK,eAAE/C,EAAc,MAC/C1+B,GAAQC,EAAAA,EAAAA,OACNS,EAEE89B,GAAMhb,EAAAA,EAAAA,IAAW/jB,EAAQ+U,GAC/B,IAAKgqB,EAAK,OAEV,MAAMyF,QAAejnB,EAAAA,EAAAA,IAAQ,cAAe,CAC1CwhB,MACAuF,YAIF,GAFAtkC,GAASyJ,EAAAA,EAAAA,OAEJ+6B,EAEH,YADAxjC,EAAQuL,iBAAiB,CAAE3G,SAASkgB,EAAAA,EAAAA,IAAU,8BAA+BvlB,UAI/E,GAAIikC,EAAOC,cAAevvB,EAAAA,EAAAA,IAAmBlV,EAAQ+U,GAanD,OAZA/U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmV,gBAAiB,CACfJ,QACAyqB,yBAA0BgF,EAAOhF,yBACjC19B,KAAM,SACNsT,UAAW,CACTC,OAAQ,oBACRpU,aAGHV,QACHwD,EAAAA,EAAAA,IAAU/D,GAIZ,MAAM6lB,GAAO7Z,EAAAA,EAAAA,IAAkBhM,EAAQO,GAEjCmU,QAAY6I,EAAAA,EAAAA,IAAQ,oBAAqB,CAC7CsI,KAAMA,GAAQkZ,EACd2F,IAAKF,EACLP,WAAYM,EACZtF,iBACA+C,UAEFhiC,GAASyJ,EAAAA,EAAAA,MAEJiL,IAEL1U,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmkC,OAAQ,CACNzvB,MACAK,QACAotB,WAAY,KAEb5hC,IACHwD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,MACJ8T,EAAK,OAAEstB,EAAM,SAAE3d,EAAQ,iBAAElD,EAAgB,QAAEmiB,EAAO,SAAEjjC,EAAQ,MAC5DH,GAAQC,EAAAA,EAAAA,OACNS,EAEE89B,GAAMhb,EAAAA,EAAAA,IAAW/jB,EAAQ+U,GAC/B,IAAKgqB,EAAK,OACV,MAAMlZ,GAAO9iB,EAAAA,EAAAA,IAAW/C,EAAQqiC,GAChC,IAAKxc,EAAM,OAEX,MAAM3D,GAASC,EAAAA,EAAAA,IAAaniB,EAAQqiC,SAEf9kB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CwhB,MACAlZ,OACAnB,WACAlD,mBACA9gB,WACAijC,UACAzhB,YAIAlhB,EAAQ2jC,YAAY,CAAEpkC,SACxB,KAGFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACf,EAAQgB,EAASC,KACpD,MAAM,IACJ89B,EAAG,KAAE9qB,EAAI,WAAEkuB,GACTlhC,GAEJsc,EAAAA,EAAAA,IAAQ,kBAAmB,CACzBwhB,MACA9qB,OACAkuB,cACA,KAGJphC,EAAAA,EAAAA,IAAiB,eAAe,CAACf,EAAQgB,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmkC,YAAQtjC,GACPN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAK4B,EAASgiC,QAAQzvB,IAEtB,OAAOnS,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmkC,OAAQ,IACHhiC,EAASgiC,OACZS,KAAM3jC,EAAQ2jC,OAEfrkC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BmV,qBAAiBtU,GAChBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,MAAE8T,EAAK,eAAEkqB,EAAc,MAAE1+B,GAAQC,EAAAA,EAAAA,OAAsBS,GACvD,cAAE4jC,GAAkB7kC,EAEpB8kC,EAAmB,IAAIvY,IAAIsY,GACjCC,EAAiBtY,IAAIzX,GAErB/U,EAAS,IACJA,EACH6kC,cAAexkC,MAAMof,KAAKqlB,IAG5B,MAAM3iC,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAI4B,EAASgT,iBAAiBC,UAAW,CACvC,MAAM,OAAEC,EAAQpU,QAAS8jC,GAAoB5iC,EAASgT,gBAAgBC,UAEtEpU,EAAQqU,GAAQ,IACV0vB,EACJ9F,kBAEJ,CAEAj/B,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BmV,qBAAiBtU,GAChBN,IAEHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,KAAEoR,GAASpR,GAAW,CAAC,QACvBi+B,GAAel/B,EAAQqS,EAAK,KAGpCtR,EAAAA,EAAAA,IAAiB,mBAAmBuZ,MAAOta,EAAQgB,EAASC,KAC1D,MAAM,MAAE8T,EAAK,eAAEkqB,EAAc,UAAED,GAAc/9B,EAEvC89B,GAAMhb,EAAAA,EAAAA,IAAW/jB,EAAQ+U,GAE1BgqB,SAECD,GAAgB9+B,EAAQ++B,EAAKC,EAAWC,EAAe,KA6B/Dl+B,EAAAA,EAAAA,IAAiB,iBAAiB,CAACf,EAAQgB,EAASC,KAClD,MAAM,OACJR,EAAM,IAAEs+B,EAAG,IAAErqB,EAAG,WAAEuvB,EAAU,SAAEvjC,EAAQ,MACtCH,GAAQC,EAAAA,EAAAA,OACNS,EACEmjC,GAAiBrF,EACvB,IAAKqF,IAAkBpkC,EAAOm/B,WAAWC,KAAKL,EAAIn9B,IAChD,OAAOW,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BglC,0BAA2B,CACzBjG,MACA3pB,UAAW,CACTC,OAAQ,gBACRpU,aAGHV,GAEL,MAAMyhC,GAAQC,EAAAA,GAAAA,MACdjhC,EAAQgD,SAAS,CAAEpC,GAAInB,EAAQC,WAAUH,UACzCS,EAAQohC,eAAe,CACrB1tB,MACA2tB,OAAQ5hC,EACRsU,MAAOqvB,EAAgB3jC,EAASs+B,EAAIn9B,GACpCogC,QACAG,WAAY,GACZiC,gBACAH,aACA1jC,SAGc,KAGlBQ,EAAAA,EAAAA,IAAiB,2BAA2BuZ,MAAOta,EAAQgB,EAASC,KAClE,MAAM,eAAEg+B,EAAc,MAAE1+B,GAAQC,EAAAA,EAAAA,OAAsBS,GAChD,0BAAE+jC,IAA8B1jC,EAAAA,EAAAA,IAAetB,EAAQO,IAEvD,IAAEw+B,EAAG,UAAE3pB,GAAc4vB,EAE3BhlC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BglC,+BAA2BnkC,GAC1BN,IACHwD,EAAAA,EAAAA,IAAU/D,GAEV,MAAMilC,GAAUlhB,EAAAA,EAAAA,IAAW/jB,EAAQ++B,EAAIn9B,IACvC,GAAKqjC,UAECnG,GAAgB9+B,EAAQilC,GAAS,EAAMhG,GACzC7pB,GAAW,CACb,MAAM,OAAEC,EAAQpU,QAASikC,GAAkB9vB,EAE3CpU,EAAQqU,GAAQ6vB,EAClB,MAGFnkC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BglC,+BAA2BnkC,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACf,EAAQgB,EAASC,KAC3D,MAAM,IACJ89B,EAAG,OAAE56B,EAAM,WAAE8/B,EAAU,MAAE1jC,GAAQC,EAAAA,EAAAA,OAC/BS,EACEg3B,GAAgBt3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAQE,OAEzD0kC,EAAmBpG,EAAIqG,UAAUjhC,QAAQrC,GACpC,SAATA,GAAmBqC,EAAO0G,SAAS/I,KAGhCqjC,EAAiBhlC,QAUtBH,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BqlC,yBAA0B,CACxBtG,MACA56B,OAAQghC,EACRlB,eAED1jC,IACHwD,EAAAA,EAAAA,IAAU/D,IAhBRgB,EAAQskC,cAAc,CACpB7kC,OAAQw3B,GAAiB8G,EAAIn9B,GAC7Bm9B,MACAkF,aACA1jC,SAYa,KAGnBQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BqlC,8BAA0BxkC,GACzBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqBuZ,MAAOta,EAAQgB,EAASC,KAC5D,MAAM,OACJR,EAAM,SAAE8hC,EAAQ,UAAEl7B,EAAS,IAAEqN,EAAG,MAAEnU,GAAQC,EAAAA,EAAAA,OACxCS,EAEE2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD3O,OACA2zB,WACAl7B,cAGGnB,IACLlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bs/B,QAAS,CACP5qB,MACA8sB,OAAQ,CACNe,WACAl7B,YACA5G,OAAQmO,EAAKhN,MAGhBrB,IACHwD,EAAAA,EAAAA,IAAU/D,GACVq/B,GAAoBr/B,EAAQgB,EAAS0T,EAAKxO,EAAQ3F,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,eAAEg+B,EAAc,MAAE1+B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASm9B,SAASkC,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAE9sB,GACNvS,EAASm9B,SACP,OAAE7+B,EAAM,UAAE4G,EAAS,SAAEk7B,GAAaf,EAElC5yB,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C3O,OACAvH,YACAk7B,WACAtD,mBAEG/4B,GAELm5B,GADAr/B,GAASyJ,EAAAA,EAAAA,MACmBzI,EAAS0T,EAAKxO,EAAQ3F,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,sBAAsBuZ,MAAOta,EAAQgB,EAASC,KAC7D,MAAM,IAAEyT,EAAG,MAAEnU,GAAQC,EAAAA,EAAAA,OAAsBS,EAErCiF,QAAeqX,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE7I,QAChDxO,IACLlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9Bs/B,QAAS,CACP5qB,QAEDnU,IACHwD,EAAAA,EAAAA,IAAU/D,GACVq/B,GAAoBr/B,EAAQgB,EAAS0T,EAAKxO,EAAQ3F,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqBuZ,MAAOta,EAAQgB,EAASC,KAC5D,MAAM,eAAEg+B,EAAc,MAAE1+B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASm9B,SAAS5qB,IAAK,OAC5B,MAAM,IAAEA,GAAQvS,EAASm9B,QAEnBp5B,QAAeqX,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE7I,MAAKuqB,mBACpD/4B,GAELm5B,GADAr/B,GAASyJ,EAAAA,EAAAA,MACmBzI,EAAS0T,EAAKxO,EAAQ3F,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bs/B,aAASz+B,GACRN,EAAM,I,UGv4BXQ,EAAAA,EAAAA,IAAiB,oBAAoBuZ,UACnC,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,mBACxBrX,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASulC,EAAAA,EAAAA,IAAgBvlC,EAAQ,CAAEwlC,YAAat/B,EAAOs/B,cACvDxlC,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAE0lC,KAAMx/B,EAAOw/B,QACpD3hC,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,iBAAiBuZ,MAAOta,EAAQgB,EAASC,KACxD,MAAM,gBAAE0kC,EAAe,UAAEC,GAAc3kC,EAEvCjB,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,EAAMhD,WAAO3W,KAC/DkD,EAAAA,EAAAA,IAAU/D,GAEV,MAAM6lC,QAAkBtoB,EAAAA,EAAAA,IAAQ,gBAAiBooB,GAEjD3lC,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,KAClDzW,EAAAA,EAAAA,IAAU/D,GAEN6lC,GACFD,GACF,KAGF7kC,EAAAA,EAAAA,IAAiB,iBAAiBuZ,MAAOta,EAAQgB,EAASC,KACxD,MAAM,gBAAE0kC,EAAe,UAAEC,GAAc3kC,EAEvCjB,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,EAAMhD,WAAO3W,KAC/DkD,EAAAA,EAAAA,IAAU/D,GAEV,MAAM6lC,QAAkBtoB,EAAAA,EAAAA,IAAQ,gBAAiBooB,GAEjD3lC,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,KAClDzW,EAAAA,EAAAA,IAAU/D,GAEN6lC,GACFD,GACF,KAGF7kC,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,gBACJ0kC,EAAe,SAAEG,EAAQ,KAAEJ,EAAI,MAAEK,EAAK,UAAEH,GACtC3kC,EAEJjB,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,EAAMhD,WAAO3W,KAC/DkD,EAAAA,EAAAA,IAAU/D,GAEV,MAAM6lC,QAAkBtoB,EAAAA,EAAAA,IAAQ,iBAAkBooB,EAAiBG,EAAUJ,EAAMK,GAEnF/lC,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,KAClDzW,EAAAA,EAAAA,IAAU/D,GAEN6lC,GACFD,GACF,KAGF7kC,EAAAA,EAAAA,IAAiB,uBAAuBuZ,MAAOta,EAAQgB,EAASC,KAC9D,MAAM,gBACJ0kC,EAAe,MAAEI,EAAK,UAAEH,GACtB3kC,EAEJjB,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,EAAMhD,WAAO3W,KAC/DkD,EAAAA,EAAAA,IAAU/D,GAEV,MAAM6lC,QAAkBtoB,EAAAA,EAAAA,IAAQ,sBAAuBooB,EAAiBI,GAExE/lC,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwa,WAAW,EAAOwrB,4BAAwBnlC,KACjFkD,EAAAA,EAAAA,IAAU/D,GAEN6lC,GACFD,GACF,KAGF7kC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,KAAEglC,GAAShlC,GAEZsc,EAAAA,EAAAA,IAAQ,2BAA4B0oB,EAAK,KAGhDllC,EAAAA,EAAAA,IAAiB,mBAAoBf,IAC5BylC,EAAAA,EAAAA,IAAoBzlC,EAAQ,CAAEwX,WAAO3W,OD7D9CE,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,YAAEggC,EAAW,SAAEiF,EAAQ,MAAE3lC,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvDy/B,GAAeyF,EAAAA,EAAAA,IAA0BnmC,EAAQO,GACvD,GAAKmgC,EAIL,GAAI,SAAUA,EACPM,GAAsBhhC,EAAQ0gC,EAAcO,EAAaiF,EAAU3lC,OACnE,CACL,MAAMqO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQ0gC,EAAajgC,QAC7C,IAAKmO,EACH,OAGGoyB,GAAsBhhC,EAAQ,CACjC4O,OACAvH,UAAWq5B,EAAar5B,WACvB45B,EAAaiF,EAAU3lC,EAC5B,MAGFQ,EAAAA,EAAAA,IAAiB,eAAeuZ,MAAOta,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAI2/B,EACJ,GAAI,SAAU3/B,EACZ2/B,QAAgBH,GAAezgC,EAAQ,CAAE4kC,KAAM3jC,EAAQ2jC,MAAQrkC,OAC1D,CACL,MAAMqO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQiB,EAAQR,QACxC,IAAKmO,EACH,OAGFgyB,QAAgBH,GAAezgC,EAAQ,CACrC4O,OACAvH,UAAWpG,EAAQoG,WAClB9G,EACL,CAEKqgC,IAIL5gC,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASomC,EAAAA,EAAAA,IAAepmC,EAAQ4gC,EAASrgC,GACzCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjC+mB,aAAcz/B,EACdolC,oBAAoB,EACpB3sB,OAAQ,YACR4sB,gBAAkBrlC,EAAgBqlC,kBAEnC/lC,IACHwD,EAAAA,EAAAA,IAAU/D,GAAO,KAuBnBe,EAAAA,EAAAA,IAAiB,cAAcuZ,MAAOta,EAAQgB,EAASC,KACrD,MAAM,iBACJygC,EAAgB,OAAEjhC,EAAM,UAAE4G,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAC3CS,EACE2N,EAAOnO,IAAUsC,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1C,IAAK4G,IAAcq6B,IAAqB9yB,EACtC,OAGF,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,aAAc3O,EAAM8yB,GACjD,IAAKx7B,EACH,OAGFlG,GAASyJ,EAAAA,EAAAA,MACT,MAAM7D,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQ4O,EAAKhN,GAAIyF,GACnDrH,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAC7Dxd,GAASumC,EAAAA,EAAAA,IAAWvmC,EAAQkG,EAAOsgC,QAAS5gC,EAASrF,IACrDwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjCnC,WAAO3W,IAERN,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,gBAAgB,CAACf,EAAQgB,EAASC,KACjD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjC6sB,aAAS3lC,IAEVN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,YAAEwlC,EAAW,MAAElmC,GAAQC,EAAAA,EAAAA,OAAsBS,GAE7C,eAAEylC,IAAmBplC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,SACnD,KAAE1F,GAASwyB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,IAA6B5mC,EAAQO,GAC5D,IAAKomC,EACH,QA0ENrsB,eACEta,EACAiU,EACA0yB,GAEA,QAAA3pB,EAAA9c,UAAAC,OAAA6N,EAAA,IAAA3N,MAAA2c,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlP,EAAAkP,EAAA,GAAAhd,UAAAgd,GAAA,IADI3c,GAAQC,EAAAA,EAAAA,OAAkBwN,EAE9B,MAAM9M,EAAQq/B,GAAiB,CAC7B,eAAgBtsB,EAAK4yB,WACrB,kBAAmB5yB,EAAK6yB,YACxB,iBAAkB7yB,EAAK8yB,WACvB,YAAa9yB,EAAK+yB,IAClB,oBAAqB/yB,EAAKgzB,IAC1B,wBAAyBhzB,EAAKizB,UAG1BjwB,QAAiBF,MAAO,mCAAkC7V,IAAS,CACvEimC,OAAQ,OACRV,YAAa,cACbW,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASV,OAGvBzgC,QAAe+Q,EAASqwB,OAC9B,GAAIphC,EAAOsR,MAAO,CAChB,MAAMA,GAAQ+vB,EAAAA,EAAAA,IAAerhC,EAAOsR,OAYpC,OAXAxX,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjCD,OAAQ,SACRlC,MAAO,IACFA,KAGNjX,QACHwD,EAAAA,EAAAA,IAAU/D,EAEZ,CACAA,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASwnC,EAAAA,EAAAA,IAAkBxnC,EAAQ,CACjC8B,KAAMoE,EAAOpE,KACbF,GAAIsE,EAAOtE,IACVrB,GACHP,GAAS8gC,EAAAA,EAAAA,IAAe9gC,EAAQ+gC,EAAAA,GAAAA,SAAsBxgC,IACtDwD,EAAAA,EAAAA,IAAU/D,EACZ,CAtHSynC,CAAsBznC,EAAQiU,EAAM0yB,EAAgBpmC,EAC3D,MAAO,GAAuB,gBAAnBmmC,EAAkC,CAC3C,MAAMgB,GAAcC,EAAAA,EAAAA,IAA0B3nC,EAAQO,GACtD,IAAKmnC,EACH,QAoHNptB,eACEta,EACAiU,EACAyzB,GAEA,QAAAzH,EAAA//B,UAAAC,OAAA8c,EAAA,IAAA5c,MAAA4/B,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAAjjB,EAAAijB,EAAA,GAAAhgC,UAAAggC,GAAA,IADI3/B,GAAQC,EAAAA,EAAAA,OAAkByc,EAE9B,MAAM6C,EAAS,CACb8nB,KAAM,CACJC,OAAQ5zB,EAAK4yB,WAAWl2B,QAAQ,OAAQ,IACxCm3B,iBAAkB7zB,EAAK6yB,YACvBiB,gBAAiB9zB,EAAK8yB,WACtBiB,cAAe/zB,EAAK+yB,IAAIr2B,QAAQ,OAAQ,MAGtC+D,EAAMuzB,EAAAA,IACR,+DACA,oDAEEhxB,QAAiBF,MAAMrC,EAAK,CAChCyyB,OAAQ,OACRC,QAAS,CACPc,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBR,GAEpBS,KAAMxtB,KAAKC,UAAUkF,KAEjB5Z,QAAe+Q,EAASqwB,OAE9B,GAAsB,OAAlBphC,EAAOwT,OAAiB,CAE1B,MAAMlC,EAAQ,CAAEoO,YAAa,iBAY7B,OAXA5lB,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjCD,OAAQ,SACRlC,MAAO,IACFA,KAGNjX,QACHwD,EAAAA,EAAAA,IAAU/D,EAEZ,CAEAA,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASooC,EAAAA,EAAAA,IAAuBpoC,EAAQ,CACtC8B,KAAM,OACNumC,MAAOniC,EAAO+N,KAAKo0B,OAClB9nC,GACHP,GAAS8gC,EAAAA,EAAAA,IAAe9gC,EAAQ+gC,EAAAA,GAAAA,SAAsBxgC,IACtDwD,EAAAA,EAAAA,IAAU/D,EACZ,CAvKSsoC,CAA2BtoC,EAAQiU,EAAMyzB,EAAannC,EAC7D,MAGFQ,EAAAA,EAAAA,IAAiB,mBAAmBuZ,MAAOta,EAAQgB,EAASC,KAC1D,MAAM,iBACJsnC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/DnoC,GAAQC,EAAAA,EAAAA,OACNS,EACEy/B,GAAeyF,EAAAA,EAAAA,IAA0BnmC,EAAQO,GACjDooC,GAASC,EAAAA,EAAAA,IAAoB5oC,EAAQO,GACrCsoC,GAAgBC,EAAAA,EAAAA,IAAuB9oC,EAAQO,IAC/C,eAAEmmC,EAAc,kBAAEqC,IAAsBznC,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACtEgtB,EAAoC,WAAnBD,GACnBE,EAAAA,EAAAA,IAA6B5mC,EAAQO,IAASonC,EAAAA,EAAAA,IAA0B3nC,EAAQO,GAEpF,KAAKmgC,GAAiBiG,GAAmBgC,GAAWjC,GAClD,OAGF,IAAIsC,EACJ,GAAI,SAAUtI,EACZsI,EAAsB,CACpBpE,KAAMlE,EAAakE,UAEhB,CACL,MAAMh2B,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQ0gC,EAAajgC,QAC7C,IAAKmO,EACH,OAGFo6B,EAAsB,CACpBp6B,OACAvH,UAAWq5B,EAAar5B,UAE5B,CAEArH,GAASipC,EAAAA,EAAAA,IAAcjpC,EAAQ,CAAE0Z,OAAQ,WAAanZ,IACtDwD,EAAAA,EAAAA,IAAU/D,GAEV,MAAMymC,EAAc,CAClByC,KAAMV,EACNv0B,KAAyB,WAAnByyB,GACFyC,EAAAA,EAAAA,IAAwBnpC,EAAQO,IAAS6oC,EAAAA,EAAAA,IAA6BppC,EAAQO,UAE/Dgd,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CmjB,aAAcsI,EACdL,SACAlC,cACA4C,gBAAiBR,EACjBN,mBACAE,oBACAM,kBAAmBA,GAAmBO,MACtCZ,gBAOF1oC,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASipC,EAAAA,EAAAA,IAAcjpC,EAAQ,CAAE0Z,OAAQ,QAAUnZ,GACnDP,GAAS6Z,EAAAA,EAAAA,IAAa7Z,EAAQO,IAC9BwD,EAAAA,EAAAA,IAAU/D,GAAO,KA0GnBe,EAAAA,EAAAA,IAAiB,kBAAkB,CAACf,EAAQgB,EAASC,KACnD,MAAM,KAAEsoC,EAAI,MAAEhpC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C,OAAO6/B,EAAAA,EAAAA,IAAe9gC,EAAQupC,QAAAA,EAAQxI,EAAAA,GAAAA,SAAsBxgC,EAAM,KAGpEQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,SAAEuoC,EAAQ,MAAEjpC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAEtDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAK4B,EAASC,aACd,OAAOG,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BoC,aAAc,IACTD,EAASC,gBACRonC,GAAY,CAAElnC,QAAQ,GAC1B8M,WAAYo6B,IAEbjpC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoBuZ,MAAOta,EAAQgB,EAASC,KAC3D,MAAM,eACJwoC,EAAc,WAAEC,EAAU,UAAE7D,EAAS,OAAE8D,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrEtpC,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhBD,EAAQ8oC,sBAER,MAAM5jC,QAAeqX,EAAAA,EAAAA,IAAQ,qBACxBrX,IAELlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAE7Dxd,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BoC,aAAc,CACZC,MAAO6D,EAAO7D,MACdonC,iBACAnnC,QAAQ,EACRonC,aACAG,WACAF,SACAC,eACA/D,cAEDtlC,IACHwD,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBuZ,MAAOta,EAAQgB,EAASC,KAC/D,MAAM,UAAE8oC,EAAS,MAAExpC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvDiF,QAAeqX,EAAAA,EAAAA,IAAQ,qBAC7B,IAAKrX,EAAQ,OAEblG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,OAG7D,MAAMwsB,EAAQ9jC,EAAO7D,MAAMukB,QAAQzZ,MAAM2Z,GAA6B,IAAlBA,EAAOmjB,SAE3DjqC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkqC,iBAAkB,CAChB5nC,QAAQ,EACRynC,YACAI,gBAAiBH,EAAMI,SACvBC,cAAeL,EAAMM,SAEtB/pC,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDjB,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BkqC,iBAAkB,CAAE5nC,QAAQ,IAC3B/B,IACHwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,2BAA2BuZ,MAAOta,EAAQgB,EAASC,KAClE,MAAM,SAAE6kC,EAAQ,MAAEvlC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC1CiF,QAAeqX,EAAAA,EAAAA,IAAQ,gCAAiCuoB,GAE9D9lC,GAASyJ,EAAAA,EAAAA,MAKPzJ,EAHGkG,EAEM,UAAWA,GACX+iC,EAAAA,EAAAA,IAAcjpC,EAAQ,CAAEwX,MAAO,CAAE5R,QAASM,EAAOsR,MAAO+yB,MAAO,aAAgBhqC,IAE/E0oC,EAAAA,EAAAA,IAAcjpC,EAAQ,CAAE+oC,kBAAmB7iC,EAAQqjC,KAAMxI,EAAAA,GAAAA,UAAwBxgC,IAJjF0oC,EAAAA,EAAAA,IAAcjpC,EAAQ,CAAEwX,MAAO,CAAE5R,QAAS,gBAAiB2kC,MAAO,aAAgBhqC,IAO7FwD,EAAAA,EAAAA,IAAU/D,EAAO,I,gBE3anB,MAAMwqC,GAAoB,GAAKC,GAAAA,GACzBC,GAA0B,KAAOD,GAAAA,GAC1BE,GAAwB,KAAOF,GAAAA,GAC/BG,GAAwB,GAAKH,GAAAA,GACpCI,GAAqB,OAASJ,GAAAA,G,uCCsB7B,SAASK,GAA6B9qC,EAAqB+qC,GAEhE,OAAOA,IADUzpC,EAAAA,EAAAA,IAAetB,GACV2R,qBAAsBtI,EAAAA,EAAAA,MACxCrJ,EAAOoR,mBArBe45B,EAqBuBC,GAAAA,EAAAA,MAAiBx1B,OApBhDy1B,EAAAA,IACTp9B,KAAKq9B,IACVr9B,KAAKC,IAAkB,IAAdi9B,EAAoBJ,IACf,IAAdI,GAIAA,EAAcI,EAAAA,IACTt9B,KAAKq9B,IACVr9B,KAAKC,IAAkB,IAAdi9B,EAAoBJ,IACf,GAAdI,GAIGL,IAOH,GAtBN,IAA4BK,CAuB5B,CAEO,SAASK,GACdrrC,EAAW4F,EAAqB0lC,GAEhC,MAAMC,EAAmB3lC,EAAQ4lC,WAAa,CAAE37B,QAAS,IAGnDA,EAAU07B,EAAiB17B,QAAQlK,KAAKkrB,IAC5C4a,EAAAA,EAAAA,IAAiB5a,GAAW,IACvBA,EACH6a,iBAAa7qC,EACbulB,MAAOyK,EAAQzK,MAAQ,GACrByK,IACH1sB,QAAO/D,IAAA,IAAC,MAAEgmB,GAAOhmB,EAAA,OAAKgmB,EAAQ,CAAC,IAElCklB,EAAcx/B,SAAQ,CAAC6/B,EAAUrsB,KAC/B,MAAMssB,EAAgB/7B,EAAQ0E,WAAWs3B,IAAMC,EAAAA,EAAAA,IAAeD,EAAEF,SAAUA,KACtEC,GAAiB,EACnB/7B,EAAQ+7B,GAAiB,IACpB/7B,EAAQ+7B,GACXF,YAAapsB,EACb8G,MAAOvW,EAAQ+7B,GAAexlB,MAAQ,GAGxCvW,EAAQtJ,KAAK,CACXolC,WACAD,YAAapsB,EACb8G,MAAO,GAEX,IAGF,IAAI,gBAAE2lB,EAAkB,IAAOR,EAe/B,OAbIQ,EAAgB5rC,SAClB4rC,EAAkBA,EAAgB5nC,QAAO6J,IAAA,IAAC,OAAEiC,GAAQjC,EAAA,OAAKiC,IAAWjQ,EAAOmY,aAAa,KAG1FmzB,EAAcx/B,SAAS6/B,IACrB,MAAM,cAAExzB,GAAkBnY,EAC1B+rC,EAAgBx8B,QAAQ,CACtBU,OAAQkI,EACRwzB,WACAK,UAAWl+B,KAAKI,MAAMtB,KAAKC,MAAQ,MACnC,KAGGyU,EAAAA,GAAAA,IAAkBthB,EAAQ4F,EAAQnF,OAAQmF,EAAQhE,GAAI,CAC3D4pC,UAAW,IACND,EACH17B,UACAk8B,oBAGN,CAEO,SAASE,GACdjsC,EAAWS,EAAgBgsB,GAE3B,OAAOvI,EAAAA,GAAAA,IAAWlkB,EAAQS,EAAQgsB,OAAQ5rB,GAAW,EACvD,C,gBCrEA,IAAIqrC,GAAqB,GAEzBnrC,EAAAA,EAAAA,IAAiB,0BAA0BuZ,UACzC,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,yBACxBrX,IAKLA,EAAO4F,SAASqgC,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgBxqC,KAAM0qC,EAAAA,GAAAA,SAElEH,EAAkBI,YACpBF,GAAAA,GAAmB,UAASF,EAAkBI,WAAW3qC,KAAM0qC,EAAAA,GAAAA,SAE7DH,EAAkBK,iBACpBH,GAAAA,GAAmB,UAASF,EAAkBK,gBAAgB5qC,KAAM0qC,EAAAA,GAAAA,SAElEH,EAAkBM,iBACpBJ,GAAAA,IAAkBK,EAAAA,EAAAA,IAAqBP,EAAkBM,iBAAkBH,EAAAA,GAAAA,QAC7E,IAGFtsC,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACH2sC,mBAAoBzmC,IAEtBnC,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,6BAA6B,CAACf,EAAQgB,EAASC,KAC9D,MAAM,MACJwF,EAAK,EAAEskC,EAAC,EAAE6B,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAEvsC,GAAQC,EAAAA,EAAAA,OAC1CS,EAEE8rC,EAAyB,CAC7BnrC,GAAIsqC,KACJc,eAAgBvmC,EAChBskC,EAAGD,GAA6B9qC,EAAQ+qC,GA1CV,GA0Cej9B,KAAKob,SAClB+jB,GAChCL,EAAGA,EA5C2B,GA4CvB9+B,KAAKob,SAAuC+jB,GACnDJ,YACAC,cAGF,OAAOvqC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BktC,wBAAyB,KAAK5rC,EAAAA,EAAAA,IAAetB,EAAQO,GAAO2sC,yBAA2B,GAAKH,IAC3FxsC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,UACJoG,EAAS,OAAE5G,EAAM,MAAEgG,EAAK,aAAE0mC,GACxBlsC,EAEE2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE3BmO,GAASnI,GAAShG,IAAWT,EAAOmY,gBAIpCoF,EAAAA,EAAAA,IAAQ,uBAAwB,CACnC3O,OACAvH,YACA+lC,SAAU3mC,EACV4mC,WAAYF,GACZ,KAGJpsC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACf,EAAQgB,EAASC,KACxD,MAAM,OACJR,EAAM,UAAE4G,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OACzBS,EACE0qC,GAAW2B,EAAAA,EAAAA,IAAsBttC,EAAQS,GACzCmF,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,GAE7CskC,GAAa/lC,KAAW2nC,EAAAA,EAAAA,IAAe3nC,IAE5C5E,EAAQwsC,eAAe,CACrB/sC,SACA4G,YACAskC,WACAprC,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,OACJR,EAAM,SACNkrC,EAAQ,kBACR8B,EAAiB,MACjBltC,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAI,UAAEoG,GAAcpG,EAEpB,MAAM2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAImF,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,GAEhD,IAAKuH,IAAShJ,EACZ,OAGF,MAAM8nC,EAAoB/lC,QAAQ/B,EAAQqE,aAAerE,EAAQ+nC,UAC3DC,EAA8BF,GAChCriC,EAAAA,EAAAA,IAA0BrL,EAAQS,EAAQmF,EAAQqE,WAAa,QAC/DpJ,EACJ+E,EAAU8nC,IACN54B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmtC,IAClChoC,EACJyB,EAAYzB,GAAShE,IAAMyF,EAE3B,MAAMikC,GAAgBuC,EAAAA,EAAAA,IAAiBjoC,GACjCkoC,EAAcxC,EAAcyC,MAAMC,IAAiBlC,EAAAA,EAAAA,IAAekC,EAAcrC,KAEhFsC,EAAmBH,EACrBxC,EAAcnnC,QAAQ6pC,KAAkBlC,EAAAA,EAAAA,IAAekC,EAAcrC,KAAa,IAAIL,EAAeK,GAEnG11B,GAAQi4B,EAAAA,EAAAA,IAAuBluC,GAC/BwrC,EAAYyC,EAAiBhhC,OAAOgJ,GACpC9T,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GAExC,IAAI4tC,EAAAA,EAAAA,IAA+BnuC,EAAQ,mBAAoB,CAC7D,MAAMouC,EAAqBN,GAAclsB,EAAAA,EAAAA,IAAKzf,EAASM,gBAAiB,CAAC4E,IAAc,IAClFlF,EAASM,gBACZ,CAAC4E,GAAY,IACPlF,EAASM,gBAAgB4E,IAAc,GAC3C,CACEA,YACAskC,cAIN3rC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9ByC,gBAAiB2rC,GAChB7tC,EACL,CAEAP,EAASqrC,GAAmBrrC,EAAQ4F,EAAS4lC,IAC7CznC,EAAAA,EAAAA,IAAU/D,GAEV,UACQud,EAAAA,EAAAA,IAAQ,eAAgB,CAC5B3O,OACAvH,YACAmkC,YACAiC,qBAMJ,CAJE,MAAOj2B,GAEPxX,EAASqrC,GADTrrC,GAASyJ,EAAAA,EAAAA,MAC2B7D,EAAS0lC,IAC7CvnC,EAAAA,EAAAA,IAAU/D,EACZ,MAGFe,EAAAA,EAAAA,IAAiB,sBAAsB,CAACf,EAAQgB,EAASC,KACvD,MAAM,UAAEoG,EAAS,SAAEskC,EAAQ,MAAEprC,GAAQC,EAAAA,EAAAA,OAAsBS,EAErDkB,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,IAAK4B,EAASM,gBAAgB4E,IAAY0mC,MAAMM,IAAWvC,EAAAA,EAAAA,IAAeuC,EAAO1C,SAAUA,KACzF,OAAO3rC,EAGT,MAAMsuC,EAA4BnsC,EAASM,gBAAgB4E,GACxDlD,QAAQkqC,KAAYvC,EAAAA,EAAAA,IAAeuC,EAAO1C,SAAUA,KAEjDyC,EAAqBE,EAA0BnuC,OAAS,IACzDgC,EAASM,gBACZ,CAAC4E,GAAYinC,IACX1sB,EAAAA,EAAAA,IAAKzf,EAASM,gBAAiB,CAAC4E,IAEpC,OAAO9E,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByC,gBAAiB2rC,GAChB7tC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsBuZ,MAAOta,EAAQgB,EAASC,KAC7D,MAAM,SAAE0qC,GAAa1qC,QAEAsc,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEouB,gBAKrD3rC,GAASyJ,EAAAA,EAAAA,OAEGsgB,QAKZ/pB,EAAS,IACJA,EACH+pB,OAAQ,IACH/pB,EAAO+pB,OACVwkB,gBAAiB5C,KAGrB5nC,EAAAA,EAAAA,IAAU/D,IAXRgB,EAAQwtC,aAWO,KAGnBztC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACf,EAAQgB,EAASC,KAC/D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOsB,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BktC,yBAAyB5rC,EAAAA,EAAAA,IAAetB,EAAQO,GAC7C2sC,yBAAyB/oC,QAAQkqC,GAAWA,EAAOzsC,KAAOA,KAC5DrB,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgBuZ,MAAOta,EAAQgB,EAASC,KACvD,MAAM,OAAER,EAAM,UAAE4G,EAAS,SAAEskC,GAAa1qC,EAClC2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BmF,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,GAClD,IAAKuH,IAAShJ,EACZ,OAGF,MAAMgK,EAAShK,EAAQ6oC,UAAUxnB,WAC3B/gB,QAAeqX,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDouB,WACA/8B,OACAvH,YACAuI,WAGG1J,IAILlG,GAASyJ,EAAAA,EAAAA,MAELvD,EAAOsX,OAAOrd,SAChBH,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqB/X,EAAOsX,MAAO,QAG/Dxd,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQ4G,EAAW,CACpDonC,SAAUvoC,KAEZnC,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwB,CAACf,EAAQgB,EAASC,KACzD,MAAM,IAAEoJ,EAAG,OAAE5J,GAAWQ,EAElB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE3BmO,IAIL2O,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElT,MAAKuE,QAAO,KAGjD7N,EAAAA,EAAAA,IAAiB,gCAAgC,CAACf,EAAQgB,EAASC,KACjE,MAAM,OACJR,EAAM,SAAE2sC,EAAQ,EAAErC,EAAC,EAAE6B,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAElrC,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OACzDS,EAEE2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE1B0B,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxC,GAAKqO,GAASzM,EAAS+qC,yBAAyBa,MAAMW,GAAgBA,EAAY9sC,KAAOA,KACpFnB,IAAWT,EAAOmY,cAMvB,OAFAoF,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE3O,OAAMw+B,cAEzC7qC,EAAAA,EAAAA,GAAevC,EAAQ,CAC5BktC,wBAAyB/qC,EAAS+qC,wBAAwBvnC,KAAKonC,GACzDA,EAAuBnrC,KAAOA,EACzB,IACFmrC,EACHhC,EAAGD,GAA6B9qC,EAAQ+qC,GACxC6B,IACAC,YACAC,cAGGC,KAERxsC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwBuZ,MAAOta,EAAQgB,EAASC,KAC/D,MAAM,OAAER,EAAM,SAAEoc,GAAa5b,EACvB2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EAAM,OAEX,MAAM1I,QAAeqX,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE3O,OAAMiO,WAAUM,UAAWN,GAAY,OAAIhc,IAGlG,IAAKqF,IAAWA,EAAOR,SAASvF,OAO9B,OALAH,EAASisC,GADTjsC,GAASyJ,EAAAA,EAAAA,MAC8BhJ,EAAQ,CAC7CkuC,qBAAsB,SAGxB5qC,EAAAA,EAAAA,IAAU/D,GAIZ,MAAM,SAAE0F,EAAQ,MAAEyJ,EAAK,MAAEqO,GAAUtX,EAE7B8X,GAAOC,EAAAA,EAAAA,IAAqBvY,EAAU,MACtC2E,EAAMpC,OAAOC,KAAK8V,GAAMrY,IAAI0C,QAElCrI,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASoe,EAAAA,EAAAA,IAAoBpe,EAAQ4O,EAAKhN,GAAIoc,GAC9Che,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OAEtDxd,EAASisC,GADTjsC,GAASwe,EAAAA,EAAAA,IAASxe,GAAQie,EAAAA,EAAAA,IAAqB9O,EAAO,OACf1O,EAAQ,CAC7CmuC,gBAAiB,IAAKhgC,EAAKggC,iBAAmB,MAAQvkC,MAGxDtG,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyB,CAACf,EAAQgB,EAASC,KAC1D,MAAM,WAAEkE,EAAU,MAAE5E,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,GAAKqO,EAAL,CAEA,GAAIA,EAAK+/B,qBAAsB,CAC7B,MAAMA,EAAuB//B,EAAK+/B,qBAAuBxpC,EAAWhF,OAC9DyuC,GAAmBhgC,EAAKggC,iBAAmB,IAAIzqC,QAAQvC,IAAQuD,EAAW0F,SAASjJ,KAEzF5B,EAASisC,GAAsBjsC,EAAQ4O,EAAKhN,GAAI,CAC9CgtC,qBAGF7qC,EAAAA,EAAAA,IAAU/D,IAEL4uC,EAAgBzuC,QAAUwuC,GAC7B3tC,EAAQ6tC,qBAAqB,CAAEpuC,OAAQmO,EAAKhN,GAAIib,SAAU/O,KAAKq9B,OAAOhmC,IAE1E,CAIA,GAFAnE,EAAQqoB,iBAAiB,CAAElkB,aAAY5E,WAElC4tC,EAAAA,EAAAA,IAA+BnuC,EAAQ,mBAI5C,OAFAA,GAASyJ,EAAAA,EAAAA,OAEFlH,EAAAA,EAAAA,GAAevC,EAAQ,CAC5ByC,gBAAiB,KACZnB,EAAAA,EAAAA,IAAetB,EAAQO,GAAOkC,mBAC9BwF,OAAO6mC,YAAY3pC,EAAWQ,KAAK0B,IACpC,MAAMzB,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQ4O,EAAKhN,GAAIyF,GAEnD,IAAKzB,EAAS,OAEd,MAAMmpC,EAASnpC,EAAQ4lC,WAAWO,iBAAiB5nC,QAAO/D,IAAA,IAAC,SAAEiO,GAAUjO,EAAA,OAAKiO,CAAQ,IAEpF,IAAK0gC,EAAQ,OAEb,MAAMvD,EAAYuD,EAAOppC,KAAKwM,GAAWA,EAAOw5B,WAEhD,MAAO,CAACtkC,EAAWmkC,EAAU7lC,KAAKkmC,IAAC,CACjCxkC,YACAskC,SAAUE,MACR,IACH1nC,OAAOwD,YAEXpH,EA3CwB,CA2ClB,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACf,EAAQgB,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GAElCqO,GAAMggC,iBAEX5tC,EAAQ0H,aAAa,CAAEjI,OAAQmO,EAAKhN,GAAIyF,UAAWuH,EAAKggC,gBAAgB,GAAIruC,SAAQ,KAGtFQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACf,EAAQgB,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C2N,GAAO5C,EAAAA,EAAAA,IAAkBhM,EAAQO,GACvC,GAAKqO,EAIL,OAFA2O,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE3O,SAEvBq9B,GAAsBjsC,EAAQ4O,EAAKhN,GAAI,CAC5C+sC,0BAAsB9tC,EACtB+tC,qBAAiB/tC,GACjB,KAGJE,EAAAA,EAAAA,IAAiB,oBAAoBuZ,UACnC,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,oBAAqB,CAAC,GAC9CrX,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACHgvC,aAAc9oC,EAAOslC,YAEvBznC,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,uBAAuBuZ,UACtC,MAAMpU,QAAeqX,EAAAA,EAAAA,IAAQ,uBAAwB,CAAC,GACjDrX,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACH+rC,gBAAiB7lC,EAAOslC,YAE1BznC,EAAAA,EAAAA,IAAU/D,GAAO,KAGnBe,EAAAA,EAAAA,IAAiB,wBAAwBuZ,gBAClBiD,EAAAA,EAAAA,IAAQ,0BAK7Bvd,GAASyJ,EAAAA,EAAAA,MACTzJ,EAAS,IACJA,EACH+rC,gBAAiB,KAEnBhoC,EAAAA,EAAAA,IAAU/D,GAAO,KCncnBe,EAAAA,EAAAA,IAAiB,kBAAkBuZ,MAAOta,EAAQgB,EAASC,KACzD,MAAM,OAAER,EAAM,QAAEwuC,EAAO,MAAE1uC,GAAQC,EAAAA,EAAAA,OAAsBS,EACjD2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BkqB,GAAWukB,EAAAA,EAAAA,IAAmBlvC,EAAQS,GAC5C,IAAKmO,IAAS+b,EACZ,OAGF,MAAMzkB,QAAeqX,EAAAA,EAAAA,IACnB0xB,EAAU,uBAAyB,yBACnC,CAAErgC,OAAMugC,KAAMxkB,EAASykB,iBAEzB,IAAKlpC,EACH,OAGFlG,GAASyJ,EAAAA,EAAAA,MACT,MAAM,MAAE4lC,EAAK,MAAE7xB,GAAUtX,EAIzB,GAFAlG,GAASue,EAAAA,EAAAA,IAASve,GAAQie,EAAAA,EAAAA,IAAqBT,EAAO,OAElD,sBAAuB6xB,GAASA,EAAMC,kBAAkBnvC,OAAQ,CAClE,MAAMuF,GAAWD,EAAAA,EAAAA,IAAmBzF,EAAQS,GAE5C4uC,EAAMC,kBAAoBD,EAAMC,kBAAkB3pC,KAAKC,IAAO,IAAWA,KAAYF,EAASE,EAAQ2pC,UACxG,CAEAvvC,GAASwvC,EAAAA,EAAAA,IAAiBxvC,EAAQS,EAAQ4uC,EAAO9uC,IACjDwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,yBAAyBuZ,MAAOta,EAAQgB,EAASC,KAChE,MAAM,OAAER,EAAM,UAAE4G,EAAS,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBS,EACnD2N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1BkqB,GAAWukB,EAAAA,EAAAA,IAAmBlvC,EAAQS,GAC5C,IAAKmO,IAAS+b,EACZ,OAGF,MAAMwkB,EAAOxkB,EAASykB,eACtB,IAAIlpC,QAAeqX,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE3O,OAAMvH,YAAW8nC,SACnEjpC,IACHA,EAAS,CAAC,GAGZlG,GAASyJ,EAAAA,EAAAA,MAET,MAAM,MAAEijB,EAAK,SAAEC,IAAalnB,EAAAA,EAAAA,IAAmBzF,EAAQS,GAAQ4G,GAC/DnB,EAAOwmB,MAAQA,EACfxmB,EAAOymB,SAAWA,EAElB,MAAM8iB,QAAuBlyB,EAAAA,EAAAA,IAAQ,6BAA8B,CAAE3O,OAAMvH,YAAW8nC,SACtFjpC,EAAOupC,eAAiBA,GAAgBtvC,OACxC+F,EAAOwpC,mBAAqBD,EAE5BzvC,GAASyJ,EAAAA,EAAAA,MAETzJ,GAAS2vC,EAAAA,EAAAA,IAAwB3vC,EAAQkG,EAAQ3F,IACjDwD,EAAAA,EAAAA,IAAU/D,EAAO,KAGnBe,EAAAA,EAAAA,IAAiB,4BAA4BuZ,MAAOta,EAAQgB,EAASC,KACnE,MAAM,OACJR,EAAM,MAAE4nC,EAAK,KAAEuH,EAAI,aAAEC,EAAY,MAAEtvC,GAAQC,EAAAA,EAAAA,OACzCS,EACE0pB,GAAWukB,EAAAA,EAAAA,IAAmBlvC,EAAQS,GAC5C,IAAKkqB,EACH,OAGF,MAAMwkB,EAAOxkB,EAASykB,eAChBlpC,QAAeqX,EAAAA,EAAAA,IAAQ,4BAA6B,CAAE8qB,QAAO8G,OAAMU,iBAEpE3pC,IAILlG,GAASyJ,EAAAA,EAAAA,MACTzJ,GAAS8vC,EAAAA,EAAAA,IAAsB9vC,EAAQS,EAAQmvC,EAAM1pC,EAAQ3F,IAC7DwD,EAAAA,EAAAA,IAAU/D,GAAO,I,0BCxDnBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAQzpB,QAAS+sC,EAAW,wBAAEC,IAA4BjtC,EAAAA,EAAAA,IAAW/C,EAAQysB,EAAO7qB,KAAO,CAAC,EAsC5F,OApCI6qB,EAAO7d,KAAKohC,yBAA2BA,GACtCvjB,EAAO7d,KAAKohC,wBAA0BA,IACzCvjB,EAAS,IACJA,EACH7d,MAAMgT,EAAAA,EAAAA,IAAK6K,EAAO7d,KAAM,CAAC,6BAI7B5O,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQysB,EAAO7qB,GAAI6qB,EAAO7d,KAAM6d,EAAOwjB,kBAC3DlsC,EAAAA,EAAAA,IAAU/D,GAELysB,EAAOyjB,oBAAsBC,EAAAA,EAAAA,GAAmBnwC,EAAQysB,EAAO7qB,KAElEZ,EAAQovC,eAGN3jB,EAAO7d,KAAKhN,KACdyuC,EAAAA,GAAAA,IAA0B,CACxB5vC,OAAQgsB,EAAO7d,KAAKhN,GACpB4kB,uBAAwBiG,EAAO7d,KAAK4X,8BAIxCve,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ1L,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAQK,OAAQw3B,IAAkBt3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACxE+vC,EAAa7jB,EAEfwL,IAAkBqY,EAAW1uC,IAC5B,YAAa0uC,EAAW1hC,MAAQmhC,IAAgBO,EAAW1hC,KAAK5L,UAC/D+sC,GACF/uC,EAAQmC,gBAAgB,CAAE5C,UAE5BS,EAAQgD,SAAS,CAAEpC,GAAIq2B,EAAe13B,UACxC,GAIJ,CAEA,IAAK,iBAAkB,CACrB,MAAMg3B,GAAWgZ,EAAAA,EAAAA,IAAmBvwC,EAAQysB,EAAO7qB,IACnD,IAAK21B,EACH,OAGFv3B,GAASwwC,EAAAA,EAAAA,IAAkBxwC,EAAQu3B,EAAU,CAAC9K,EAAO7qB,KACrD5B,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQysB,EAAO7qB,GAAI,CAAE6uC,aAAa,KACtD1sC,EAAAA,EAAAA,IAAU/D,GAEV,MAAM4O,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQysB,EAAO7qB,IAKvC,YAJIgN,GACF5N,EAAQ0vC,kBAAkB,CAAEjwC,OAAQmO,EAAKhN,KAI7C,CAEA,IAAK,kBACH,OAAO+uC,EAAAA,EAAAA,IAAU3wC,EAAQysB,EAAO7qB,IAGlC,IAAK,kBACH,OAAOsiB,EAAAA,EAAAA,IAAWlkB,EAAQysB,EAAO7qB,GAAI6qB,EAAO7d,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEhN,EAAE,SAAElB,EAAWmB,EAAAA,GAAc,aAAE+uC,GAAiBnkB,EAaxD,OAZAzsB,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQ4B,EAAIlB,EAAU,eAAgBkwC,IAClE7sC,EAAAA,EAAAA,IAAU/D,QAEVwJ,YAAW,KACTxJ,GAASyJ,EAAAA,EAAAA,MACT,MAAMonC,GAAsBC,EAAAA,EAAAA,IAAkB9wC,EAAQ4B,EAAIlB,EAAU,gBAChEkwC,GAAgBC,GAAuBD,EAAajc,YAAckc,EAAoBlc,YACxF30B,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQ4B,EAAIlB,EAAU,oBAAgBG,IAClEkD,EAAAA,EAAAA,IAAU/D,GACZ,GAnF0B,IAuF9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAE4F,GAAY6mB,EAEpB,GAAI7mB,EAAQqP,WAAajV,EAAOmY,gBAAkBvS,EAAQmrC,gBACxD,OAGF,MAAMniC,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQysB,EAAOhsB,QACvC,IAAKmO,EACH,OAGF,MAAMoiC,EAAarpC,QAAQ8kB,EAAO7mB,QAAQhE,IAAM6qB,EAAO7mB,QAAQqrC,kBAoB/D,OAlBAjxC,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQysB,EAAOhsB,OAAQ,CACzCylB,YAAatX,EAAKsX,YAActX,EAAKsX,YAAc,EAAI,KACnD8qB,GAAc,CAAE1nB,qBAAsB1a,EAAK0a,qBAAuB,GAAK,KAGzE0nB,IACFhxC,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQysB,EAAOhsB,OAAQ,CACzC2oB,eAAgB,IAAKxa,EAAKwa,gBAAkB,GAAKqD,EAAO7mB,QAAQhE,QAIpEmC,EAAAA,EAAAA,IAAU/D,QAEVkxC,EAAAA,GAAAA,IAAmB,CACjBtiC,OACAhJ,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEyE,EAAG,cAAE8mC,GAAkB1kB,EAC/B,IAAuC,IAAnC0kB,EAAcF,iBAChB,OAsBF,OAnBA5mC,EAAIyB,SAASlK,IACX,MAAMnB,EAAU,cAAegsB,EAASA,EAAO2kB,WAAYC,EAAAA,EAAAA,IAAsBrxC,EAAQ4B,GACnFgN,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE5BmO,GAAM+/B,uBACR3uC,EAASisC,GAAsBjsC,EAAQS,EAAQ,CAC7CkuC,qBAAuB//B,EAAK+/B,qBAAuB,QAAM9tC,EACzD+tC,gBAAiBhgC,EAAKggC,iBAAiBzqC,QAAQmb,GAAMA,IAAM1d,OAI3DgN,GAAM0a,sBACRtpB,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClC6oB,oBAAsB1a,EAAK0a,oBAAsB,QAAMzoB,EACvDuoB,eAAgBxa,EAAKwa,gBAAgBjlB,QAAQmb,GAAMA,IAAM1d,MAE7D,IAGK5B,CACT,CAEA,IAAK,qBACH,OAAO8oB,EAAAA,EAAAA,IAAmB9oB,EAAQysB,EAAO7qB,GAAI6qB,EAAO9B,UAGtD,IAAK,sBAAuB,CAC1B,MAAM,IAAEtgB,EAAG,SAAEinC,GAAa7kB,EACpB8K,EAAW+Z,IAAaC,EAAAA,IAAqB,WAAa,SAEhE,MAAO,IACFvxC,EACHmP,MAAO,IACFnP,EAAOmP,MACVqiC,iBAAkB,IACbxxC,EAAOmP,MAAMqiC,iBAChB,CAACja,GAAWltB,EAAIlK,OAASkK,OAAMxJ,IAIvC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEe,EAAE,SAAEgjB,GAAa6H,EACnB8K,GAAWgZ,EAAAA,EAAAA,IAAmBvwC,EAAQ4B,GAC5C,IAAK21B,EACH,OAGF,MAAQ,CAACA,GAAWia,GAAqBxxC,EAAOmP,MAAMqiC,iBAEtD,IAAIC,EAAsBD,GAAoB,GAC9C,GAAK5sB,GAEE,IAAK6sB,EAAoB5mC,SAASjJ,GAAK,CAK5C,GAAiB,WAAb21B,GAAyBka,EAAoBtxC,QAAUuxC,EAAAA,IAAyB,CAClF,MAAMC,EAAU3xC,EAAOmP,MAAMwiC,QAAQtD,OACrCoD,EAAsBA,EAAoBttC,QAAQytC,GAAaD,GAAWA,EAAQ9mC,SAAS+mC,IAC7F,CAEAH,EAAsB,CAAC7vC,KAAO6vC,EAChC,OAZEA,EAAsBA,EAAoBttC,QAAQytC,GAAaA,IAAahwC,IAc9E,MAAO,IACF5B,EACHmP,MAAO,IACFnP,EAAOmP,MACVqiC,iBAAkB,IACbxxC,EAAOmP,MAAMqiC,iBAChB,CAACja,GAAWka,EAAoBtxC,OAASsxC,OAAsB5wC,IAIvE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEe,EAAE,SAAE0vC,GAAa7kB,EAEzB,OAAOolB,EAAAA,EAAAA,IAAmB7xC,EAAQ4B,EAAI0vC,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAE1vC,EAAE,OAAEwjB,GAAWqH,GACfzO,KAAM8zB,EAAe,WAAEttC,GAAexE,EAAOmlB,YAE/CvH,OAAuB/c,IAAXukB,EAElBnd,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQkC,IAAmB,IAAhBpM,GAAIrB,GAAOyN,EAClD,MAAM7L,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACjB0H,OAAOoR,OAAOy4B,GAAiB3vC,EAAS4vC,iBAAmB,IAAInwC,KAAOA,IAG3F5B,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAAE+xC,iBAAkB,GAAKxxC,GAC3D,IAGF,MAAMyxC,EAAsBp0B,GAAmDgE,EAAAA,EAAAA,IAAKkwB,EAAiB,CAAClwC,IAA9D,IAAKkwC,EAAiB,CAAClwC,GAAKwjB,GAC9D6sB,EAAiBr0B,EAEnBpZ,GAAYL,QAAQ+tC,GAAcA,IAActwC,IADhD4C,GAAYqG,SAASjJ,GAAM4C,EAAa,IAAKA,GAAc,GAAK5C,GAGpE,MAAO,IACF5B,EACHmlB,YAAa,IACRnlB,EAAOmlB,YACVnH,KAAMg0B,EACNxtC,WAAYytC,EACZxc,SAAS7T,EAAAA,EAAAA,IAAK5hB,EAAOmlB,YAAYsQ,QAAS,CAAC7zB,KAGjD,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAE4C,GAAeioB,EAEvB,MAAO,IACFzsB,EACHmlB,YAAa,IACRnlB,EAAOmlB,YACV3gB,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAE0gB,GAAYuH,EAEpB,MAAO,IACFzsB,EACHmlB,YAAa,IACRnlB,EAAOmlB,YACVgtB,YAAajtB,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAMktB,GAAqBlD,EAAAA,EAAAA,IAAmBlvC,EAAQysB,EAAO7qB,KACvD,gBAAEywC,EAAe,YAAEC,EAAW,gBAAEC,GAAoB9lB,EAC1D,IAAK2lB,EACH,OAGF,IAAII,GAAe,EACfC,EAAUL,GAAoBK,QAC9B,IAAIL,EAAmBK,SACvB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQtyC,QACLsyC,EAAQ1E,MAAMrmB,GAAMA,EAAEzX,SAAWqiC,EAAYriC,WAEjDwiC,EAAQlsC,KAAK+rC,GACbE,GAAe,QAEZ,GAAIC,EAAQtyC,QAAUoyC,EAAiB,CAC5C,MAAMG,EAAcD,EAAQl+B,WAAWmT,GAAMA,EAAEzX,SAAWsiC,IACtDG,GAAe,IACjBD,EAAQxlC,MAAMylC,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQtuC,QAAO8Y,IAAA,IAAC,QAAE21B,EAAO,QAAEC,GAAS51B,EAAA,OAAK21B,GAAWC,CAAO,IAShF,OANA7yC,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQysB,EAAO7qB,GAAI,CAAEkxC,aAAcL,EAAQtyC,SAC/DH,GAAS8oB,EAAAA,EAAAA,IAAmB9oB,EAAQysB,EAAO7qB,GAAI,CAC7C6wC,UACAM,kBAAkB90B,EAAAA,EAAAA,IAAqB00B,EAAc,WAIzD,CAEA,MACF,CAEA,IAAK,sBAAuB,CAC1B,MAAM,OAAElyC,EAAM,IAAE4J,GAAQoiB,EAClB7d,EAAO5O,EAAOmP,MAAM6O,KAAKvd,GAE/B,OAAImO,GAAMgtB,QACD1X,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAChCm7B,OAAQhtB,EAAKgtB,OAAOz3B,QAAQ41B,IAAW1vB,EAAIQ,SAASkvB,EAAMn4B,aAI9D,CACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJnB,EAAM,cAAEuyC,EAAa,KAAE1lC,EAAI,aAAEzF,EAAY,SAAEnH,GACzC+rB,EAEJ,IADazsB,EAAOmP,MAAM6O,KAAKvd,GAE7B,OAMF,OAHAT,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,GAAYmB,EAAAA,GAAgB,QAASmxC,GACjFhzC,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,GAAYmB,EAAAA,GAAgB,eAAgBgG,GACxF7H,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAE0jB,UAAW7W,GAEnD,CAEA,IAAK,aAAc,CACjB,MAAM,KAAE2G,GAASwY,EAMjB,YAJAxkB,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ6R,IAAmB,IAAhB/b,GAAIrB,GAAOod,EAClD3c,EAAQ+pB,WAAW,CAAE9W,OAAM1T,SAAQ,GAIvC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEE,EAAM,gBAAEo2B,EAAe,mBAAED,GAAuBnK,EAExD,IADazsB,EAAOmP,MAAM6O,KAAKvd,GAE7B,OAUF,OAPAT,GAAS8oB,EAAAA,EAAAA,IAAmB9oB,EAAQS,EAAQ,CAC1Co2B,kBACAD,wBAEF7yB,EAAAA,EAAAA,IAAU/D,QAEVgB,EAAQiyC,qBAAqB,CAAExyC,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAEgW,EAAO,SAAEmO,GAAa6H,EAGtC,IADazsB,EAAOmP,MAAM6O,KAAKvd,GAE7B,OAQF,OALAT,GAAS0mB,EAAAA,EAAAA,IAAY1mB,EAAQS,EAAQgW,EAAS,CAC5CmO,kBAEF7gB,EAAAA,EAAAA,IAAU/D,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAES,EAAM,MAAEiS,GAAU+Z,EAG1B,IADazsB,EAAOmP,MAAM6O,KAAKvd,GACpB,OAOX,OALAT,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClCyyC,sBAAuBxgC,SAEzB3O,EAAAA,EAAAA,IAAU/D,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAES,EAAM,QAAEgW,GAAYgW,EAG5B,KADa1pB,EAAAA,EAAAA,IAAW/C,EAAQS,IACrBuC,QAAS,OAIpB,YAFAhC,EAAQg4B,cAAc,CAAEv4B,SAAQgW,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAEhW,GAAWgsB,EAGnB,KADa1pB,EAAAA,EAAAA,IAAW/C,EAAQS,IACrBuC,QAAS,OAIpB,YAFAhC,EAAQ+3B,WAAW,CAAEt4B,SAAQ0Q,OAAO,GAGtC,EAGc,I,gBCxYlB,MAAMgiC,GAAkB,IA8lBxB,SAASC,GACPpzC,EACAS,EACAmB,EACA4pC,EACA58B,EACAlB,EACA9H,GAEA,MAAM2lC,EAAmB3lC,GAAS4lC,UAGlC,GAAID,IAAoB8H,EAAAA,GAAAA,GAAa7H,EAAWD,GAC9C,OAAOvrC,EAKT,GAFAA,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmB,EAAI,CAAE4pC,eAE5C99B,EACH,OAAO1N,EAGT,MAAMszC,EAA2B1kC,EAAKggC,iBAAiB/jC,SAASjJ,GAGhE,IAAI2xC,EAAAA,EAAAA,IAA0BvzC,EAAQwrC,KAAe8H,EAA0B,CAC7EtzC,EAASisC,GAAsBjsC,EAAQS,EAAQ,CAC7CkuC,sBAAuB//B,GAAM+/B,sBAAwB,GAAK,EAC1DC,gBAAiB,IAAKhgC,GAAMggC,iBAAmB,GAAKhtC,KAGtD,MAAM4xC,GAAa1+B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,GAErD,IAAKgN,IAAS4kC,EAAY,OAAOxzC,GAEjC+gB,EAAAA,EAAAA,KAAU,MACRmwB,EAAAA,GAAAA,IAAmB,CACjBtiC,OACAhJ,QAAS4tC,EACTC,YAAY,GACZ,GAEN,MAAWH,IACTtzC,EAASisC,GAAsBjsC,EAAQS,EAAQ,CAC7CkuC,sBAAuB//B,GAAM+/B,sBAAwB,GAAK,EAC1DC,gBAAiBhgC,GAAMggC,iBAAiBzqC,QAAQmb,GAAMA,IAAM1d,OAIhE,OAAO5B,CACT,CAEA,SAAS0zC,GACP1zC,EAA6BS,EAAgBmB,EAAYuvC,GACzD,IAD6FwC,EAAWzzC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAExG,MAAM0zC,EAAiBD,GACnBzrB,EAAAA,EAAAA,IAAuBloB,EAAQS,EAAQmB,IACvCkT,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,GAGtC,GAAIgyC,GAAkBzC,EAAc3jC,QAAS,CAC3C,MAAM,MACJusB,EAAK,MAAE8Z,EAAK,QAAE3hC,EAAO,SAAE3B,IACrBujC,EAAAA,EAAAA,IAAkBF,GAClB7Z,GAASoX,EAAc3jC,QAAQusB,OACjCoX,EAAc3jC,QAAQusB,MAAMga,QAAUha,EAAMga,QAC5C5C,EAAc3jC,QAAQusB,MAAMia,UAAYja,EAAMia,WACrCH,GAAS1C,EAAc3jC,QAAQqmC,MACxC1C,EAAc3jC,QAAQqmC,MAAME,QAAUF,EAAME,QACnC7hC,GAAWi/B,EAAc3jC,QAAQ0E,QAC1Ci/B,EAAc3jC,QAAQ0E,QAAQ+hC,oBAAsB/hC,EAAQ+hC,oBACnD1jC,GAAY4gC,EAAc3jC,QAAQ+C,WAC3C4gC,EAAc3jC,QAAQ+C,SAAS2jC,eAAiB3jC,EAAS2jC,eAE7D,CAEA,MAAMV,EAAaI,EAAiB,IAAKA,KAAmBzC,GAAkBA,EAE9E,OAAOwC,GACHQ,EAAAA,EAAAA,IAAuBn0C,EAAQS,EAAQmB,EAAI4xC,IAC3ClyB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmB,EAAI4xC,EAC5C,CAEA,SAASY,GACPp0C,EAAWgB,EAAgC4E,EAAqB8b,GAEhE,MAAM,OAAEjhB,GAAWmF,GAEb,WAAEuyB,IAAekc,EAAAA,EAAAA,IAAsBr0C,EAAQ4F,IAAY,CAAC,EAElE,IAAKuyB,GAAcvyB,EAAQ4b,iBAAkB,CAC3C,MAAM8yB,GAAgBx/B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmF,EAAQ4b,kBAC5D8yB,EACFt0C,GAAS2hB,EAAAA,EAAAA,IAAuC3hB,EAAQs0C,EAAe7zC,EAAQmF,EAAQhE,GAAI8f,GAE3F1gB,EAAQygB,YAAY,CAClBhhB,SACA4G,UAAWzB,EAAQ4b,iBACnBJ,aAAc,CACZM,aACAlZ,cAAe5C,EAAQhE,KAI/B,CAEA,OAAO5B,CACT,CAEA,SAASu0C,GACPv0C,EAAWgB,EAAgC4E,GAE3C,MAAM,GAAEhE,EAAE,OAAEnB,GAAWmF,GAEjB,WAAEuyB,EAAU,eAAEqc,IAAmBH,EAAAA,EAAAA,IAAsBr0C,EAAQ4F,IAAY,CAAC,EAG5E6uC,GADO1xC,EAAAA,EAAAA,IAAW/C,EAAQS,IACIylB,eAAgBvH,EAAAA,EAAAA,IAAgB3e,EAAQS,EAAQoB,EAAAA,IA+BpF,OA7BA7B,EAASo0C,GAAmBp0C,EAAQgB,EAAS4E,GAEzCuyB,KACEqc,IAAmBjH,EAAAA,EAAAA,IAAe3nC,KACpC5F,GAASse,EAAAA,EAAAA,IAAgBte,EAAQS,EAAQ03B,EAAWz3B,SAAU,CAACkB,IAE/DqG,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQggB,IAAmB,IAAhBlqB,GAAIrB,GAAOurB,GAC9C/jB,EAAAA,EAAAA,IAAuB/H,EAAQS,EAAQ03B,EAAWz3B,SAAUH,KAC9DP,GAAS00C,EAAAA,EAAAA,IAAc10C,EAAQS,EAAQ03B,EAAWz3B,SAAUkB,EAAIrB,GAE3Di0C,IACHx0C,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQ03B,EAAWz3B,SAAU,iBAAkBkF,EAAQhE,KAE/F,KAIJ5B,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQ03B,EAAWz3B,SAAU,aAAc,IAC1Ey3B,EACH3vB,cAAe5C,EAAQhE,MAGpB2rC,EAAAA,EAAAA,IAAe3nC,KAAa+uC,EAAAA,EAAAA,IAAgB/uC,KAC/C5F,GAASumB,EAAAA,EAAAA,IAAiBvmB,EAAQS,EAAQ03B,EAAWz3B,SAAU,CAC7DosB,eAAgBqL,EAAWrL,eAAiB,GAAK,MAKnD2nB,IAIJz0C,GAASse,EAAAA,EAAAA,IAAgBte,EAAQS,EAAQoB,EAAAA,GAAgB,CAACD,IAE1DqG,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQotB,IAAmB,IAAhBt3B,GAAIrB,GAAO24B,EAClD,IAAInxB,EAAAA,EAAAA,IAAuB/H,EAAQS,EAAQoB,EAAAA,GAAgBtB,GAAQ,CAEjE,MAAMq0C,GAAgB3uB,EAAAA,EAAAA,IAAoBjmB,EAAQS,EAAQoB,EAAAA,IACpDgzC,GAAkBH,EAAAA,EAAAA,IAAc10C,EAAQS,EAAQoB,EAAAA,GAAgBD,EAAIrB,GACpE0e,GAAiBzX,EAAAA,EAAAA,IAAkBqtC,EAAiBp0C,EAAQoB,EAAAA,GAAgBtB,GAE7Eq0C,IAAiB31B,EAAgBpU,SAAS+pC,KAC7C50C,EAAS60C,EAEb,MAfO70C,CAmBX,CAEA,SAAS80C,GACP90C,EACAS,EACAmF,GAEA,IADAuL,EAAKjR,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAEL,MAAM,MAAEiP,GAAUnP,EACZ4O,EAAOO,EAAM6O,KAAKvd,GAClBs0C,EAAqBnmC,GAAMtG,YAE3Bge,EAAQ1X,GAAM5L,SAAUgyC,EAAAA,EAAAA,IAAuBh1C,EAAQ4F,QAAW/E,EAOxE,OANIylB,IACFtmB,GAAS0mB,EAAAA,EAAAA,IAAY1mB,EAAQS,EAAQ6lB,EAAM1kB,GAAI,CAC7C4G,cAAe5C,EAAQhE,OAIvBmzC,GAAuB5jC,GAEvB4jC,EAAmBnzC,KAAOgE,EAAQhE,IAAMmzC,EAAmBnzC,KAAOgE,EAAQuI,iBACvEvI,EAAQhE,GAAKmzC,EAAmBnzC,IAO9BsiB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAE6H,YAAa1C,IAJxC5F,CAOb,CAEA,SAASi1C,GAAuCj1C,EAAWS,GACzD,MAAMud,GAAOvY,EAAAA,EAAAA,IAAmBzF,EAAQS,GAClCie,GAAYC,EAAAA,EAAAA,IAAgB3e,EAAQS,EAAQoB,EAAAA,IAElD,IAAKmc,IAASU,EACZ,OAGF,IAAIY,EAAIZ,EAAUve,OAClB,KAAOmf,KAAK,CACV,MAAM1Z,EAAUoY,EAAKU,EAAUY,IAC/B,IAAK1Z,EAAQ8b,WACX,OAAO9b,CAEX,CAGF,CAEA,SAASsvC,GACPl1C,EAAWS,EAA4B4J,EAAerJ,GAItD,GAAIP,EAAQ,CACV,MAAMmO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EAAM,OAEXvE,EAAIyB,SAASlK,IACX5B,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmB,EAAI,CAC7C8f,YAAY,IAKd,MAAMyzB,EAAiBF,GAFvBj1C,GAASo1C,EAAAA,EAAAA,IAAwBp1C,EAAQS,EAAQmB,GAEFnB,GAC3C00C,IACFn1C,EAAS80C,GAAsB90C,EAAQS,EAAQ00C,GAAgB,IAG7DvmC,EAAKiK,SAASjX,KAChB5B,GAASq1C,EAAAA,EAAAA,IAAYr1C,EAAQS,EAAQmB,GACvC,IAGFZ,EAAQ0vC,kBAAkB,CAAEjwC,WAE5B,MAAM60C,EAA8B,GA4BpC,OA1BAjrC,EAAIyB,SAASlK,IACX,MAAMgE,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,GAClD,IAAKgE,EACH,OAGF5F,EAASo0C,GAAmBp0C,EAAQgB,EAAS4E,GAAS,GAEtD,MAAMlF,GAAWonB,EAAAA,EAAAA,IAA0B9nB,EAAQ4F,GAC/ClF,GACF40C,EAAkB/uC,KAAK7F,EACzB,KAGFqD,EAAAA,EAAAA,IAAU/D,QAEVwJ,YAAW,KACTxJ,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASu1C,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQ4J,IAC5CtG,EAAAA,EAAAA,IAAU/D,IAEVsW,EAAAA,EAAAA,IAAOg/B,GAAmBxpC,SAASpL,IACjCM,EAAQw0C,wBAAwB,CAAE/0C,SAAQC,YAAW,GACrD,GACDyyC,GAGL,CAIA,MAAMsC,EAA6B,GAEnCprC,EAAIyB,SAASlK,IACX,MAAM8zC,GAAkBrE,EAAAA,EAAAA,IAAsBrxC,EAAQ4B,GACtD,GAAI8zC,EAAiB,CACnBD,EAAiBlvC,KAAKmvC,GAMtB,MAAMP,EAAiBF,GAJvBj1C,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQ01C,EAAiB9zC,EAAI,CACtD8f,YAAY,IAGiCg0B,GAC3CP,IACFn1C,EAAS80C,GAAsB90C,EAAQ01C,EAAiBP,GAAgB,IAG1E3rC,YAAW,KACTxJ,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASu1C,EAAAA,EAAAA,IAAmBv1C,EAAQ01C,EAAiB,CAAC9zC,KACtDmC,EAAAA,EAAAA,IAAU/D,EAAO,GAChBmzC,GACL,MAGFpvC,EAAAA,EAAAA,IAAU/D,IAEVsW,EAAAA,EAAAA,IAAOm/B,GAAkB3pC,SAASlK,IAChCZ,EAAQ0vC,kBAAkB,CAAEjwC,OAAQmB,GAAK,GAE7C,EAn5BAb,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJhsB,EAAM,GAAEmB,EAAE,QAAEgE,EAAO,iBAAE+vC,GACnBlpB,EAEJzsB,EAASu0C,GADTv0C,EAAS0zC,GAAqB1zC,EAAQS,EAAQmB,EAAIgE,GACN5E,EAAS4E,GAEjDA,EAAQinB,oBACV7sB,GAASumB,EAAAA,EAAAA,IACPvmB,EACA4F,EAAQinB,kBAAkBpsB,OAC1BmF,EAAQinB,kBAAkBnsB,SAC1BkF,EAAQinB,oBAIZ,MAAM2mB,GAAa1+B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,IACxCmB,EAAAA,EAAAA,IAAW/C,EAAQS,IACtBuC,SACLwwC,EAAWoC,gBACVZ,EAAAA,EAAAA,IAAuBh1C,EAAQwzC,IAChCA,EAAWhyB,kBACdxgB,EAAQg4B,cAAc,CAAEv4B,SAAQgW,QAAS+8B,EAAWhyB,mBAGtDvZ,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ1L,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAM6jB,GAAUspB,EAAAA,EAAAA,IAAe3nC,GAC/B,IAAIiwC,EAAAA,EAAAA,IAAoC71C,EAAQS,EAAQmF,EAAuBrF,GAAQ,CACrF,GAAI0jB,GAAWre,EAAQ8H,aAAgB9H,EAAQ4H,SAAS6H,OAAS,CAC/D,MAAMnT,GAAqBvB,EAAAA,EAAAA,IAAyBX,EAAQO,GACxD2B,GAEFlB,EAAQ0H,aAAa,CACnBjI,SACAC,SAAUwB,EAAmBxB,SAC7B2G,UAAWzB,EAAQhE,GACnBgI,aAAa,EACbQ,qBAAqB,EACrB7J,SAGN,CAEA,MAAM,WAAE43B,IAAekc,EAAAA,EAAAA,IAAsBr0C,EAAQ4F,IAA0B,CAAC,EAC5EuyB,IAAelU,GACjBjjB,EAAQw0C,wBAAwB,CAAE/0C,SAAQC,SAAUy3B,EAAWz3B,WAK5DujB,GACHza,YAAW,KACTxJ,GAASyJ,EAAAA,EAAAA,MACLksC,IACF31C,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBD,IAE9E5B,EAAS80C,GAAsB90C,EAAQS,EAAQ+yC,IAC/CzvC,EAAAA,EAAAA,IAAU/D,EAAO,GAChBmzC,GAEP,MACEnzC,EAAS80C,GAAsB90C,EAAQS,EAAQ+yC,EACjD,KAGFzvC,EAAAA,EAAAA,IAAU/D,IAGLmwC,EAAAA,EAAAA,GAAmBnwC,EAAQS,IAC9BO,EAAQovC,eAGV,KACF,CAEA,IAAK,8BACHnoC,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQkC,IAAmB,IAAhBpM,GAAIrB,GAAOyN,EAClD,MAAQvN,OAAQw3B,IAAkBt3B,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EAE9E,GAAI03B,IAAkBxL,EAAO7qB,GAAI,OACjC,MAAMgE,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQi4B,EAAexL,EAAOplB,WAEhE,IAAKzB,EAAS,OAGd,IAAIkwC,EAAAA,EAAAA,IAAelwC,KAAa6mB,EAAOhmB,MAAO,OAE9C,MAAMtE,GAAWb,EAAAA,EAAAA,IAAetB,EAAQO,GACxCP,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9BktC,wBAAyB,IAAK/qC,EAAS+qC,yBAA2B,GAAK,CACrEtrC,GAAIO,EAAS+qC,yBAAyB/sC,QAAU,EAChD6sC,eAAgBvgB,EAAOhmB,MACvBY,UAAWolB,EAAOplB,aAEnB9G,EAAM,KAGXwD,EAAAA,EAAAA,IAAU/D,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAEgE,GAAY6mB,EAEhCzsB,EAAS0zC,GAAqB1zC,EAAQS,EAAQmB,EAAIgE,GAAS,GAE3D,MAAMqiB,GAAe8tB,EAAAA,EAAAA,IAAmB/1C,EAAQS,EAAQoB,EAAAA,KAAmB,GAC3E7B,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQoB,EAAAA,GAAgB,gBAAgByU,EAAAA,EAAAA,IAAO,IAAI2R,EAAcrmB,KAErG,MAAMlB,GAAWonB,EAAAA,EAAAA,IAA0B9nB,EAAQ4F,GACnD,GAAIlF,IAAamB,EAAAA,GAAgB,CAC/B,MAAMm0C,GAAqBD,EAAAA,EAAAA,IAAmB/1C,EAAQS,EAAQC,IAAa,GAC3EV,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,gBAAgB4V,EAAAA,EAAAA,IAAO,IAAI0/B,EAAoBp0C,IACvG,EAEAmC,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAEgE,GAAY6mB,EAE1BmnB,GAAiB9+B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,GACnDgN,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAEhCT,EAAS0zC,GAAqB1zC,EAAQS,EAAQmB,EAAIgE,GAElD,MAAM4tC,GAAa1+B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,GACjDgE,EAAQinB,oBACV7sB,GAASumB,EAAAA,EAAAA,IACPvmB,EACA4F,EAAQinB,kBAAkBpsB,OAC1BmF,EAAQinB,kBAAkBnsB,SAC1BkF,EAAQinB,oBAIR+mB,IACF5zC,EAAS80C,GAAsB90C,EAAQS,EAAQ+yC,IAG7C5tC,EAAQ4lC,WAAa58B,IACvB5O,EAASozC,GAAgBpzC,EAAQS,EAAQmB,EAAIgE,EAAQ4lC,UAAW58B,EAAM4kC,EAAW9lC,WAAYkmC,IAG3FhuC,EAAQ4H,SAASvJ,MAAMA,OAAS2vC,GAAgBpmC,SAASvJ,MAAMA,OACjEjE,GAASo1C,EAAAA,EAAAA,IAAwBp1C,EAAQS,EAAQmB,KAGnDmC,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAES,EAAM,GAAEmB,EAAE,QAAEgE,GAAY6mB,EAE1BmnB,GAAiB1rB,EAAAA,EAAAA,IAAuBloB,EAAQS,EAAQmB,GAC9D,IAAKgyC,EACH,OAGF5zC,EAAS0zC,GAAqB1zC,EAAQS,EAAQmB,EAAIgE,GAAS,GAC3D,MAAMyE,EAAMpC,OAAOC,MAAK1C,EAAAA,EAAAA,IAA4BxF,EAAQS,IAAW,CAAC,GAAGkF,IAAI0C,QAAQtC,MAAK,CAACwhB,EAAGC,IAAMA,EAAID,IAC1GvnB,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBwI,GAE5E,MAAM3J,GAAWonB,EAAAA,EAAAA,IAA0B9nB,EAAQ4zC,GACnD,GAAIlzC,IAAamB,EAAAA,GAAgB,CAC/B,MAAMm0C,GAAqBD,EAAAA,EAAAA,IAAmB/1C,EAAQS,EAAQC,IAAa,GAC3EV,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,eAAgBs1C,EAAmBjwC,MAAK,CAACwhB,EAAGC,IAAMA,EAAID,IAC9G,EACAxjB,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OAAES,EAAM,QAAEuT,EAAO,QAAEpO,GAAY6mB,EAErCzsB,EAASu0C,GAA2Bv0C,EAAQgB,EAAS4E,GAErD,MAAMguC,GAAiB9+B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQuT,GAEzDhU,GAASu1C,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQ,CAACuT,IAGzCpO,EAAQ+tC,cACV3zC,GAASi2C,EAAAA,EAAAA,IAA4Bj2C,EAAQS,EAAQ,CAACuT,KAGxDhU,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmF,EAAQhE,GAAI,IAClDgyC,KACAhuC,EACHuI,gBAAiB6F,IAGnB,MAAMw/B,GAAa1+B,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmF,EAAQhE,IAC7D5B,EAAS80C,GAAsB90C,EAAQS,EAAQ+yC,GAE/C,MAAM0C,GAAS7B,EAAAA,EAAAA,IAAsBr0C,EAAQ4F,GAE7CqC,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQmR,IAAmB,IAAhBrb,GAAIrB,GAAO0c,EAClD,MAAQxc,OAAQw3B,EAAev3B,SAAUggB,IAAoB/f,EAAAA,EAAAA,IAAyBX,EAAQO,IAAU,CAAC,EACrG03B,IAAkBx3B,IAChBy1C,GAAQ/d,YAAYz3B,UAAYmB,EAAAA,MAAoB6e,GAI1D1f,EAAQm1C,oBAAoB,CAAEtoC,MAAOjI,EAAQhE,GAAIrB,SAAQ,IAEvD21C,GAAQ/d,aACVn4B,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQy1C,EAAO/d,WAAWz3B,SAAU,aAAc,IACjFw1C,EAAO/d,WACV3vB,cAAe5C,EAAQhE,GACvB4kB,uBAAwB5gB,EAAQhE,OAIpCmC,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OAAES,EAAM,QAAEuT,EAAO,QAAEpO,GAAY6mB,EAC/BxE,GAAe8tB,EAAAA,EAAAA,IAAmB/1C,EAAQS,EAAQoB,EAAAA,KAAmB,GAC3E7B,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgB,IAAIomB,EAAcriB,EAAQhE,KAEtG,MAAMlB,GAAWonB,EAAAA,EAAAA,IAA0B9nB,EAAQ4F,GACnD,GAAIlF,IAAamB,EAAAA,GAAgB,CAC/B,MAAMm0C,GAAqBD,EAAAA,EAAAA,IAAmB/1C,EAAQS,EAAQC,IAAa,GAC3EV,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,eAAgB,IAAIs1C,EAAoBpwC,EAAQhE,IACxG,CAEA,MAAMgyC,GAAiB1rB,EAAAA,EAAAA,IAAuBloB,EAAQS,EAAQuT,GAE9DhU,GAASi2C,EAAAA,EAAAA,IAA4Bj2C,EAAQS,EAAQ,CAACuT,IACtDhU,GAASm0C,EAAAA,EAAAA,IAAuBn0C,EAAQS,EAAQmF,EAAQhE,GAAI,IACvDgyC,KACAhuC,EACHuI,gBAAiB6F,KAGnBjQ,EAAAA,EAAAA,IAAU/D,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAES,EAAM,SAAEmkB,EAAQ,WAAEzf,GAAesnB,EAEnC/mB,GAAW0wC,EAAAA,EAAAA,KAAW3wC,EAAAA,EAAAA,IAAmBzF,EAAQS,GAAS0E,GAC1DkxC,EAA4C,CAChD,CAACx0C,EAAAA,IAAiBsD,GAEpB8C,OAAOoR,OAAO3T,GAAUoG,SAASlG,IAC/B,MAAMlF,GAAWonB,EAAAA,EAAAA,IAA0B9nB,EAAQ4F,GAInD,GAHA5F,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmF,EAAQhE,GAAI,CACrDgjB,aAEElkB,IAAamB,EAAAA,GAAgB,OACjC,MAAMy0C,EAAyBD,EAAgB31C,IAAa,GAC5D41C,EAAuB/vC,KAAKX,EAAQhE,IACpCy0C,EAAgB31C,GAAY41C,CAAsB,IAGpDruC,OAAO+f,QAAQquB,GAAiBvqC,SAAQ6R,IAAqB,IAAnBjd,EAAU2J,GAAIsT,EACtD,MAAM44B,GAAY5sC,EAAAA,EAAAA,IAAgB3J,EAAQS,EAAQoB,EAAAA,KAAmB,GAC/D20C,EAAe5xB,GACjBtO,EAAAA,EAAAA,IAAOigC,EAAUx4B,OAAO1T,IAAMtE,MAAK,CAACwhB,EAAGC,IAAMA,EAAID,IACjDgvB,EAAUpyC,QAAQvC,IAAQyI,EAAIQ,SAASjJ,KAC3C5B,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQ4H,OAAO3H,GAAW,YAAa81C,EAAa,KAE1FzyC,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,OACJS,EAAM,SAAEC,EAAQ,WAAEy3B,EAAU,eAAEqc,GAC5B/nB,EAEEgqB,GAAoBluC,EAAAA,EAAAA,IAAiBvI,EAAQS,EAAQC,GACrDg2C,EAAgB,IACjBD,KACAte,GAGL,IAAKue,EAAch2C,SACjB,OAGFV,GAASumB,EAAAA,EAAAA,IAAiBvmB,EAAQS,EAAQC,EAAUg2C,GAEhDlC,IACFx0C,GAASoH,EAAAA,EAAAA,IAAmBpH,EAAQS,EAAQC,EAAU,iBAAkB8zC,IAG1E,MAAM5lC,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAMhC,GALImO,GAAM5L,SAAWm1B,EAAW3R,yBAA2BiwB,GAAmBjwB,wBAC5ExlB,EAAQg4B,cAAc,CAAEv4B,SAAQgW,QAAS/V,IAIvCy3B,EAAW1E,eAAiB/yB,IAAakO,GAAM5L,QAAS,CAC1D,MAAMwjB,EAAyB5X,GAAM4X,uBAC/BmwB,EAAiCD,EAAclwB,wBAA0BA,EAC3EA,GAA0BmwB,IAC5B32C,GAASumB,EAAAA,EAAAA,IAAiBvmB,EAAQS,EAAQC,EAAU,CAClD8lB,uBAAwB1Y,KAAKC,IAAI4oC,EAAgCnwB,KAGvE,EAEAziB,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQ4B,GAAInB,GAAWgsB,EACjBmqB,GAAenxC,EAAAA,EAAAA,IAAmBzF,EAAQS,GAE5Cm2C,KAAiBrZ,EAAAA,EAAAA,IAAS98B,KAC5BT,GAASu1C,EAAAA,EAAAA,IAAmBv1C,EAAQS,EAAQwH,OAAOC,KAAK0uC,GAAcjxC,IAAI0C,UAC1EtE,EAAAA,EAAAA,IAAU/D,GACVgB,EAAQ61C,aAAa,CAAEp2C,SAAQ0Q,OAAO,EAAM5Q,OAAOC,EAAAA,EAAAA,SAGrD,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAE6J,EAAG,OAAE5J,GAAWgsB,EAExByoB,GAAel1C,EAAQS,EAAQ4J,EAAKrJ,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEqJ,EAAG,OAAE5J,GAAWgsB,GA6jB9B,SACEhsB,EAA4B4J,EAAerJ,EAAgChB,GAEtES,IAIL4J,EAAIyB,SAASlK,IACX5B,GAASm0C,EAAAA,EAAAA,IAAuBn0C,EAAQS,EAAQmB,EAAI,CAClD8f,YAAY,GACZ,KAGJ3d,EAAAA,EAAAA,IAAU/D,GAEVwJ,YAAW,KACTxJ,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASi2C,EAAAA,EAAAA,IAA4Bj2C,EAAQS,EAAQ4J,GACrD,MAAMysC,GAAoBtxC,EAAAA,EAAAA,IAA4BxF,EAAQS,GAC9DT,GAASoH,EAAAA,EAAAA,IACPpH,EAAQS,EAAQoB,EAAAA,GAAgB,eAAgBoG,OAAOC,KAAK4uC,GAAqB,CAAC,GAAGnxC,IAAI0C,UAE3FtE,EAAAA,EAAAA,IAAU/D,EAAO,GAChBmzC,IACL,CAnlBM4D,CAAwBt2C,EAAQ4J,EAAKrJ,EAAShB,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAES,GAAWgsB,EACblnB,EAAevF,EAAO0F,SAAS4L,SAAS7Q,GAY9C,GAXIA,IAAW4M,EAAAA,MACbrN,EAAS,IACJA,EACHkN,qBAAsBlN,EAAOkN,qBAAqBvH,KAAKoN,IAAY,IAC9DA,EACH6K,WAAW,QAGf7Z,EAAAA,EAAAA,IAAU/D,IAGRuF,EAAc,CAChB,MAAM8E,EAAMpC,OAAOC,KAAK3C,EAAayY,MAAMrY,IAAI0C,QAE/C6sC,GADAl1C,GAASyJ,EAAAA,EAAAA,MACchJ,EAAQ4J,EAAKrJ,EACtC,MACEA,EAAQ0vC,kBAAkB,CAAEjwC,WAG9BT,GAASyJ,EAAAA,EAAAA,MACTzJ,GAASg3C,EAAAA,EAAAA,IAAwBh3C,EAAQS,IACzCsD,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEqK,EAAG,cAAE8mC,GAAkB1kB,EAE/BpiB,EAAIyB,SAASlK,IACX,MAAMnB,GAAS4wC,EAAAA,EAAAA,IAAsBrxC,EAAQ4B,GACzCnB,IACFT,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmB,EAAIuvC,GACjD,KAGFptC,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAEoxC,EAAS,IAAE/mC,EAAG,cAAE8mC,GAAkB1kB,EAE1CpiB,EAAIyB,SAASlK,IACX5B,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQoxC,EAAWxvC,EAAIuvC,EAAc,KAGlEptC,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEi3C,EAAM,WAAEC,GAAezqB,EAEzB7mB,GAAUuxC,EAAAA,EAAAA,IAA0Bn3C,EAAQi3C,GAElD,GAAIrxC,GAAS4H,QAAQqZ,KAAM,CACzB,MAAMuwB,EAAaxxC,EAAQ4H,QAAQqZ,KAAKhX,QACxC,IAAIszB,EAAaiU,EACbF,EAAWrnC,SAASA,UACjBunC,EAAWvnC,SAAYqnC,EAAWrnC,QAAQwnC,MAEpCD,EAAWvnC,UACpBszB,EAAa,IACR+T,EAAWrnC,QACdA,QAASqnC,EAAWrnC,QAAQA,QAAQlK,KAAKO,IAAM,IAC1CA,EACHoxC,SAAUF,EAAWvnC,QAAS1C,MAAM0+B,GAAMA,EAAE/kB,SAAW5gB,EAAO4gB,UAASwwB,aAEzED,WAAOx2C,IARTsiC,EAAa+T,EAAWrnC,SAY5B,MAAM0nC,EAAc,IAAK3xC,EAAQ4H,QAAQqZ,QAASqwB,EAAYrnC,QAASszB,GAEvEnjC,GAASshB,EAAAA,EAAAA,IACPthB,EACA4F,EAAQnF,OACRmF,EAAQhE,GACR,CACE4L,QAAS,IACJ5H,EAAQ4H,QACXqZ,KAAM0wB,MAIZxzC,EAAAA,EAAAA,IAAU/D,EACZ,CACA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAEi3C,EAAM,OAAEhnC,EAAM,QAAE2W,GAAY6F,EAC9B7mB,GAAUuxC,EAAAA,EAAAA,IAA0Bn3C,EAAQi3C,GAClD,IAAKrxC,IAAYA,EAAQ4H,QAAQqZ,OAASjhB,EAAQ4H,QAAQqZ,KAAKhX,QAC7D,MAGF,MAAM,KAAEgX,GAASjhB,EAAQ4H,SAEnB,eAAEgqC,EAAc,YAAEC,EAAW,QAAE5nC,GAAYgX,EAAKhX,QAChD6nC,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjDtU,EAAatzB,EAAU,IAAIA,GAAW,GAE5C6nC,EAAkBnxC,KAAK0J,GAEvB2W,EAAQ9a,SAASgb,IACf,MAAM8wB,EAAoBzU,EAAW5uB,WAAWrO,GAAWA,EAAO4gB,SAAWA,IACvE+wB,EAAe1U,EAAWyU,GAC1BE,EAA+BD,EAAe,IAAKA,GAAiB,CAAE/wB,SAAQixB,YAAa,GAEjGD,EAAcC,aAAe,EACzB9nC,IAAWjQ,EAAOmY,gBACpB2/B,EAAcR,UAAW,GAGvBM,EACFzU,EAAWyU,GAAqBE,EAEhC3U,EAAW58B,KAAKuxC,EAClB,IAGF93C,GAASshB,EAAAA,EAAAA,IACPthB,EACA4F,EAAQnF,OACRmF,EAAQhE,GACR,CACE4L,QAAS,IACJ5H,EAAQ4H,QACXqZ,KAAM,IACDA,EACHhX,QAAS,IACJgX,EAAKhX,QACR2nC,eAAgBE,EAChBD,YAAaE,EACb9nC,QAASszB,QAMnBp/B,EAAAA,EAAAA,IAAU/D,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAE4F,GAAY6mB,GAEhBurB,EAAAA,EAAAA,IAAyBh4C,IAC3BgB,EAAQ2M,0BAA0B,CAAE/H,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEnF,EAAM,GAAEmB,EAAE,UAAE4pC,GAAc/e,EAC5B7mB,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,GAC5CgN,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQysB,EAAOhsB,QAEvC,IAAKmO,IAAShJ,EAAS,OAEvB5F,EAASozC,GAAgBpzC,EAAQS,EAAQmB,EAAI4pC,EAAW58B,EAAMhJ,EAAQ8H,WAAY9H,IAClF7B,EAAAA,EAAAA,IAAU/D,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJS,EAAM,GAAEmB,EAAE,MAAEq2C,EAAK,QAAEC,GACjBzrB,EACE7mB,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmB,GAGlD,KAFamB,EAAAA,EAAAA,IAAW/C,EAAQysB,EAAOhsB,UAEzBmF,EAAS,OAEvB,GAAIsyC,EAAS,CACX,IAAKtyC,EAAQ4H,QAAQozB,QAAS,OAC9B5gC,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmB,EAAI,CAC7C4L,QAAS,IACJ5H,EAAQ4H,QACXozB,QAAS,IACJh7B,EAAQ4H,QAAQozB,QACnBuX,cAAeD,OAIrBn0C,EAAAA,EAAAA,IAAU/D,EACZ,MAAWi4C,IACTj4C,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQmB,EAAI,CAC7C4L,QAAS,IACJyqC,MAGPl0C,EAAAA,EAAAA,IAAU/D,IAGZ,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAEqoB,EAAe,KAAEpkB,EAAI,UAAEwnB,GAAcgB,EAE7CzsB,EAAS,IACJA,EACHo4C,eAAgB,IACXp4C,EAAOo4C,eACV,CAAC/vB,GAAkB,IACbroB,EAAOo4C,eAAe/vB,IAAoB,CAAC,EAC/CA,kBACApkB,OACAwnB,gBAIN1nB,EAAAA,EAAAA,IAAU/D,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAES,EAAM,QAAEuT,EAAO,MAAEwD,GAAUiV,EAE/BjV,EAAMkS,MAAM,2BACdzhB,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ+R,IAAmB,IAAhBjc,GAAIrB,GAAOsd,EAClD7c,EAAQmqB,oCAAoC,CAAE1qB,SAAQF,SAAQ,IAIlEP,GAASshB,EAAAA,EAAAA,IAAkBthB,EAAQS,EAAQuT,EAAS,CAAEqkC,aAAc,+BACpEt0C,EAAAA,EAAAA,IAAU/D,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJS,EAAM,WAAE0E,EAAU,eAAEimB,EAAc,aAAEktB,GAClC7rB,EAEJzsB,GAASu4C,EAAAA,EAAAA,IAA0Bv4C,EAAQS,EAAQ0E,EAAYimB,EAAgBktB,IAE/Ev0C,EAAAA,EAAAA,IAAU/D,GACV,KACF,EAAC,IChpBL,MAEMw4C,IAA8BtrB,EAAAA,EAAAA,KASpC,WAEE,IAAIltB,GAASyJ,EAAAA,EAAAA,MAEbzJ,GAAS87B,EAAAA,EAAAA,IAAoB97B,EAAQ,IAChCA,EAAOwd,MAAMue,gBACb0c,MAEL10C,EAAAA,EAAAA,IAAU/D,GAEVy4C,GAAuB,CAAC,CAC1B,GAtB+B,KAE0D,GAEzF,IAAIA,GAAsD,CAAC,GAoB3D13C,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOisB,EAAAA,EAAAA,IAAc14C,EAAQysB,EAAO7qB,IAGtC,IAAK,aAqBH,OApBAqG,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ1L,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAC9CqsB,EAAO7qB,KAAO5B,EAAOmY,eAAiBsU,EAAO3I,KAAK4M,aAActJ,EAAAA,EAAAA,IAA2BpnB,KAEzFysB,EAAO3I,KAAK4M,WAAW1vB,EAAQ23C,iBAAiB,CAAE9S,WAAW,EAAMtlC,UAGvEP,EAAS,IACJA,EACHs4C,aAAc,CACZhnC,SAAU,CAAC,IAGjB,IAGFtR,GAAS+8B,EAAAA,EAAAA,IAAW/8B,EAAQysB,EAAO7qB,GAAI6qB,EAAO3I,MAC1C2I,EAAO9B,WACT3qB,GAAS44C,EAAAA,EAAAA,IAAmB54C,EAAQysB,EAAO7qB,GAAI6qB,EAAO9B,WAGjD3qB,EAGT,IAAK,0BACHgB,EAAQ63C,aAAa,CAAE5oC,OAAQwc,EAAO7qB,KACtC,MAGF,IAAK,wBACH,OAAOm7B,EAAAA,EAAAA,IAAW/8B,EAAQysB,EAAOxc,OAAQ,CAAE0tB,YAAalR,EAAOkR,cAGjE,IAAK,mBAGH,OA5DwB1tB,EA2DHwc,EAAOxc,OA3DY6oC,EA2DJrsB,EAAO/S,OA1D/C++B,GAAqBxoC,GAAU6oC,OAC/BN,KA6DE,IAAK,qBAAsB,CACzB,MAAM,GAAE52C,EAAE,SAAE+oB,GAAa8B,EAEzB,OAAOmsB,EAAAA,EAAAA,IAAmB54C,EAAQ4B,EAAI+oB,EACxC,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAE5V,EAAK,OAAEysB,GAAW/U,EAEpBssB,GAAqBnuB,EAAAA,EAAAA,IAAmB5qB,EAAQ+U,GACtD,IAAKgkC,GAAoBC,QACvB,OAGF,OAAOJ,EAAAA,EAAAA,IAAmB54C,EAAQ+U,EAAO,CACvCikC,QAAS,IACJD,EAAmBC,QACtBC,WAAYzX,IAGlB,EAnFJ,IAA8BvxB,EAAgB6oC,CAsF5B,KClGlB/3C,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAOkB,EAAAA,EAAAA,IAAiB3tB,EAAQysB,EAAO7qB,GAAI6qB,EAAOc,WAItC,KCHlBxsB,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOuX,WACFkV,EAAAA,EAAAA,IAAkBl5C,EAAQysB,EAAO7qB,KAEjC6gC,EAAAA,EAAAA,IAAqBziC,EAAQysB,EAAO7qB,IAG/C,IAAK,yBACH5B,EAAS,IACJA,EACHk8B,YAAa,CACX9H,QAAS,MAGbrwB,EAAAA,EAAAA,IAAU/D,GACV,MAEF,IAAK,eACHgB,EAAQwtC,aACR,MAEF,IAAK,yBACHxtC,EAAQm4C,uBACR,MAEF,IAAK,uBACHn4C,EAAQmsB,qBACR,MAEF,IAAK,wBACHnsB,EAAQo4C,sBACR,MAEF,IAAK,4BACHp4C,EAAQq4C,0BACR,MAEF,IAAK,4BAA6B,CAChC,MAAMC,EAAW7sB,EAAO9Z,cAAgB3S,EAAO8S,aAAaF,MAAMC,OAAS7S,EAAOoS,SAASQ,MAAMC,OACjG,IAAKymC,EAAU,OAAOt5C,EACtB,MAAMu5C,EAAW,CAAC9sB,EAAO7qB,MAAO03C,EAASn1C,QAAQvC,GAAOA,IAAO6qB,EAAO7qB,MACtEZ,EAAQw4C,mBAAmB,CAAE9mC,MAAO6mC,EAAU5mC,cAAe8Z,EAAO9Z,gBACpE,KACF,CAEA,IAAK,oBACH3R,EAAQy4C,kBACR,MAEF,IAAK,yBAA0B,CAE7B,MAAM/mC,EAAQ+Z,EAAO/Z,MAAMvO,QAAQu1C,GAAU/xC,QAAQ3H,EAAOoS,SAASwc,SAAS8qB,MAE9E14C,EAAQw4C,mBAAmB,CAAE9mC,QAAOC,cAAe8Z,EAAO9Z,gBAC1D,KACF,CAEA,IAAK,kBACH3R,EAAQ24C,gBACR,MAEF,IAAK,gBACH35C,EAAS,IACJA,EACHiY,SAAU,IACLjY,EAAOiY,SACV2hC,QAAS,IACJ55C,EAAOiY,SAAS2hC,QACnB,CAACntB,EAAOotB,KAAMptB,EAAOqtB,UAI3B/1C,EAAAA,EAAAA,IAAU/D,GACV,MAEF,IAAK,kCACHiI,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ1L,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClDJ,GAAS+5C,EAAAA,EAAAA,IAAqB/5C,EAAQysB,EAAO/X,IAAKnU,GAClDP,GAAS8gC,EAAAA,EAAAA,IAAe9gC,EAAQ+gC,EAAAA,GAAAA,eAA4BxgC,EAAM,KAEpEwD,EAAAA,EAAAA,IAAU/D,GACV,MAEF,IAAK,0BACHiI,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAS3J,IACjCA,EAASgiC,QAAQR,UAAYlX,EAAOkX,UACtC3iC,EAAQyH,gBAAgB,CAAEpB,eAAWxG,EAAWN,MAAO4B,EAASP,KAChEZ,EAAQ2jC,YAAY,CAAEpkC,MAAO4B,EAASP,KACxC,IAKU,KCjGlBb,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAOutB,EAAAA,EAAAA,IAAqBh6C,EAAQysB,EAAOwtB,SAAUxtB,EAAO/H,SAAU+H,EAAOytB,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJz5C,EAAM,QAAEqI,EAAO,SAAE4b,EAAQ,mBAAEw1B,GACzBztB,EACSzsB,EAAOmP,MAAM6O,KAAKvd,KAG7BT,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAAEqI,aAGxC9I,GAASm6C,EAAAA,EAAAA,IAAmBn6C,EAAQS,EAAQ,CAAEqI,UAAS4b,WAAUw1B,wBACjEn2C,EAAAA,EAAAA,IAAU/D,GACV,KACF,CAEA,IAAK,8BAA+B,CAClC,MAAM,OACJS,EAAM,QAAEgW,EAAO,QAAE3N,GACf2jB,EAEJzsB,GAAS0mB,EAAAA,EAAAA,IAAY1mB,EAAQS,EAAQgW,EAAS,CAAE3N,aAEhD/E,EAAAA,EAAAA,IAAU/D,GACV,KACF,EAGc,KCrClBe,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACFzsB,EACHo6C,cAAe,IACVp6C,EAAOo6C,cACV5/B,WAAW,EACXwrB,uBAAwBvZ,EAAOtsB,SAKrC,IAAK,mBACH,MAAO,IACFH,EACHo6C,cAAe,IACVp6C,EAAOo6C,cACV5iC,MAAOiV,EAAO7mB,UAMN,I,6BCblB7E,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAO4tB,KAAKzgB,gBACd,OAAI55B,EAAOs6C,WAAWC,uBAChB,mBAAoBv5C,GAASA,EAAQw5C,eAAe,CAAEC,cAAc,EAAMl6C,OAAOC,EAAAA,EAAAA,UAG9Ek6C,EAAAA,GAAAA,IAAgB16C,EAAQysB,EAAO4tB,KAAKz4C,IAI/C,MAAM+4C,GAAYC,EAAAA,GAAAA,IAAgB56C,EAAQysB,EAAO4tB,KAAKz4C,IAChDnB,EAASk6C,GAAWl6C,OAO1B,OANIA,IACFT,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClCo6C,eAAiBF,EAAUG,kBAAoB,GAAKnzC,QAAQgzC,EAAUI,cAAc56C,YAIjF66C,EAAAA,GAAAA,IACLh7C,EACAysB,EAAO4tB,KAAKz4C,IACZggB,EAAAA,EAAAA,IAAK6K,EAAO4tB,KAAM,CAAC,yBACnBx5C,EACA4rB,EAAO4tB,KAAKS,kBAEhB,CACA,IAAK,wBAOH,OANa/3C,EAAAA,EAAAA,IAAW/C,EAAQysB,EAAOhsB,UAErCT,GAAS8oB,EAAAA,EAAAA,IAAmB9oB,EAAQysB,EAAOhsB,OAAQ,CACjDw6C,YAAaxuB,EAAO4tB,KAAKz4C,MAGtB5B,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAEi7C,EAAW,aAAEF,EAAY,WAAE9zB,GAAewF,GAC5C,cAAEtU,GAAkBnY,EAG1BA,GAASyJ,EAAAA,EAAAA,MACTsxC,EAAajvC,SAASovC,IAChBA,EAAYt5C,KACd5B,GAASm7C,EAAAA,GAAAA,IACPn7C,EAAQi7C,EAAaC,EAAYt5C,GAAIs5C,EAAavzC,QAAQsf,IAAe9O,IAAkB+iC,EAAYt5C,IAE3G,IAEEqlB,IACFjnB,GAASg7C,EAAAA,GAAAA,IAAgBh7C,EAAQi7C,EAAa,CAC5Ch0B,gBAIJ,MAAM0zB,GAAYC,EAAAA,GAAAA,IAAgB56C,EAAQi7C,GACpCx6C,EAASk6C,GAAWl6C,OAM1B,OALIA,IACFT,GAASkkB,EAAAA,EAAAA,IAAWlkB,EAAQS,EAAQ,CAClCo6C,eAAiBF,EAAUG,kBAAoB,GAAKnzC,QAAQgzC,EAAUI,cAAc56C,WAGjFH,CACT,CACA,IAAK,kBAAmB,CACtB,IAAKo7C,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACTljC,GACEnY,GAEE,KAAEq6C,GAAS5tB,EAEjB,GAAI4uB,EACF,MAAmB,cAAfhB,EAAKiB,OACPt6C,EAAQu6C,mBAAmB,CAAEC,MAAO,QAChC,WAAYx6C,GAASA,EAAQy6C,OAAO,CAAEl7C,OAAOC,EAAAA,EAAAA,QAE1C,IACFR,KACCq6C,EAAKqB,YAAc,CAAEC,gBAAiBtB,UAI9C,EAKF,GAFmBA,GAAM/kB,UAAYnd,GAEH,cAAfkiC,EAAKiB,MAgBtB,OAfAv6B,EAAAA,EAAAA,KAAU,KACR/gB,GAASyJ,EAAAA,EAAAA,OACTmyC,EAAAA,GAAAA,IAAgB,CACdvB,OACAv2B,MAAM+3B,EAAAA,GAAAA,IAAoB77C,IAC1B,KAGJ87C,EAAAA,EAAAA,OACKC,EAAAA,EAAAA,IAAmC/7C,EAAQgB,EAASq5C,EAAK2B,SAASx7C,EAAAA,EAAAA,OACvER,EAAS,IACJA,EACHq7C,UAAWhB,IAGN93C,EAAAA,EAAAA,GAAevC,EAAQ,CAC5Bi8C,oBAAoB,IACnBz7C,EAAAA,EAAAA,MAEP,EAGc,I,gBCtHlBO,EAAAA,EAAAA,IAAiB,aAAa,CAACf,EAAQgB,EAASyrB,KAEvC,gCADCA,EAAO,UAEXxkB,OAAOoR,OAAOrZ,EAAOsZ,SAASxN,SAAQ1L,IAAmB,IAAhBwB,GAAIrB,GAAOH,EAClD,MAAM,aAAEsgC,IAAiBp/B,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QAEvD,GAAI+mB,GAAgB,WAAYA,GAAgB,cAAeA,EAAc,CAC3E,MAAM96B,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQ0gC,EAAajgC,OAAQigC,EAAar5B,WAE5E,GAAIzB,GAAWA,EAAQ4H,QAAQozB,QAAS,CACtC,MAAM,OAAE0J,EAAM,SAAEF,EAAQ,MAAEt5B,GAAUlL,EAAQ4H,QAAQozB,QAEpD5/B,EAAQuL,iBAAiB,CACvBhM,QACAqF,QAASN,EAAAA,GAAuB,kBAAmB,EACjD42C,EAAAA,GAAAA,GAAe5R,EAAQF,EAAU9kC,EAAAA,KAAgC2gC,MACjEn1B,KAGN,CACF,CAKKqrC,EAAAA,KACHn8C,GAAS6Z,EAAAA,EAAAA,IAAa7Z,EAAQO,IAG5BksB,EAAOmY,MAAQlE,GAAgB,SAAUA,GAAgBA,EAAakE,OAASnY,EAAOmY,OAI1F5kC,GAASuC,EAAAA,EAAAA,GAAevC,EAAQ,CAC9B2Z,QAAS,KACJrY,EAAAA,EAAAA,IAAetB,EAAQO,GAAOoZ,QACjCD,OAAQ,SAETnZ,GAAM,GAKC,I,qFC/CH,SAAS67C,GAAgBC,GACtC,MAAMC,GAAeC,EAAAA,GAAAA,GAAgBF,IAErCG,EAAAA,EAAAA,KAAU,KAAMriC,EAAAA,EAAAA,IAAemiC,IAAe,CAACA,GACjD,C,gBCPA,MAAMG,GAAelsC,SAASmsC,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAClEC,GAA6B,4EAiCnC,SAASC,GAAa7qC,GACpBA,EAAE8qC,gBACJ,C,oGCjCA,MAQA,IAAeC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE36C,GAAW26C,EACbC,GAAkBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB96C,GAG3E,OAAO46C,EAAkBG,EAAAA,GAAAA,cAACH,EAAoBD,QAAYp8C,CAAS,I,uCCArE,MAmBA,IAAem8C,EAAAA,EAAAA,KAnBqB58C,IAAuB,IAAtB,cAAEk9C,GAAel9C,GACpDm9C,EAAAA,GAAAA,MACA,MAAMC,GAA2BzlC,EAAAA,EAAAA,MAQjC,IANAykC,EAAAA,EAAAA,KAAU,KACJc,IACFG,EAAAA,GAAAA,GAAeD,EACjB,GACC,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEH,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wBAAuB+sB,EAAAA,GAAAA,IAAqBF,GAAgC,I,2ECtBxF,IAAKG,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtBv4C,EACAu0B,EACAxC,EACAymB,EACAhnC,EACAinC,GAEA,IAAIpkC,EAUAjV,EAWAR,EAWJ,OA3BEyV,EC5BW,WACb,MAAOqkC,EAAUC,IAAeC,EAAAA,EAAAA,IAASx6C,OAAOy6C,UAAUC,QAgB1D,OAdA3B,EAAAA,EAAAA,KAAU,KACR,SAAS4B,IACPJ,EAAYv6C,OAAOy6C,UAAUC,OAC/B,CAKA,OAHA16C,OAAO46C,iBAAiB,SAAUD,GAClC36C,OAAO46C,iBAAiB,UAAWD,GAE5B,KACL36C,OAAO66C,oBAAoB,UAAWF,GACtC36C,OAAO66C,oBAAoB,SAAUF,EAAa,CACnD,GACA,IAEIL,CACT,CDM0BQ,IACoB,8BAApB3kB,EAEbxC,EACAumB,GAAiBa,QAEjBb,GAAiBc,OAJjBd,GAAiBe,kBAS1Bj6C,EADEiV,IAAWikC,GAAiBc,QAAUX,EAC7B,OACFD,EACE,eACFhnC,EACE,YAEA,UAIT6C,IAAWikC,GAAiBe,kBAC9Bz6C,EAAOoB,EAAK,qBACHqU,IAAWikC,GAAiBa,UACrCv6C,EAAOoB,EAAK,aAGG,iBAAbZ,IACFR,EAAOA,EAAM06C,cAAchuC,QAAQ,OAAQ,KAGtC,CACLiuC,iBAAkBllC,EAClBmlC,yBAA0Bp6C,EAC1Bq6C,qBAAsB76C,EAE1B,C,8GE5CA,MA0BA,IAAe+4C,EAAAA,EAAAA,KA1B+B58C,IAIxC,IAJyC,iBAC7Cw+C,EAAgB,qBAChBE,EAAoB,QACpBC,GACD3+C,EACC,MAAMiF,GAAO25C,EAAAA,GAAAA,KAEb,OACE3B,EAAAA,GAAAA,cAAA,OAAKz7C,GAAG,0BAA0Bq9C,IAAK55C,EAAK65C,MAAQ,WAAQr+C,EAAWk+C,QAASA,GAC9E1B,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,UACf/B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,cACb0sB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAWV,EAAkBhP,KAAK,aAC3CkP,IAGLzB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLknC,KAAK,OACLJ,MAAM,qBAEN/B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,qBAEd,I,sCCvCV,SAAyD,uBCmEzD,IAAeqsB,EAAAA,EAAAA,KA9CyB58C,IAIlC,IAJmC,SACvCurC,EAAQ,SACR8T,EAAQ,UACR9uB,GACDvwB,EACC,MAAMs/C,GAAcC,EAAAA,EAAAA,IAAsBhU,EAASn5B,YAE7CotC,GAAmBC,EAAAA,GAAAA,GAAUJ,OAAyB5+C,EAAd6+C,GAExCI,GAAkBC,EAAAA,EAAAA,KAAQ,IACzBC,EAAAA,GACE3/C,MAAMof,KAAK,CAAEtf,OAbF,IAa2BwF,KAAI,IAqCrD,WACE,MAAMolC,GAAK,GAAqB,GAAhBj9B,KAAKob,WAAkBpb,KAAKob,SAAW,GAAM,GAAK,GAC5D0jB,EAAI,GAAqB,GAAhB9+B,KAAKob,SAEpB,MAAQ,eAAc6hB,MAAM6B,EAAI,MAAM7B,KAAK6B,GAC7C,CA1C2DqT,KADjB,IAErC,IAEH,GAAKL,GAAqBH,EAI1B,OACEpC,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GDxCG,uBCwCyBvvB,IACzCmvB,EAAMn6C,KAAKw6C,IACV,MAAMC,EAAS,wBAAuBD,OACtC,OAAIV,EAEApC,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACV7tC,WAAYm5B,EAASn5B,WACrBme,UAAW2vB,GACXF,MAAOA,EACPG,qBAAmB,IAMvBlD,EAAAA,GAAAA,cAAA,OACEmD,IAAKZ,EACLa,IAAI,GACJ9vB,UAAW2vB,GACXF,MAAOA,GACP,IAGF,IC/CV,IAAepD,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE36C,GAAW26C,EACbyD,GAAmBvD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB96C,GAG7E,OAAOo+C,EAAmBrD,EAAAA,GAAAA,cAACqD,EAAqBzD,QAAYp8C,CAAS,ICiFvE,IAAem8C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAY3gD,IAC9B,MAAM,cAAEmY,GAAkBnY,EAG1B,MAAO,CACL29B,aAHkBxlB,GAAgB4L,EAAAA,EAAAA,IAAW/jB,EAAQmY,QAAiBtX,IAG5C88B,YAC3B,GANiBgjB,EApEiBvgD,IAAqB,IAApB,YAAEu9B,GAAav9B,EACnD,MAAM,eAAEwgD,EAAc,gBAAEC,IAAoB3nC,EAAAA,EAAAA,MAGtC4nC,GAAYC,EAAAA,EAAAA,IAA0B,OACrCC,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQjkB,GAAakkB,MAA4B,IAApBlkB,EAAYkkB,MAAej1C,KAAKC,MAAgC,KAAxBi1C,EAAAA,EAAAA,WAA+BjhD,GAC1GkhD,EAAAA,GAAAA,GAAWlB,EAAiBe,IAE5BI,EAAAA,GAAAA,IAAsBh0C,IAAuB,IAArBi0C,GAAgBj0C,EAClCgzC,GAAoBrjB,GAAeskB,GAAmBtkB,EAAYnrB,aAAeyvC,EAAgBzvC,aACnG6uC,IACAH,IACF,GACC,CAACvjB,EAAaqjB,EAAkBK,EAAYH,IAE/C,MAAMgB,GAAuBC,EAAAA,EAAAA,KAAajwC,IACxC+uC,IACAL,EAAe,CAAEjjB,YAAazrB,GAAU,GACvC,CAAC+uC,EAAsBL,KAE1BmB,EAAAA,GAAAA,GAAWT,EAAYF,EA5BE,UA4BmCvgD,GAE5D,MAAMuhD,GAAyBD,EAAAA,EAAAA,KAAY,KACzCX,GAAkB,GACjB,CAACA,IAEJ,OACEnE,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iBACZhpB,QAAQy5C,GAAiBzjB,IACxB0f,EAAAA,GAAAA,cAACgF,GAAiB,CAChB1W,SAAUhO,EACV8hB,UAAQ,EACR9uB,UAAU,wBAGd0sB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLgqC,IAAKxB,EACLyB,QAASb,EACTlC,KAAK,UACLJ,MAAM,cACNzuB,UAAU,eACVouB,QAASqD,GAERzkB,EACC0f,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACVxG,IAAKlc,EAAYnrB,WACjBA,WAAYmrB,EAAYnrB,WACxBgtC,KAvDc,GAwDdgD,UAAWC,EAAAA,MAEXpF,EAAAA,GAAAA,cAACqF,GAAAA,EAAW,OAElBrF,EAAAA,GAAAA,cAACqD,GAAgB,CACfiC,gBAAiB7B,EACjBx+C,OAAQi/C,EACRqB,oBAAqBV,EACrBW,QAASpB,IAEP,KC6XV,IAAezE,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IACC,MAAMmC,GAAWb,EAAAA,EAAAA,IAAetB,IAE9BkB,MAAO4hD,EAAW,eAAE5zC,EAAc,OAAEzO,EAAM,KAAE6M,GAC1CnL,EAAS0M,cACP,cACJsJ,EAAa,gBAAEyhB,EAAe,UAAExC,EAAS,gBAAEzgB,GACzC3W,GACE,4BAAE+iD,EAA2B,eAAEC,GAAmBhjD,EAAOiY,SAASC,MAExE,MAAO,CACL4qC,cACAtoC,YAAWtL,GAAiBvH,QAAQuH,EAAeC,OAASD,EAAexJ,UAC3EyS,gBACA8qC,mBAAoBxiD,EACpByiD,WAAY51C,EACZ00B,OAAOmhB,EAAAA,EAAAA,IAAYnjD,GACnBgjD,iBACAppB,kBACAxC,YACAgsB,kBAAmBz7C,SAAQhH,EAAAA,EAAAA,IAAyBX,IACpD+iD,8BACA57B,sBAAsBC,EAAAA,EAAAA,IAA2BpnB,GACjDqjD,eAAgB17C,QAAQ3H,EAAOmP,MAAMwiC,QAAQtD,QAC7Cj0B,YAAazS,QAAQ3H,EAAOyY,SAAS2B,aACrCkpC,WAAY37C,QAAQxF,EAASmhD,YAC7B3sC,kBACA4sC,gBAAgBC,EAAAA,EAAAA,IAAqBxjD,GACtC,GA7Be2gD,EAxX8BvgD,IA4B5C,IA5B6C,iBACjDqjD,EAAgB,QAChBj2C,EAAO,eACPk2C,EAAc,cACdC,EAAa,gBACbC,EAAe,iBACfC,EAAgB,iBAChBC,EAAgB,iBAChBC,EAAgB,QAChBC,EAAO,YACPlB,EAAW,UACXtoC,EAAS,qBACT2M,EAAoB,cAEpBhP,EAAa,mBACb8qC,EAAkB,WAClBC,EAAU,MACVlhB,EAAK,gBAELpI,EAAe,UACfxC,EAAS,kBACTgsB,EAAiB,4BACjBL,EAA2B,eAC3BM,EAAc,YACdjpC,EAAW,eACXmpC,EAAc,gBAEd5sC,GACDvW,EACC,MAAM,SACJ4D,EAAQ,oBACRigD,EAAmB,iBACnBC,EAAgB,sBAChBC,EAAqB,mBACrBC,EAAkB,WAClBC,EAAU,0BACVjpC,IAIElC,EAAAA,EAAAA,MAEE7T,GAAO25C,EAAAA,GAAAA,MACP,SAAE0C,IAAaC,EAAAA,EAAAA,MACf2C,EAAU92C,IAAY+2C,EAAAA,GAAAA,SAGtBC,GAAqBzE,EAAAA,EAAAA,KAAQ,IAC1BmD,GACHuB,EAAAA,GAAAA,IAAmB,IAAI73C,KAAkB,IAAbs2C,SAC5BriD,GACH,CAACqiD,IAEEwB,GAA2BnH,EAAAA,GAAAA,MAAoChM,EAAAA,MAAqBoT,YAAc,GAElG,iBAAE/F,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6BjB,GAC3Ev4C,EAAMu0B,EAAiBxC,EAAWgsB,EAAmBL,GAA8BM,GAG/EuB,GAAyBrI,EAAAA,GAAAA,IAAiBtqC,IAC9CA,EAAE8qC,iBACF9qC,EAAE4yC,kBACEzqC,EACFiqC,IAEAjpC,EAA0B,CAAE5J,OAAQ6J,EAAAA,GAAAA,kBACtC,KAGFypC,EAAAA,GAAAA,GAAWvB,EAAiB,CAC1B,eAAgBqB,EAChB,cAAeA,EACf,eAAgBA,KACZG,EAAAA,IAAU,CAAE,QAASH,SACvB/jD,GAIJ,MAAMmkD,GAA8DjF,EAAAA,EAAAA,KAAQ,IACnE/xC,IAAA,IAAC,UAAEi3C,EAAS,OAAE3iD,GAAQ0L,EAAA,OAC3BqvC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLiqC,OAAQ+B,IAAY5C,EACpBlC,KAAK,UACLJ,MAAM,cACNzuB,UAAWruB,EAAS,SAAW,GAE/By8C,QAASuF,EAAUW,EAAY,IAAMjB,IACrCkB,UAAWZ,EAAUj/C,EAAK,qBAAuB,uBAEjDg4C,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GACd,gDAKK,GAEV,CAACoE,EAAS5C,EAAUr8C,EAAM2+C,IAEvBmB,GAAoB5I,EAAAA,GAAAA,IAAgB,KACnCuG,GACHa,EAAc,GAChB,IAGIyB,GAAyB7I,EAAAA,GAAAA,IAAgB,KAC7C2H,EAAiB,CAAEnB,6BAA8BA,GAA8B,IAG3EsC,GAAoB9I,EAAAA,GAAAA,IAAgB,KACxCv4C,EAAS,CAAEpC,GAAIuW,EAAepW,sBAAsB,GAAO,IAoCvDujD,GAAqB/I,EAAAA,GAAAA,IAAgB,KACzC6H,EAAmB,CAAEp2B,SAAU3oB,EAAK,0BAA2B,IAO3DkgD,GAAmBhJ,EAAAA,GAAAA,IAAgB,KACvC8H,GAAY,IAGRmB,EACJ79C,QAAQs7C,IACLz1C,IAAY+2C,EAAAA,GAAAA,cACZ/2C,IAAY+2C,EAAAA,GAAAA,UAGjB/H,EAAAA,EAAAA,KAAU,IAAOgJ,GAAkBC,EAAAA,GAAAA,IAAsB,IAAMzB,WAAanjD,GAAY,CAAC2kD,EAAiBxB,IAE1G,MAAM0B,GAAyBl4C,IAAY+2C,EAAAA,GAAAA,SACvCl/C,EAAK,iBACLA,EAAK,UAEHsgD,GAAgBC,EAAAA,IAAW,yBAA0CtuC,EAAAA,IAAQuuC,UAAe94C,UAK5F+4C,IAAeC,EAAAA,GAAAA,OAGf,uCACJC,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsCzC,GAGpC0C,IAAYpF,EAAAA,EAAAA,IAAuB,OACzCqF,EAAAA,GAAAA,GAAgBD,IAEhB,MAAME,IAAYtG,EAAAA,EAAAA,KAAQ,IACxB1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAK,iBACLxH,QAASsG,GAERhgD,EAAK,kBAEPsR,EAAgBC,UACfymC,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAK,UACLxH,QAASgF,GAET1G,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,kBAAkBtrB,EAAK,kBACtCq/C,EAA2B,GAC1BrH,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eAAe+zB,IAIpCrH,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAK,OACLxH,QAAS+E,GAERz+C,EAAK,aAERg4C,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAK,WACLxH,QAAS8E,GAERx+C,EAAK,aAqBRg4C,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAK,OACLxH,QAASuG,GAERjgD,EAAK,uBAmCT,CACDq/C,EAA0Br/C,EAAMigD,EAAoBD,EACpDtB,EAAkBD,EAAkBD,EAAkBltC,IAGxD,OACE0mC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kBACb0sB,EAAAA,GAAAA,cAAA,OAAKz7C,GAAG,iBAAiB+uB,UAAU,cAAc2xB,IAAK6D,IACnD9gD,EAAK65C,OAAS7B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,uBAC9B0sB,EAAAA,GAAAA,cAACmJ,GAAAA,EAAY,CACXC,QAASzB,EACT0B,OAAS,GAAEC,EAAAA,OAAYhB,KACvBh1B,WAAWuvB,EAAAA,GAAAA,GACT,YACA76C,EAAK65C,OAAS,MACduE,GAAoBp+C,EAAK65C,OAAS,gBAClC8G,GAAuCn1B,SAAWxrB,EAAK65C,OAAS,qBAIhEsG,EAAkB,4BAA8B,2BAElDoB,UAAWnD,GAAoBp+C,EAAK65C,MAAQ,QAAU,OACtD2H,iBAAkBrjD,EAAAA,MAAgBsiD,GAAe,QAAKjlD,EACtDimD,gBAAiBzhD,EAAK65C,MAAQ+G,QAAkCplD,GAE/DwlD,IAEHhJ,EAAAA,GAAAA,cAAC0J,GAAAA,EAAW,CACVC,QAAQ,wBACRC,yBAAyB,aACzBt2B,WAAWuvB,EAAAA,GAAAA,GACR+C,GAAsBC,EAAc,wBAAqBriD,EAC1D4iD,GAAoB,sBACpB,gBAEFna,MAAOsa,OAAkB/iD,EAAa6iD,GAAkBZ,EACxDoE,QAAS1B,EACThrC,UAAWA,GAA0C,cAA7BqkC,EACxBsI,aAA2C,cAA7BtI,EAA2C,YAASh+C,EAClEumD,uBAAqD,cAA7BvI,GAAsD,UAAV7c,EAAoB,aAAUnhC,EAClGwmD,YAAa3B,GACb4B,aAAa,MACbC,SAAU5/C,QAAQs7C,GAAsBC,GACxCsE,SAAU7D,EACVK,QAASA,EACTyD,QAAStC,EACTuC,eAA6C,cAA7B7I,EAA2CuG,OAAyBvkD,GAEnF2jD,GACCnH,EAAAA,GAAAA,cAACsK,GAAAA,EAAkB,CACjBpB,KAAK,WACLz1C,MAAO0zC,EACP+C,UAAQ,EACR1wC,YAAalP,QAAQs7C,GACrBtyB,UAAU,cACVouB,QAASkF,EACT2D,SAjSmB,CAAEt6C,UAAMzM,KAoS9BoiD,GACC5F,EAAAA,GAAAA,cAACsK,GAAAA,EAAkB,CACjBE,aAAc5E,EACdlE,QAASoF,EACToD,UAAQ,EACRK,SAxSmB,CAAEhmD,QAAIf,MA4S9BsmB,GAAwBk2B,EAAAA,GAAAA,cAACyK,GAAY,MACrC1tC,GACCijC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLiqC,QAASb,EACTlC,KAAK,UACLJ,MAAM,cACN8F,UAAY,GAAE7/C,EAAK,8DACnB05C,QAASwG,EACT50B,WAAWuvB,EAAAA,GAAAA,IAAgB/4B,GAAwB,kBAEnDk2B,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,oBAGjB0sB,EAAAA,GAAAA,cAAC0K,GAAAA,EAAc,CACbzlD,OAAqC,YAA7Bu8C,EACRmJ,UAAQ,EACRr3B,UAAU,4BAEV0sB,EAAAA,GAAAA,cAAC4K,GAAuB,CACtBrJ,iBAAkBA,EAClBE,qBAAsBA,EACtBC,QAASqG,MAIX,K,oDC9ZV,MA4QA,IAAepI,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IACC,MACEmlB,aACEnH,KAAM8zB,EACNttC,WAAY0jD,EACZzyB,QAAS0yB,GAEXh5C,OACEwiC,SAAS,SACPyW,IAEH,cACDjwC,EAAa,aACbuhB,EAAY,gBACZ/iB,GACE3W,GACE,4BAAEqoD,EAA2B,iBAAEtW,IAAqBzwC,EAAAA,EAAAA,IAAetB,GAEzE,MAAO,CACL8xC,kBACAqW,oBACAD,mBACAnW,mBACA55B,gBACAuhB,eACA2uB,8BACAC,iBAAkB3gD,QAAQygD,GAAUjoD,QACpCooD,YAAYh4B,EAAAA,GAAAA,GAAmBvwB,EAAQ,iBACvCwoD,kBAAkBj4B,EAAAA,GAAAA,GAAmBvwB,EAAQ,mBAC7C2W,kBACD,GA/BegqC,EAzQ2BvgD,IAiBzC,IAjB0C,gBAC9CqoD,EAAe,uBACfC,EAAsB,0BACtBC,EAAyB,gBACzB7W,EAAe,iBACfoW,EAAgB,iBAChBnW,EAAgB,cAChB55B,EAAa,iBACbywC,EAAgB,aAChBlvB,EAAY,4BACZ2uB,EAA2B,WAC3BE,EAAU,qBACVM,EAAoB,kBACpBV,EAAiB,iBACjBK,EAAgB,iBAChBF,EAAgB,gBAChB3xC,GACDvW,EACC,MAAM,gBACJ0oD,EAAe,oBACfC,EAAmB,SACnB/kD,EAAQ,yBACRglD,EAAwB,0BACxBC,EAAyB,mBACzBC,EAAkB,sBAClBj0B,IACE/b,EAAAA,EAAAA,MAGEiwC,GAAgBpI,EAAAA,EAAAA,IAAuB,MAEvC17C,GAAO25C,EAAAA,GAAAA,MAEbxC,EAAAA,EAAAA,KAAU,KACJ9iB,GACFovB,GACF,GACC,CAACpvB,EAAcovB,IAElB,MAAMM,GAAgCrJ,EAAAA,EAAAA,KAAQ,KACrC,CACLn+C,GAAIynD,EAAAA,IACJv4C,MAAOo3C,IAAmB,KAAOmB,EAAAA,IAAgBhkD,EAAK,uBAAyBA,EAAK,kBACpFggB,gBAAiB5jB,EAAAA,EACjB6nD,gBAAiB7nD,EAAAA,KAElB,CAACymD,EAAkB7iD,IAEhBkkD,GAAmBxJ,EAAAA,EAAAA,KAAQ,IACxBmI,EACHA,EAAiBviD,KAAK/D,GAClBA,IAAOynD,EAAAA,IACFD,EAGFtX,EAAgBlwC,IAAO,CAAC,IAC9BuC,OAAOwD,cACR9G,GACH,CAACixC,EAAiBsX,EAAgBlB,IAE/BsB,EAAsBD,GAAkBh1C,WAAW6Q,GAAWA,EAAOxjB,KAAOynD,EAAAA,MAC5EI,EAAqBD,IAAwBzX,EAC7C2X,EAhEmB,IAgEsB3X,EAEzC4X,GAAqBpM,EAAAA,GAAAA,MACrBqM,GAAa7J,EAAAA,EAAAA,KAAQ,KACzB,IAAKwJ,IAAqBA,EAAiBppD,OACzC,OAGF,MAAMH,GAASyJ,EAAAA,EAAAA,MAEf,OAAO8/C,EAAiB5jD,KAAI,CAACyf,EAAQ9F,KACnC,MAAM,GAAE1d,EAAE,MAAEkP,GAAUsU,EAChB4e,EAAYpiC,IAAOynD,EAAAA,KAAiB/pC,EAAIipC,EAAa,EAGrDsB,EAAiB,GAwCvB,OA1CuBC,EAAAA,EAAAA,IAAqB9pD,EAAQ4B,IAKlDioD,EAAetjD,KAAK,CAClBuK,MAAOzL,EAAK,6BACZkhD,KAAM,OACNwD,QAASA,KAEH5B,EAAkBvmD,IAAKzB,QAAUqoD,EACnCvzB,EAAsB,CACpBhf,MAAO,oBAGT+yC,EAAyB,CACvB1X,SAAU1vC,GAEd,IAKFA,IAAOynD,EAAAA,MACTQ,EAAetjD,KAAK,CAClBuK,MAAOzL,EAAK,cACZkhD,KAAM,OACNwD,QAASA,KACPb,EAAmB,CAAE5X,SAAU1vC,GAAK,IAIxCioD,EAAetjD,KAAK,CAClBuK,MAAOzL,EAAK,oBACZkhD,KAAM,SACNyD,aAAa,EACbD,QAASA,KACPd,EAA0B,CAAE3X,SAAU1vC,GAAK,KAK1C,CACLA,KACAkP,QACAm5C,WAAYN,EAAmB/nD,IAAK+iD,WACpCuF,cAAeviD,QAAQgiD,EAAmB/nD,IAAKuoD,oBAC/CnmB,YACA6lB,eAAgBA,GAAgB1pD,OAAS0pD,OAAiBhpD,EAC3D,GACD,GACD,CAAC0oD,EAAkBI,EAAoBtkD,EAAMkjD,EAAYJ,EAAmBK,IAEzE4B,GAAkB7N,EAAAA,GAAAA,IAAiBl9B,IACvC0pC,EAAoB,CAAEhX,iBAAkB1yB,GAAS,CAAEvU,uBAAuB,KAC1Eu/C,EAAAA,EAAAA,KAAyB,KAI3B7N,EAAAA,EAAAA,KAAU,KACHoN,GAAYzpD,QAIb4xC,GAAoB6X,EAAWzpD,QACjC4oD,EAAoB,CAAEhX,iBA9ID,GA+IvB,GACC,CAACA,EAAkB6X,EAAYb,KAElCvM,EAAAA,EAAAA,KAAU,KACR,GAAKhwC,EAAAA,IAAiBo9C,GAAYzpD,SAAUyoD,EAI5C,OAAO0B,EAAAA,GAAAA,IAAcnB,EAAct4B,QAAU,CAC3C05B,wBAAyB,aACzBC,QAAUA,CAACv4C,EAAGlH,IACRA,IAAc0/C,GAAAA,GAAAA,MAChB1B,EACE,CAAEhX,iBAAkBjkC,KAAKq9B,IAAI4G,EAAmB,EAAG6X,EAAWzpD,OAAS,IACvE,CAAE2K,uBAAuB,KAEpB,GACEC,IAAc0/C,GAAAA,GAAAA,QACvB1B,EAAoB,CAAEhX,iBAAkBjkC,KAAKC,IAAI,EAAGgkC,EAAmB,IAAM,CAAEjnC,uBAAuB,KAC/F,IAKX,GACD,CAACinC,EAAkB6X,EAAYhB,EAAkBG,IAEpD,MAAM2B,GAAwB3J,EAAAA,EAAAA,MAC9B2J,EAAsB75B,SAAW64B,GACjClN,EAAAA,EAAAA,KAAU,IAAOkO,EAAsB75B,SAAU40B,EAAAA,GAAAA,IAAsB,KACjEiF,EAAsB75B,SACxBk4B,EAAoB,CAAEhX,iBA9KD,GA+KvB,SACGlxC,GAAY,CAACkxC,EAAkBgX,KAEpC4B,EAAAA,GAAAA,GAAe,CACbp5C,UAAWm4C,EACXkB,OAAQA,IAAM7B,EAAoB,CAAEhX,iBApLb,GAoLqD,CAAEjnC,uBAAuB,OAGvG0xC,EAAAA,EAAAA,KAAU,KACR,MAAMqO,EAAiB54C,IACrB,GAAIA,EAAE64C,SAAW74C,EAAE84C,UAAY94C,EAAEg0B,KAAK+kB,WAAW,UAAYpB,EAAY,CACvE,MAAO,CAAEqB,GAASh5C,EAAEg0B,KAAKvc,MAAM,cAAgB,GAC/C,IAAKuhC,EAAO,OAEZ,GA9LsB,MA8LlBA,EAEF,YADAjnD,EAAS,CAAEpC,GAAIuW,EAAepW,sBAAsB,IAItD,MAAMqjB,EAAS/c,OAAO4iD,GAAS,EAC/B,GAAI7lC,EAASwkC,EAAWzpD,OAAS,EAAG,OAEpC4oD,EAAoB,CAAEhX,iBAAkB3sB,GAAU,CAAEta,uBAAuB,IAC3EmH,EAAE8qC,gBACJ,GAKF,OAFAxsC,SAAS8tC,iBAAiB,UAAWwM,GAAe,GAE7C,KACLt6C,SAAS+tC,oBAAoB,UAAWuM,GAAe,EAAK,CAC7D,GACA,CAAC1yC,EAAeyxC,EAAY5lD,EAAU+kD,IAEzC,MACEmC,aAAcC,EAAuB,qBAAEC,IACrCC,EAAAA,GAAAA,IAAmBnD,OAAkBrnD,GAAW,GAEpD,SAASyqD,EAAiB/5C,GACxB,MAAMg6C,EAAetjD,OAAOoR,OAAOy4B,GAChC3kC,MAAKa,IAAA,IAAC,GAAEpM,GAAIoM,EAAA,OAAKpM,IAAOgoD,EAAY7X,GAAkBnwC,EAAE,IACrD4pD,EAAWD,IAAiB9B,EAElC,OACEpM,EAAAA,GAAAA,cAACoO,GAAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClCla,SAAUka,EAAWD,EAAa3pD,QAAKf,EACvC0Q,SAAUA,EACVq3C,iBAAkBA,EAClBlvB,aAAcA,EACd+uB,gBAAiBA,EACjBC,uBAAwBA,EACxBC,0BAA2BA,EAC3BgD,kBAAmBrD,IAAqB3xC,EAAgBC,SACxDD,gBAAiBA,EACjBi1C,qBAAmB,GAGzB,CAEA,MAAMC,EAAsBjC,GAAcA,EAAWzpD,OAAS,EAE9D,OACEk9C,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GACT,cACA2L,GAAuBhD,GAAwB,6BAGhDgD,EACCxO,EAAAA,GAAAA,cAACyO,GAAAA,EAAO,CACNC,2BAA2B,cAC3BC,KAAMpC,EACNqC,UAAWla,EACXma,YAAa9B,EACb+B,YAAU,IAEVhB,EACF9N,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,mBAAoBkL,UACjDvqD,EACJw8C,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTiD,IAAK6G,EACLvZ,KAAMyY,EAA8B,OAAShjD,EAAK65C,MAAQ,oBAAsB,iBAChFI,UAAWvN,EACXqa,YAAaP,EAAsBjC,EAAWzpD,YAASU,GAEtDyqD,GAEC,K,gBCtTV,MAOA,IAAetO,EAAAA,EAAAA,KAPwBC,IACrC,MAAMoP,GAAalP,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOiP,EAAahP,EAAAA,GAAAA,cAACgP,EAAepP,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICG7D,IAAetP,EAAAA,EAAAA,KAPyBC,IACtC,MAAMsP,GAAcpP,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOmP,EAAclP,EAAAA,GAAAA,cAACkP,EAAgBtP,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,I,gBCS/D,MAgEA,IAAetP,EAAAA,EAAAA,KAhEqB58C,IAK9B,IAL+B,QACnCosD,EAAO,iBACPC,EAAgB,aAChBC,EAAY,WACZC,GACDvsD,EACC,MAAOwsD,EAAYC,IAAiB5O,EAAAA,EAAAA,KAAS,IAE7CzB,EAAAA,EAAAA,KAAU,KACHgQ,GACHK,GAAc,EAChB,GACC,CAACL,IAEJ,MAAMnnD,GAAO25C,EAAAA,GAAAA,KAEP8N,GAAe5M,EAAAA,GAAAA,GACnB,gBACAsM,GAAW,WACXI,GAAc,gBAGVG,GAAmB5K,EAAAA,EAAAA,KAAY,KACnC0K,GAAeD,EAAW,GACzB,CAACA,IAEEI,GAAc7K,EAAAA,EAAAA,KAAY,KAC9B0K,GAAc,EAAM,GACnB,IAEGxG,GAAYtG,EAAAA,EAAAA,KAAQ,IACxB1C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,UAAUxH,QAAS2N,GAAernD,EAAK,eACtDg4C,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,QAAQxH,QAAS4N,GAAatnD,EAAK,aAClDg4C,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,OAAOxH,QAAS0N,GAAmBpnD,EAAK,sBAExD,CAACA,EAAMqnD,EAAcC,EAAYF,IAEpC,OACEpP,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWm8B,EAAc7N,IAAK55C,EAAK65C,MAAQ,WAAQr+C,GACtDw8C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,UACNzuB,UAAWi8B,EAAa,SAAW,GACnC7N,QAASgO,EACT7H,UAAW7/C,EAAKunD,EAAa,QAAU,mBACvCK,UAAW,GAEX5P,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,8BACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAEf0sB,EAAAA,GAAAA,cAAC6P,GAAAA,EAAI,CACH5qD,OAAQsqD,EACRhG,UAAWvhD,EAAK65C,MAAQ,OAAS,QACjCiO,UAAU,SACVC,WAAS,EACTvK,QAASmK,GAER3G,GAEC,I,gBClCV,MAAMgH,GAA0BplD,OAAOC,KAAKq8C,EAAAA,IAAmBpkD,OAAS,EAGxE,IAAImtD,GAEJ,MAoMA,IAAetQ,EAAAA,EAAAA,KApMgB58C,IAezB,IAf0B,QAC9BoN,EAAO,YACPs1C,EAAW,WACXI,EAAU,gBACVU,EAAe,eACfF,EAAc,qBACd6J,EAAoB,gBACpB9E,EAAe,kBACfrxC,EAAiB,iBACjBwxC,EAAgB,cAChBjF,EAAa,gBACb6J,EAAe,uBACf9E,EAAsB,QACtB1E,EAAO,cACPyJ,GACDrtD,EACC,MAAM,gBAAE+C,IAAoB+V,EAAAA,EAAAA,OACrBw0C,EAAsBC,IAA2B1P,EAAAA,EAAAA,IAASzxC,EAAAA,KAE3D,uBACJohD,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBpF,GAClBqF,EAAuBrF,GAAoBp7C,IAAY+2C,EAAAA,GAAAA,SACvD2J,EAAsBD,GAAwBF,GAGlD7C,aAAciD,EACd/C,qBAAsBgD,IACpB/C,EAAAA,GAAAA,GAAkBj0C,GAEhBi3C,GAAgBtN,EAAAA,EAAAA,KAAO,GAEvBuN,GAAmB/R,EAAAA,GAAAA,IAAgB,KACnC/uC,IAAY+2C,EAAAA,GAAAA,WAGhB8J,EAAcx9B,SAAU,EACxB88B,GAAwB,GAAK,IAGzBY,GAAmBhS,EAAAA,GAAAA,IAAgB,KACvC8R,EAAcx9B,SAAU,EAEpBy8B,KACF7iD,aAAa6iD,IACbA,QAAezsD,GAGjBysD,GAAe7pD,OAAO+F,YAAW,KAC1B6kD,EAAcx9B,SACjB88B,GAAwB,EAC1B,GAxDwB,IAyDD,IAGrBa,GAAuBjS,EAAAA,GAAAA,IAAgB,KAC3CiR,EAAgBjJ,EAAAA,GAAAA,SAA2B,IAGvCkK,GAAuBlS,EAAAA,GAAAA,IAAgB,KAC3CiR,EAAgBjJ,EAAAA,GAAAA,SAA2B,IAGvCmK,GAAuBnS,EAAAA,GAAAA,IAAgB,KAC3CiR,EAAgBjJ,EAAAA,GAAAA,UAChBphD,GAAiB,IAGbwrD,GAAoBpS,EAAAA,GAAAA,IAAgB,KACpC/4C,EAAAA,IACFC,OAAOC,UAAUkrD,gBAEjBnrD,OAAO86B,SAASswB,QAClB,IAGIC,GAAyBvS,EAAAA,GAAAA,IAAgB,KAC7CiR,EAAgBjJ,EAAAA,GAAAA,gBAAkC,IAG9CwK,GAAuBxS,EAAAA,GAAAA,IAAgB,KAC3CiR,EAAgBjJ,EAAAA,GAAAA,cAAgC,KAGlD/H,EAAAA,EAAAA,KAAU,KACR,IAAIwS,EASJ,OARIxhD,IAAY+2C,EAAAA,GAAAA,SACdyK,EAAmBvrD,OAAO+F,YAAW,KACnCmkD,GAAwB,EAAM,GA7FR,MA+FfU,EAAcx9B,SAAWrkB,EAAAA,KAClCmhD,GAAwB,GAGnB,KACDqB,IACFvkD,aAAaukD,GACbA,OAAmBnuD,EACrB,CACD,GACA,CAAC2M,IAEJ,MAAMnI,GAAO25C,EAAAA,GAAAA,KAEb,OACE3B,EAAAA,GAAAA,cAAA,OACEz7C,GAAG,kBACHqtD,aAAeziD,EAAAA,QAAkC3L,EAAnBytD,EAC9BY,aAAe1iD,EAAAA,QAAkC3L,EAAnB0tD,GAO9BlR,EAAAA,GAAAA,cAAA,OAAKz7C,GAAG,mBAAmB+uB,UAAcnjB,IAAY+2C,EAAAA,GAAAA,SAA6B,YAAc,IAC9FlH,EAAAA,GAAAA,cAAC8R,GAAc,CACb1L,iBAAkByK,EAClB1gD,QAASA,EACTk2C,eAAgBA,EAChBC,cAAeA,EACfE,iBAAkB2K,EAClB1K,iBAAkB2K,EAClB1K,iBAAkB2K,EAClB1K,QAASA,EACTuJ,qBAAsBA,EACtB3J,gBAAiBA,KAGrBvG,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTzP,KAAM2d,EAAuB,OAAS,WACtCnB,YAAaiB,GACb/N,UAAW9xC,EACX4hD,eAAa,EACbC,oBAAqB9K,EAAAA,GAAAA,SACrB+K,YAAU,EACVC,iBAAkBhL,EAAAA,GAAAA,WAEhBhzC,IACA,OAAQ/D,GACN,KAAK+2C,EAAAA,GAAAA,SACH,OACElH,EAAAA,GAAAA,cAACmS,GAAW,CACV3G,qBAAsBqF,EACtBxF,uBAAwBA,EACxBC,0BAA2B6E,EAC3B/E,gBAAiBA,EACjBG,iBAAkBsF,IAGxB,KAAK3J,EAAAA,GAAAA,aACH,OACElH,EAAAA,GAAAA,cAACgP,GAAU,CACTvJ,YAAaA,EACbI,WAAYA,EACZ3xC,SAAUA,EACVyyC,QAASA,IAGf,KAAKO,EAAAA,GAAAA,SACH,OAAOlH,EAAAA,GAAAA,cAACkP,GAAW,CAACpoD,OAAQu/C,EAAgBnyC,SAAUA,EAAUyyC,QAASA,IAC3E,QACE,OAAiB,IAIxBmK,GACC9Q,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLkQ,OAAK,EACLC,MAAI,EACJ/+B,WAAWuvB,EAAAA,GAAAA,GAAe,aAAckO,GACxCrP,QAAS4P,GAERtpD,EAAK,wBAGTuoD,GACCvQ,EAAAA,GAAAA,cAACsS,GAAAA,EAAU,CACTrtD,OAAQsmD,EACRhyC,UAAWq3C,EACXR,cAAeA,EACfmC,qBAAsB9B,EACtB+B,oBAAqBhC,IAGzBxQ,EAAAA,GAAAA,cAACyS,GAAa,CACZtD,QAASkB,EACTjB,iBAAkBgC,EAClB/B,aAAcoC,EACdnC,WAAYoC,IAEV,ICpOV,IAAe/R,EAAAA,EAAAA,KAPsBC,IACnC,MAAM8S,GAAW5S,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAO2S,EAAW1S,EAAAA,GAAAA,cAAC0S,EAAa9S,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICGzD,IAAetP,EAAAA,EAAAA,KAPqBC,IAClC,MAAM+S,GAAU7S,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAO4S,EAAU3S,EAAAA,GAAAA,cAAC2S,EAAY/S,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICEvD,IAAetP,EAAAA,EAAAA,KAP2BC,IACxC,MAAMgT,GAAgB9S,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAO6S,EAAgB5S,EAAAA,GAAAA,cAAC4S,EAAkBhT,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICeN,IAuBxD4D,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAWhB,MAAMC,GAAeloD,OAAOC,KAAKgoD,IAAa/vD,OAAS,EA2dvD,IAAe68C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IACC,MAAMmC,GAAWb,EAAAA,EAAAA,IAAetB,IAE9B6O,cAAc,MACZ3N,EAAK,KACLoM,GACD,4BACD+6C,EAA2B,iBAC3BtW,EAAgB,mBAChBqe,EAAkB,kBAClBC,GACEluD,GACE,cACJgW,EACAM,UAAU,YACR2B,GACD,kBACDhD,EAAiB,gBACjBT,GACE3W,EAEE2Y,GAAc3M,EAAAA,EAAAA,IAAkBhM,GAKtC,MAAO,CACL8iD,YAAa5hD,EACbgiD,WAAY51C,EACZgjD,wBAA8C,IAArBve,EACzBsW,8BACAlwC,gBACAiC,cACAg2C,qBACAC,oBACAE,WAbiB5oD,QAAQgR,GAAa/W,IActCwV,oBACAwxC,kBAduB4H,EAAAA,EAAAA,IAAuBxwD,GAe9CkD,iBAduBf,EAASe,iBAehC0gD,gBAAiBzhD,EAAS0M,aAAaO,UACvCuH,kBACD,GA1CegqC,EAxdpB,SAAmBvgD,GAgBO,IAhBN,IAClBkiD,EAAG,YACHQ,EAAW,WACXI,EAAU,wBACVoN,EAAuB,4BACvBjI,EAA2B,cAC3BlwC,EAAa,YACbiC,EAAW,mBACXg2C,EAAkB,kBAClBC,EAAiB,WACjBE,EAAU,kBACVn5C,EAAiB,iBACjBwxC,EAAgB,iBAChB1lD,EAAgB,gBAChB0gD,EAAe,gBACfjtC,GACsBvW,EACtB,MAAM,qBACJqwD,EAAoB,uBACpBC,EAAsB,sBACtBvM,EAAqB,kBACrBwM,EAAiB,oBACjB1M,EAAmB,iBACnB2M,EAAgB,gBAChBC,EAAe,SACf7sD,EAAQ,0BACRoX,IACElC,EAAAA,EAAAA,OAEG1L,EAASsjD,IAAc7S,EAAAA,EAAAA,IAA4BsG,EAAAA,GAAAA,WACnDwM,EAAgBC,IAAqB/S,EAAAA,EAAAA,IAAS5iC,EAAAA,GAAAA,OAC9CqoC,EAAgBuN,IAAqBhT,EAAAA,EAAAA,IAAiB,KACtDiT,EAAczI,IAAmB0I,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoBpT,EAAAA,EAAAA,IAAiB,IAE3DzB,EAAAA,EAAAA,KAAU,KACR,OAAQhvC,GACN,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,GACH8jD,EAAAA,EAAAA,IAAe,6BACT,GAET,CAAC9jD,IAEJ,IAAI+jD,EAA2BrB,GAAYsB,KAC3C,OAAQhkD,GACN,KAAK+2C,EAAAA,GAAAA,SACHgN,EAAcrB,GAAYuB,SAC1B,MACF,KAAKlN,EAAAA,GAAAA,SACHgN,EAAcrB,GAAYH,SAC1B,MACF,KAAKxL,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHgN,EAAcrB,GAAYwB,WAC1B,MACF,KAAKnN,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHgN,EAAcrB,GAAYyB,SAI9B,MAAMC,GAAcrV,EAAAA,GAAAA,IAAiBsV,IACnC,SAASC,IACPhB,EAAWvM,EAAAA,GAAAA,UACXyM,EAAkB31C,EAAAA,GAAAA,MAClB41C,EAAkB,IAClBP,EAAuB,CAAEthD,WAAW,IACpCuhD,IACAnnD,YAAW,KACTinD,EAAqB,CAAEvvD,MAAO,KAC9B+iD,EAAoB,CAAE32C,UAAMzM,IAC5BsjD,EAAsB,CAAEviD,QAAIf,IAC5B6vD,EAAuB,CAAEthD,WAAW,IACpCiiD,EAAiBzkD,KAAKC,MAAM,GAlFF,IAoF9B,CAEA,IAA8B,IAA1BglD,EAKJ,GAAIrkD,IAAY+2C,EAAAA,GAAAA,cAKhB,GAAI/2C,IAAY+2C,EAAAA,GAAAA,gBAAhB,CAKA,GAAI/2C,IAAY+2C,EAAAA,GAAAA,cAAiC,CAC/C,MAAMwN,EAAoBxhD,SAASyhD,eAAe,2BAC9CD,GACFA,EAAkBzzB,MAEtB,CAEA,GAAI9wB,IAAY+2C,EAAAA,GAAAA,SACd,OAAQwM,GACN,KAAK11C,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,aAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,wBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,oBAEH,YADA21C,EAAkB52C,EAAciB,EAAAA,GAAAA,gBAAkCA,EAAAA,GAAAA,kBAGpE,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,iBAGpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,qBAGpB,KAAKA,EAAAA,GAAAA,0BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,2BAGpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,aAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,mBAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,yBAGH,OAFAy1C,EAAWvM,EAAAA,GAAAA,eACXyM,EAAkB31C,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,UAGpB,KAAKA,EAAAA,GAAAA,eAEH,YADA21C,EAAkB31C,EAAAA,GAAAA,UAOpB7N,IAAY+2C,EAAAA,GAAAA,UAA8B+L,EAC5CQ,EAAWvM,EAAAA,GAAAA,cAKbuN,GAnLA,MAFEhB,EAAWvM,EAAAA,GAAAA,sBALXuM,EAAWvM,EAAAA,GAAAA,oBALXuN,GA+LS,IAGPG,GAAoB1V,EAAAA,GAAAA,IAAiBr7C,IACrCsM,IAAY+2C,EAAAA,GAAAA,UAKhBuM,EAAWvM,EAAAA,GAAAA,cAEPrjD,IAAU4hD,GACZ2N,EAAqB,CAAEvvD,WAPvB+vD,EAAkB/vD,EAQpB,IAGIgxD,GAAoB3V,EAAAA,GAAAA,IAAgB,KACxCuU,EAAWvM,EAAAA,GAAAA,cACXkM,EAAqB,CAAEvvD,MAAO,KAC9BijD,EAAsB,CAAEviD,GAAIsB,GAAmB,KAGjDs5C,EAAAA,EAAAA,KACE,KACE,MAAMvrB,EAAazjB,IAAY+2C,EAAAA,GAAAA,SACzB4N,EAAa3kD,IAAY+2C,EAAAA,GAAAA,SACzB6N,GAAqB7B,IAAe3H,EAW1C,OANM33B,GAAcmhC,GAAqBD,IAClClhC,GAAcmhC,IAAsBD,GACzCb,EAAAA,EAAAA,IAAe,6BAEfA,EAAAA,EAAAA,IAAe,6BAEZrgC,GAAcmhC,IAAwBD,IAAelhC,GACpDq/B,GAA2B8B,GACxB3M,EAAAA,GAAAA,IAAsB,KAC3BmM,GAAa,SAGf,CACF,GAEF,CAACtB,EAAyB9iD,EAASokD,EAAarB,EAAY3H,IAG9D,MAAMyJ,GAAqB9V,EAAAA,GAAAA,IAAiBtqC,IACtCzE,IAAY+2C,EAAAA,GAAAA,eAIhBtyC,EAAE8qC,iBACF+T,EAAWvM,EAAAA,GAAAA,cAA+B,IAGtC+N,GAA4B/V,EAAAA,GAAAA,IAAiBtqC,IACjDA,EAAE8qC,iBACF/4C,EAAS,CAAEpC,GAAIuW,EAAepW,sBAAsB,GAAO,IAGvDwwD,GAAsBhW,EAAAA,GAAAA,IAAiBtqC,IAC3CA,EAAE8qC,iBACF+T,EAAWvM,EAAAA,GAAAA,SAA2B,IAGlCiO,GAAuBjW,EAAAA,GAAAA,IAAiBtqC,IAC5CA,EAAE8qC,iBACF+T,EAAWvM,EAAAA,GAAAA,SAA2B,KAGxCO,EAAAA,GAAAA,GAAW,CACT,cAAeuN,EACf,cAAeC,KACXvN,EAAAA,IAAU,CACZ,QAASuN,EACT,QAASC,MAEPE,EAAAA,IAAa1N,EAAAA,IAAU,CAAE,QAASyN,MAGxChW,EAAAA,EAAAA,KAAU,KACRqU,IAEIE,IAAmB11C,EAAAA,GAAAA,SACrBu1C,GACF,GACC,CAACC,EAAiBD,EAAkBG,KAEvC2B,EAAAA,GAAAA,IAAc,UACe7xD,IAAvBuvD,IACFU,EAAWvM,EAAAA,GAAAA,UACXyM,EAAkBZ,GAClBh1C,EAA0B,CAAE5J,YAAQ3Q,KAGlCwvD,GACF5H,EAAgB4H,EAClB,GACC,CAAC5H,EAAiB4H,EAAmBD,EAAoBh1C,IAE5D,MAAMu3C,GAA6BpW,EAAAA,GAAAA,IAAiB/qC,IAClDs/C,EAAWvM,EAAAA,GAAAA,UACXyM,EAAkBx/C,EAAO,IAG3B,SAASohD,EAAcrhD,GACrB,OAAQggD,GACN,KAAKrB,GAAYuB,SACf,OACEpU,EAAAA,GAAAA,cAAC4S,GAAa,CACZ1+C,SAAUA,EACVyyC,QAAS4N,EACTnE,cAAeyE,EACfzJ,gBAAiBA,EACjBC,uBAAwBiK,EACxBhK,0BAA2BmI,EAC3BlI,iBAAkBA,EAClBjyC,gBAAiBA,IAGvB,KAAKu5C,GAAYH,SACf,OACE1S,EAAAA,GAAAA,cAAC0S,GAAQ,CACPx+C,SAAUA,EACVshD,cAAe9B,EACfG,aAAcA,EACdzI,gBAAiBA,EACjBqK,eAAgBH,EAChB3O,QAAS4N,EACTrE,qBAAsBlF,IAG5B,KAAK6H,GAAYwB,WACf,OACErU,EAAAA,GAAAA,cAAC2S,GAAO,CACNnW,IAAKuX,EACL7/C,SAAUA,EACVwhD,WAAS,EACTvlD,QAASA,EACTggD,gBAAiBsD,EACjB9M,QAAS4N,IAGf,KAAK1B,GAAYyB,SACf,OACEtU,EAAAA,GAAAA,cAAC2S,GAAO,CACNnW,IAAKuX,EACL7/C,SAAUA,EACV/D,QAASA,EACTggD,gBAAiBsD,EACjB9M,QAAS4N,IAGf,QACE,OACEvU,EAAAA,GAAAA,cAAC2V,GAAQ,CACPxlD,QAASA,EACTo2C,gBAAiBA,EACjBd,YAAaA,EACbI,WAAYA,EACZQ,eAAgBA,EAChB+E,gBAAiBA,EACjB+E,gBAAiBsD,EACjBnN,cAAesO,EACfvJ,uBAAwBiK,EACxB3O,QAAS4N,EACTrE,qBAAsBlF,EACtBjxC,kBAAmBA,EACnBwxC,iBAAkBA,EAClB6E,cAAeyE,IAIzB,CAEA,OACE7U,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTiD,IAAKA,EACL1S,KAAMyY,EAA8B,OAAS4K,EAAAA,GAC7C7G,YAAa+D,GACb7Q,UAAWiS,EACXnC,eAAa,EACbC,oBAAqBa,GAAYsB,KACjClC,YAAU,EACVC,iBAAkBW,GAAYsB,KAC9B5vD,GAAG,aACH+uB,UAAU,qBAETiiC,EAGP,K,iQCrhBA,UAAgB,wBAAwB,uBAAuB,oBAAsB,uBAAuB,kCAAkC,uBAAuB,4BAA8B,uBAAuB,gCAAgC,uBAAuB,2BAA6B,uBAAuB,6BAA6B,uBAAuB,wBAA0B,wBC2LnZ,SAASM,GAASnoB,EAAW6B,EAAWn3B,EAAeC,EAAgBy9C,GACrE,MAAQ,IAAGpoB,KAAK6B,EAAIumB,KAAUA,KAAUA,eACtC19C,OAAWC,EAAS,EAAIy9C,KAAUA,KAAUA,YAAiB19C,MACjE,CAoCA,UAAeunC,EAAAA,EAAAA,KAhN+B58C,IAExC,IAFyC,MAC7CgmB,EAAK,MAAE/G,GACRjf,EAEC,MAAMgzD,GAAerS,EAAAA,EAAAA,IAAuB,MAEtCsS,GAAetT,EAAAA,EAAAA,KAAQ,IAmF/B,SAAyB35B,EAAe/G,GACtC,MAAMi0C,EAAeltC,EAAQ/G,EAAQ,EAC/Bk0C,EAmBR,SAAsBntC,GACpB,IAAImtC,EAAY,EAahB,OAZc,IAAVntC,EACFmtC,EAAY,GACO,IAAVntC,EACTmtC,EAAY,GACO,IAAVntC,EACTmtC,EAAY,IACO,IAAVntC,GAEAA,EAAQ,KADjBmtC,EAAY,KAKPA,CACT,CAlCoBC,CAAaptC,GACzBqtC,EAmCR,SAAuBrtC,EAAe/G,GACpC,IAAIk0C,EAAY,GAahB,OAZc,IAAVntC,EACFmtC,EAAY,GACO,IAAVntC,EACTmtC,EAAY,GACO,IAAVntC,EACTmtC,EAAsB,IAAVl0C,EAAc,GAAK,IACZ,IAAV+G,GAEAA,EAAQ,KADjBmtC,EAAY,KAKPA,CACT,CAlDqBG,CAActtC,EAAOktC,GAClCK,EAmDR,SAAwBvtC,EAAemtC,GACrC,OAAOntC,GAAS,EAAI,GAAKmtC,EAAYntC,EAAQ,GAAKA,EAAQ,EAC5D,CArDsBwtC,CAAextC,EAAOmtC,GAEpCM,EAAc,WAAUztC,IACxB0tC,EAoDR,SAAqBlyD,EAAY2xD,EAAmBntC,GAGlD,IAAI2tC,EAAI,GACR,GAAc,IAAV3tC,EACF2tC,EAAIb,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAIj0C,EAAI,EAAGA,EAAI8G,EAAO9G,IACzBy0C,GAAKb,GAAS,GAAIK,EAAY,GAAKj0C,EAAG,EAAGi0C,EAT9B,GAaf,MACG,iBAAgB3xD,uBACJmyD,wBAGjB,CAvEmBC,CAAYH,EAAYN,EAAWntC,GAE9C6tC,EA4ER,SAA2B50C,EAAek0C,EAAmBntC,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAV/G,EAAc,EAAIk0C,EAAY,EAGzB,IAAVntC,EACY,IAAV/G,EACK,EACY,IAAVA,EACF,GAGF,IAECk0C,EAAY,GAAKl0C,CAE7B,CA9FyB60C,CAAkBZ,EAAcC,EAAWntC,GAC5D+tC,EA+FR,SAA4B90C,EAAe+G,EAAemtC,EAAmBI,GAC3E,OAAIvtC,GAAS,GAIT/G,GAAS,EAHJ,EAKEA,GAAS+G,EAAQ,EACnButC,EAAc,IAGfJ,EAAY,GAAK,GAAKl0C,EAAQ,IAAMk0C,EAAY,EAC1D,CA3G0Ba,CAAmBd,EAAcltC,EAAOmtC,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAG,iBACAE,kBACAR,cACAE,aAEJ,CArGWQ,CAAgBjuC,EAAO/G,IAC7B,CAAC+G,EAAO/G,IAyCX,IAvCAi1C,EAAAA,EAAAA,KAAgB,KACd,IAAKlB,EAAaviC,QAChB,OAGF,MAAM,YACJ8iC,EAAW,gBACXQ,EAAe,WACfV,EAAU,eACVQ,EAAc,WACdJ,EAAU,SACVC,GACET,EAEEkB,EAAanB,EAAaviC,QAAQ2jC,kBACxC,GAAIpB,GAAcviC,QAAS,CACzB,MAAM4jC,EAAiBrB,EAAaviC,SAC9B,MAAEuvB,GAAUqU,EAClBrU,EAAM1qC,OAAU,GAAEi+C,MAClBvT,EAAMsU,UAAa,eAAcP,OACjC/T,EAAM0T,SAAY,SAAQD,MAC1B,MAAMc,EAAMF,EAAe/X,cAAc,OACnCkY,EAAMH,EAAe/X,cAAc,OACnCmY,EAAOJ,EAAe/X,cAAc,QACrCiY,GACCJ,IACFA,EAAWO,UAAa,oCAAmChB,mBAG3De,IACFA,EAAKC,UAAYhB,GAEfc,IACFA,EAAIxU,MAAM1qC,OAAU,GAAE+9C,MACtBmB,EAAIxU,MAAMsU,UAAa,cAAaT,OAExC,IACC,CAACZ,IAEU,IAAVjtC,EACF,OACEi3B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAW2vB,GAAAA,qBACdjD,EAAAA,GAAAA,cAAA,OACE1sB,UAAW2vB,GAAAA,4BACXgC,IAAK8Q,KAMb,MAAM,YACJO,EAAW,gBAAEQ,EAAe,WAAEV,EAAU,eAAEQ,EAAc,WAAEJ,GACxDR,EAEJ,OACEhW,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GACdI,GAAAA,oBACAl6B,EArEoB,GAqESk6B,GAAAA,0BAG7BjD,EAAAA,GAAAA,cAAA,OACE1sB,UAAW2vB,GAAAA,2BACXgC,IAAK8Q,EACLhT,MACG,oBAAmByT,uCACVF,+BAAyCQ,SAGrD9W,EAAAA,GAAAA,cAAA,aACAA,EAAAA,GAAAA,cAAA,OACE1sB,UAAW2vB,GAAAA,wBACXF,MAAQ,aAAYqT,uBAAgCQ,2BAC1BE,UAG1B,I,wCCvGV,SAAyK,uBAAzK,GAAoN,uBCgMpN,IAAenX,EAAAA,EAAAA,KAhJ2B58C,IAGpC,IAHqC,QACzCwF,EAAO,MAAEwgB,EAAK,MAAE/G,EAAK,YAAE01C,EAAW,UAAEpkC,EAAS,eAAEqkC,EAAc,QAAEjW,EAAO,iBAAEkW,EAAgB,UACxFz6C,EAAS,YAAE06C,GACZ90D,EACC,MAAM,qBAAE+0D,IAAyBj8C,EAAAA,EAAAA,MAC3B7T,GAAO25C,EAAAA,GAAAA,KAEPoW,GAAiBC,EAAAA,GAAAA,GAAazvD,GAC9B0vD,GAAezV,EAAAA,GAAAA,IAAS0V,EAAAA,EAAAA,IAAoB3vD,EAAS,cACrD4vD,GAAYC,EAAAA,EAAAA,IAAoB7vD,GAEhC8vD,GADkBC,EAAAA,GAAAA,GAAkB,CAACn7C,GAxBnB,MAyBoBA,GAErCo7C,EAAmBC,EAAiBC,IAAoB3U,EAAAA,GAAAA,KAEzD4U,GAAqBxZ,EAAAA,GAAAA,IAAgB,KACzCuZ,IAEId,GACFA,EAAepvD,EAAQhE,GACzB,IAGIo0D,GAAeC,EAAAA,EAAAA,IAA6BrwD,GAE5CswD,GAA0B3Z,EAAAA,GAAAA,IAAgB,KAC1CyZ,GACFb,EAAqB,CAAE9tD,UAAWzB,EAAQhE,GAAI4/B,OAAQw0B,GACxD,KAGKG,EAAcC,EAAkBC,IAAsBlV,EAAAA,GAAAA,MAEvD,YAAEmV,EAAW,gBAAEC,IAAoBC,EAAAA,GAAAA,GAAazX,GAgBtD,OACE1B,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GACd,6BDnGiB,uBCmG0BgV,GAAe,aAAcvkC,KAGtEvK,EAAQ,GAAKsvC,IACbrY,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLknC,KAAK,UACLJ,MAAM,cACN8F,UAAW7/C,EAAK,gCAChB05C,QAAU2W,OAAsC70D,EAAnBo0D,GAE5Bz6C,GACC6iC,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CACNC,MAAM,OACNzuB,WAAWuvB,EAAAA,GAAAA,GDjH2G,uBCkHpGI,IAAqBoV,GAAoBpV,MAI/DjD,EAAAA,GAAAA,cAAA,KACE1sB,WAAWuvB,EAAAA,GAAAA,GACT,OAAQ,gBAAiBI,GAAoBoV,GAAoBpV,OAKxE0U,GACC3X,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLknC,KAAK,UACLJ,MAAM,cACN8F,UAAW7/C,EAAK,0BAChB05C,QAAS8W,GAETxY,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAGjB0sB,EAAAA,GAAAA,cAACoZ,GAAAA,EAAa,CACZn0D,OAAQszD,EACR/S,QAASiT,EACT7xD,KAAK,wCACLyyD,aAAa,QACbC,eAAgBZ,IAElB1Y,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GDhJ2C,uBCgJNiW,GDhJ+N,wBCiJ/QpX,QAASuX,EACTM,YAAaL,EACbtX,IAAK55C,EAAK65C,MAAQ,WAAQr+C,GAE1Bw8C,EAAAA,GAAAA,cAACwZ,GAAuB,CACtBzwC,MAAOA,EACP/G,MAAOA,IAETg+B,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAW15C,EAAQhE,GAAIguC,KAAK,gBAAgBjf,UDzJ4b,wBCmF1f,SAAyBmmC,EAAuB/iB,EAAkBgjB,GAChE,MAAM,MAAEthD,EAAK,OAAEC,IAAWshD,EAAAA,GAAAA,MACpBC,EAASljB,GAAW+iB,EAE1B,OACEzZ,EAAAA,GAAAA,cAAA,OAAK1sB,UDxFshB,wBCyFxhBmmC,IAAiBC,GACb1Z,EAAAA,GAAAA,cAAA,OAAK1sB,UD1FyjB,uBC0FrhB6vB,IAAKyW,EAAQxhD,MAAOA,EAAOC,OAAQA,EAAQ+qC,IAAI,KAC5FqW,GACIzZ,EAAAA,GAAAA,cAAC6Z,GAAAA,EAAY,CAACJ,aAAcG,EAAQE,UAAWxvD,QAAQovD,GAAUthD,MAAOA,EAAOC,OAAQA,IAGlG,CA2DS0hD,CACChC,EACAE,EACAE,IAGJnY,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GDhK2E,uBCgKxCkV,GDhK8S,yBCiK/V/X,EAAAA,GAAAA,cAAA,OAAK1sB,UDjKyX,uBCiKhWsuB,IAAI,SAC9B8V,GACA1X,EAAAA,GAAAA,cAACga,GAAAA,EAAe,CAACpzD,KAAO,GAAEoB,EAAK,oBAAoBga,EAAQ,EAAK,KAAG+G,EAAQ/G,GAAU,OAGtF01C,IAAeuC,EAAAA,GAAAA,GAAWvC,IAE7B1X,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CAACC,UAAW15C,EAAQhE,GAAIguC,KAAK,oBAAoBjf,UDxKgQ,wBCyK1T0sB,EAAAA,GAAAA,cAAA,KAAG4B,IAAI,OAAOtuB,UDzK+Y,wBC0K3Z0sB,EAAAA,GAAAA,cAACka,GAAAA,EAAc,CAAClyD,KAAMA,EAAMO,QAASA,EAAS4xD,QAAS7vD,QAAQytD,QAIrE/X,EAAAA,GAAAA,cAACoa,GAAAA,EAAY,MACZzB,GACC3Y,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL7uB,UDlLmc,uBCmLncouB,QAASmX,EACTwB,uBAAqB,EACrBzI,aAAeziD,EAAAA,QAAkC3L,EAAnBu1D,EAC9BlH,aAAe1iD,EAAAA,QAAoC3L,EAArBw1D,GAE7BL,EAAa/xD,OAIhB,I,oDC3LV,MAAM0zD,GAAiB,IAEhB,SAASC,GAAWC,EAAsBC,GAAkE,IAAnDC,EAAkB73D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YACnF,MAAMwU,EAAMmjD,aAAiBG,KAAO/tC,IAAIguC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAI9pC,SAAS+pC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAKA,EAAIziD,MAAQqiD,EAAOI,EAAIxiD,OAASoiD,EAAOC,GAC/C/gD,MAAMuhD,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOvuC,IAAIguC,gBAAgBM,EAAK,IAEjCvhD,KAAKohD,GACLK,SAAQ,KACHZ,aAAiBG,MACnB/tC,IAAIyuC,gBAAgBhkD,EACtB,GACA,EAENwjD,EAAI1X,IAAM9rC,CAAG,GAEjB,CAyBA4F,eAAeg+C,GACbJ,EAAuBziD,EAAeC,GAChB,IADgCqiD,EAAkB73D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAG3E,KAAI,sBAAuBuD,QA6BzB,OAAOk1D,GAAaT,EAAKziD,EAAOC,OAAQ7U,EAAWk3D,GA5BnD,IACE,MAAMa,QAAen1D,OAAOo1D,kBAAkBX,EAC5C,CAAEY,YAAarjD,EAAOsjD,aAAcrjD,EAAQsjD,cAAe,SAC7D,GAAIJ,EAAOljD,SAAWA,GAAUkjD,EAAOnjD,QAAUA,EAC/C,MAAM,IAAI+iD,MAAM,sCAElB,MAAMS,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAI1X,KACzC2Y,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OACzE,aAAa,IAAItpC,SAASgrC,IACxB,MAAMC,EAAS/oD,SAASgpD,cAAc,UACtCD,EAAO7jD,MAAQmjD,EAAOnjD,MACtB6jD,EAAO5jD,OAASkjD,EAAOljD,OACvB,MAAM8jD,EAAQF,EAAOG,WAAW,MAChCD,EAAME,UAAYP,EAClBK,EAAMG,SAAS,EAAG,EAAGL,EAAO7jD,MAAO6jD,EAAO5jD,QAC1C,MAAMkkD,EAAMN,EAAOG,WAAW,kBAC1BG,EACFA,EAAIC,wBAAwBjB,GAE5BY,EAAMM,UAAUlB,EAAQ,EAAG,GAE7BU,EAAOS,OAAOV,EAAKtB,EAAW,GAKlC,CAHE,MAAO9lD,GAEP,OAAO0mD,GAAaT,EAAKziD,EAAOC,OAAQ7U,EAAWk3D,EACrD,CAIJ,CAEAz9C,eAAeq+C,GACbT,EAAuBziD,EAAeC,GAChB,IADgC6zB,EAAYrpC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,GAAK63D,EAAkB73D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAE/F,MAAMo5D,EAAS/oD,SAASgpD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MACxBO,EAAKzpD,SAASgpD,cAAc,UAC5BU,EAAOD,EAAGP,WAAW,MAK3B,GAHAH,EAAO7jD,MAAQA,EACf6jD,EAAO5jD,OAASA,EAEZwiD,EAAIziD,MAAQ8zB,EAAO9zB,EAAO,CAC5B,MAAMykD,EAAM,EAAI3wB,EAChB,IAAI4wB,EAAM,CACR1kD,MAAO3H,KAAKI,MAAMgqD,EAAIziD,MAAQ8zB,GAC9B7zB,OAAQ5H,KAAKI,MAAMgqD,EAAIxiD,OAAS6zB,IAQlC,IALAywB,EAAGvkD,MAAQ0kD,EAAI1kD,MACfukD,EAAGtkD,OAASykD,EAAIzkD,OAEhBukD,EAAKH,UAAU5B,EAAK,EAAG,EAAGiC,EAAI1kD,MAAO0kD,EAAIzkD,QAElCykD,EAAI1kD,MAAQ8zB,EAAO9zB,GACxB0kD,EAAM,CACJ1kD,MAAO3H,KAAKI,MAAMisD,EAAI1kD,MAAQ8zB,GAC9B7zB,OAAQ5H,KAAKI,MAAMisD,EAAIzkD,OAAS6zB,IAElC0wB,EAAKH,UAAUE,EAAI,EAAG,EAAGG,EAAI1kD,MAAQykD,EAAKC,EAAIzkD,OAASwkD,EAAK,EAAG,EAAGC,EAAI1kD,MAAO0kD,EAAIzkD,QAGnFkkD,EAAIE,UAAUE,EAAI,EAAG,EAAGG,EAAI1kD,MAAO0kD,EAAIzkD,OAAQ,EAAG,EAAG4jD,EAAO7jD,MAAO6jD,EAAO5jD,OAC5E,MACEkkD,EAAIE,UAAU5B,EAAK,EAAG,EAAGoB,EAAO7jD,MAAO6jD,EAAO5jD,QAGhD,MAAMujD,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAI1X,KACzC2Y,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OAIzE,OAHAiC,EAAIF,UAAYP,EAChBS,EAAIQ,yBAA2B,mBAC/BR,EAAID,SAAS,EAAG,EAAGL,EAAO7jD,MAAO6jD,EAAO5jD,QACjC,IAAI2Y,SAAS+pC,IAClBkB,EAAOS,OAAO3B,EAASL,EAAW,GAEtC,C,6EC9GMsC,GAAkB,CAAE5kD,MAAO,IAAKC,OAAQ,KACxC4kD,GAAe,I,4BCiCrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuBvyD,OAAOC,KAAKqyD,IAAgBx0D,OAAOJ,IAAI0C,QAwSpE,IAAes4C,EAAAA,EAAAA,KACb,CAAC3gD,EAAM2d,KAA8B,IAA5B,QAAE/X,GAAS+X,EAClB,MAAMtX,GAASC,EAAAA,EAAAA,IAAatG,EAAQ4F,GAC9BgJ,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQ4F,EAAQnF,SAClC,OACJmI,EAAM,aAAEC,EAAY,QAAEC,EAAO,qBAAEG,IAC7B3H,EAAAA,EAAAA,IAAetB,GAAQ+I,YAE3B,MAAO,CACL1C,SACAuI,OACAhG,SACAC,eACAI,uBACAH,UACD,GAfL,EAnS+C1I,IAUzC,IAV0C,QAC9CwF,EAAO,UACP+qB,EAAS,KACT8pC,EAAI,OACJp0D,EAAM,KACNuI,EAAI,OACJhG,EAAM,aACNC,EAAY,qBACZI,EAAoB,QACpBH,GACD1I,EACC,MAAM,qBACJs6D,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnBlyD,EAAY,iBACZ8wB,IACEtgB,EAAAA,EAAAA,MAGEopC,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7B17C,GAAO25C,EAAAA,GAAAA,MACP,SAAE0C,IAAaC,EAAAA,EAAAA,OACf,MAAEkZ,EAAK,MAAEvuC,EAAK,MAAEunB,IAAUC,EAAAA,EAAAA,IAAkBluC,GAC5Ck1D,EAAUnzD,QAAQ2kB,GAASunB,GAC3BknB,EAA6BD,IAAYD,GAAOG,UAAY,GAAKC,EAAAA,IACjEC,EAAa70D,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,QAAUxF,EACrDs6D,EAAY9uB,GAAAA,IAA0BkpB,EAAAA,EAAAA,IAAoB3vD,EAAS,WACnEw1D,EDtEwBC,EAC9Bz1D,EAAqBS,EAA4BuI,KAEjD,MAAMvJ,GAAO25C,EAAAA,GAAAA,MAEP,MAAE6b,EAAK,MAAEvuC,IAAUwnB,EAAAA,EAAAA,IAAkBluC,GACrCkL,EAAQ+pD,EAASA,EAAM/pD,OAAS+pD,EAAMS,SAAYhvC,EAAQ,gBAAkB,GAC5EivC,EAASV,GAAOW,WAAcn1D,IAAUG,EAAAA,EAAAA,IAAenB,EAAMgB,GAC7Do1D,EAAS7sD,IAAQgK,EAAAA,EAAAA,GAAavT,EAAMuJ,IAAU,WAE9C8sD,EAAkBb,IAASc,EAAAA,EAAAA,IAAiBd,KAAUtF,EAAAA,EAAAA,IAAoB3vD,EAAS,aACnF41B,EAAan1B,IAAUu1D,EAAAA,EAAAA,IAAkBv1D,EAAQ,OACjDgM,EAAQwoD,GAASa,GAAoBpvC,GAASkP,EAC9Cyc,GAAQ4H,EAAAA,GAAAA,GAASxtC,GAEjBmtC,GAAOO,EAAAA,EAAAA,KAAQ,IA2BvB,SAAsB8a,EAAkBvuC,EAAkB5X,GACxD,IAAKA,EAAK,OAAO2lD,GACjB,GAAIQ,EAAO,CACT,IAAKA,EAAMgB,gBAAgB17D,OAAQ,OACnC,MAAM27D,EAAYjB,EAAMgB,eAAe1uD,MAAMqyC,GAAuB,MAAdA,EAAK19C,OAC3D,OAAOg6D,GAAajB,EAAMgB,eAAe,EAC3C,CAEA,OAAIvvC,EACKyvC,GAAAA,QADT,CAKF,CAvCWC,CAAanB,EAAOvuC,EAAO2rB,IACjC,CAAC4iB,EAAO5iB,EAAO3rB,KACVpmB,OAAQwO,IAAQunD,EAAAA,GAAAA,IAAS,IAanC,SAAyBvnD,EAAc8qC,GACrC,IAAK9qC,EAAK,OAAO2Z,QAAQ+pC,QAAQ8D,IACjC,IAAK1c,EAAM,OD/BN,SACLqY,EAAsBpiD,EAAeC,GACpB,IADoCqiD,EAAkB73D,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,YAE1E,MAAMwU,EAAMmjD,aAAiBG,KAAO/tC,IAAIguC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAI9pC,SAAS+pC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAKziD,EAAOC,EAAQqiD,GACvB/gD,MAAMuhD,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOvuC,IAAIguC,gBAAgBM,EAAK,IAEjCvhD,KAAKohD,GACLK,SAAQ,KACHZ,aAAiBG,MACnB/tC,IAAIyuC,gBAAgBhkD,EACtB,GACA,EAENwjD,EAAI1X,IAAM9rC,CAAG,GAEjB,CCUoBynD,CAAYznD,EAAK4lD,GAAcA,IACjD,MAAMnvB,EAAMr9B,KAAKq9B,IAAIqU,EAAK/pC,MAAO+pC,EAAK9pC,QACtC,OAAIy1B,EAAMmvB,GAED1C,GAAWljD,EADJ4lD,GAAenvB,GAGxB9c,QAAQ+pC,QAAQ1jD,EACzB,CArBI0nD,CAAgBnkB,EAAOuH,IACtB,CAACvH,EAAOuH,GAAO0c,IAClB,OAAOnc,EAAAA,EAAAA,KAAQ,KACNsc,EAAAA,GAAAA,IAAmB,CACxBvrD,QACAyqD,SACAE,QACAa,QAAS,CAAC,CAAE9b,IAAK9rC,OAElB,CAAC+mD,EAAOF,EAAQzqD,EAAO4D,GAAK,EC0CT2mD,CAAwBz1D,EAASS,EAAQuI,IAEzD,UACJ2tD,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpBr5C,EAAO,OACPs5C,EAAM,UACNC,EAAS,YACTC,EAAW,gBACXC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAYr3D,IACZs3D,EAAAA,EAAAA,IAAiBt3D,GACjBk1D,EAAU,QAAU,QACpBK,OACAt6D,EACAu6D,OACAv6D,GACA,OACAA,OACAA,GACA0sC,EAAAA,EAAAA,IAAe3nC,IACf,IAGI,kBACJu3D,EAAiB,wBACjBC,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlb,GAErBgU,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClC7zC,EAAa,CAAEjI,OAAQmF,EAAQnF,OAAQ4G,UAAWzB,EAAQhE,IAAK,IAG3DorD,GAAczQ,EAAAA,GAAAA,IAAgB,KAC9BkgB,GACFF,IAEF/iC,KACAikC,EAAAA,GAAAA,MACAjB,GAAM,IAGFkB,GAAqBnhB,EAAAA,GAAAA,IAAiBjT,IAC1CoxB,EAAqB,CAAE9xD,OAAQ0gC,EAAQ,MAEvCuzB,EAAUvzB,EAAQ,IAAI,IAGlBq0B,GAAoBphB,EAAAA,GAAAA,IAAgB,KACpC/vC,EAAAA,KAAiBgU,EAAAA,KACrBs8C,IACAlC,EAAoB,CAAE9xD,SAAUA,IAAU,IAGtC80D,GAAqBrhB,EAAAA,GAAAA,IAAgB,SAACshB,GAAqC,IAApBtsD,IAAQrR,UAAAC,OAAA,QAAAU,IAAAX,UAAA,KAAAA,UAAA,GACnE,MAAM49D,EAAOvD,GAAesD,GACtBE,EA5FoB,IA4FHF,GAAqCtsD,EAC5DopD,EAA2B,CAAE9xD,aAAci1D,EAAM70D,qBAAsB80D,IACvEhB,EAAgBgB,EAAiBD,EA9FP,EA+F5B,IAEME,GAAsBzhB,EAAAA,GAAAA,IAAgB,KAC1C+gB,IACA,MAAMW,EAAU51D,OAAOJ,OAAO+f,QAAQuyC,IAAgBptD,MAAKa,IAAA,IAAE,CAAE8vD,GAAK9vD,EAAA,OAAK8vD,IAASj1D,CAAY,MAAI,KAnGxE,EAqGpBq1D,GAAej1D,EAErB20D,EACEM,GAxGwB,IAwGTD,EAvGc,EAuGmDA,EAChFC,EACD,IAGGC,GAAqB5hB,EAAAA,GAAAA,IAAgB,KACzC,MAAM6hB,EAAcn2D,OAAO+f,QAAQuyC,IAAgBptD,MAAK8P,IAAA,IAAE,CAAE6gD,GAAK7gD,EAAA,OAAK6gD,IAASj1D,CAAY,MAAI,IA9GrE,EAgHpB5E,EAAQ,GAhHY,IAgHV4E,EA/Ge,EA+GuDu1D,KACtF,OACE/gB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,oBACZwsC,GAAqB9f,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,oBAAoBouB,QAASue,IAElEjgB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLqY,WAAWuvB,EAAAA,GAAAA,GACT,kBAAmBj3C,GAAwB,UAAWk0D,GAAqB,UAE7E/d,MAAM,cACNI,KAAK,UACL0F,UAAU,gBACV3C,QAASb,EACTuN,aAAcoO,EACdte,QAASif,EACTpH,YAAawG,EACbiB,cAAehB,GAEfhgB,EAAAA,GAAAA,cAAA,QAAM1sB,WAAWuvB,EAAAA,GAAAA,GACf,wBACgB,IAAhBj8C,EAAK9D,QAAgB,QACL,IAAhB8D,EAAK9D,QAAgB,SAGpB8D,IAGD,IAIJq6D,IAAave,EAAAA,EAAAA,KAAQ,IACV,IAAXn3C,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAI2xD,EAIJ,OACEpd,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,cAAevvB,GAAYsuB,IAAK55C,EAAK65C,MAAQ,WAAQr+C,EAAWyhD,IAAKA,GAClGjF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,sBAAsBouB,QAASuX,GAC3CuE,EA+FT,SAAqBA,GACnB,MAAM,MAAE/pD,EAAK,UAAE0qD,EAAS,SAAEF,GAAaT,EAEvC,OACExd,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,QAAQsuB,IAAI,SAAQqY,EAAAA,GAAAA,GAAWxmD,GAASwqD,IACtDE,GACCne,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WAAWsuB,IAAI,SAAQqY,EAAAA,GAAAA,GAAWkE,IAIzD,CA1GiB+C,CAAY1D,GA4G7B,SAAqB2D,EAAkBtD,GACrC,OACE7d,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,QAAQsuB,IAAI,QAAQic,IAAc5D,EAAAA,GAAAA,GAAW4D,IAC5D7d,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WAAWsuB,IAAI,QAAQuf,GAG5C,CAnHsCC,CAAYp5D,EAAK,eAAgB61D,GAC/D7d,EAAAA,GAAAA,cAACoa,GAAAA,EAAY,OAGfpa,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLiqC,QAASb,EACTtC,MAAM,cACNI,KAAK,UACL7uB,UAAU,gBACV+tC,SAAUp7C,IACVy7B,QAAS4d,EACTzX,UAAU,kBAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,6BAEf0sB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLiqC,QAASb,EACTtC,MAAM,cACNI,KAAK,UACL7uB,WAAWuvB,EAAAA,GAAAA,GAAe,cAAe,gBAAiBuc,EAAY,QAAU,QAChF1d,QAASwd,EACTrX,UAAWuX,EAAY,cAAgB,cAEvCpf,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,mBACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAEf0sB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLiqC,QAASb,EACTtC,MAAM,cACNI,KAAK,UACL7uB,UAAU,gBACV+tC,SAAU9B,IACV7d,QAAS2d,EACTxX,UAAU,cAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,yBAGf0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,yBACb0sB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLqY,UAAU,8BACVyuB,MAAM,cACNI,KAAK,UACL0F,UAAU,SACVnG,QAAS4e,EACTpb,QAASb,GAETrE,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,OAAQoe,QAGrC99C,EAAAA,IACA68B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,yBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,yBACf0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iBACb0sB,EAAAA,GAAAA,cAACshB,GAAAA,EAAW,CAACC,MAAI,EAACt1B,MAAOxgC,EAAU,EAAa,IAATF,EAAc4+C,SAAUkW,OAMtE3C,GACC1d,EAAAA,GAAAA,cAACmJ,GAAAA,EAAY,CACXqY,UAAW1B,EACXvW,UAAU,QACVuG,UAAU,MACVx8B,UAAU,qBACV81B,QAAS0X,EACTtb,QAASya,EACTwB,OAAQvB,EACRwB,qBAAsBzB,GAErB9C,GAAqB70D,KAAKm4D,GA0CrC,SACEA,EAAckB,EAAqBjgB,EACnC91C,GAEA,MAAMg2D,EAAcD,IAAgBzE,GAAeuD,IAAS70D,GAvRhC,IAwRtB60D,IAAmC70D,EACzC,OACEo0C,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPzM,IAAKikB,EAEL/e,QAASA,IAAMA,EAAQ+e,GACvBvX,KAAM0Y,EAAa,aAAUp+D,EAC7Bq+D,WAAaD,OAAuDp+D,EAA1Cw8C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,2BAEtCmtC,EAAK,IAGZ,CA1DmBqB,CAA2BrB,EAAMj1D,EAAc+0D,EAAoB30D,MAKhFo0C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLqY,UAAU,eACVyuB,MAAM,cACNI,KAAK,UACLT,QAASiO,EACT9H,UAAU,gBAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAEX,I,2BCrRV,MA2IA,IAAeqsB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAAA,IAAE,OAAEvN,GAAQuN,EAAA,MAAkB,CACnCmK,cAAenY,EAAOmY,cACtBvJ,MAAM7L,EAAAA,EAAAA,IAAW/C,EAAQS,GACzBqjB,MAAMyZ,EAAAA,EAAAA,IAAS98B,IAAUsjB,EAAAA,EAAAA,IAAW/jB,EAAQS,QAAUI,EACvD,GALiB8/C,EA3I+BvgD,IAE7C,IAF8C,OAClDK,EAAM,UAAEkwB,EAAS,KAAE/hB,EAAI,KAAEkV,EAAI,SAAE7L,EAAQ,cAAEE,GAC1C/X,EACC,MAAM,qBACJg/D,EAAoB,aACpBC,EAAY,WACZC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACE1mD,EAAAA,EAAAA,MAEE7T,GAAO25C,EAAAA,GAAAA,MACN6gB,EAAsBC,EAAoBC,IAAuB5e,EAAAA,GAAAA,MACjE6e,EAAkBC,IAAuBhiB,EAAAA,EAAAA,KAAkB,IAC3DiiB,EAAkBC,IAAuBliB,EAAAA,EAAAA,KAAkB,IAC5D,WAAEpzB,GAAejc,GAAQ,CAAC,GAC1B,eACJwxD,EAAc,cAAEC,EAAa,cAAEC,EAAa,gBAAEC,GAC5CtoD,GAAY,CAAC,EACXuoD,EAAe5xD,IAAQ6xD,EAAAA,EAAAA,IAAiB7xD,GAExC8xD,GAAmBnkB,EAAAA,GAAAA,IAAgB,KACvC6iB,EAAqB,CAAEnvD,OAAQxP,IAC3B2/D,GACFT,EAAmB,CAAE/9D,GAAInB,GAC3B,IAGIkgE,GAAqBpkB,EAAAA,GAAAA,IAAgB,KACzCwjB,IACAV,EAAa,CAAEuB,UAAWngE,EAAQoqB,WAAYA,IAC1Cw1C,GAAiBL,GACnBV,EAAW,CAAE7+D,WAEXy/D,GACFX,EAAW,CAAE9+D,UACf,IAGIogE,GAAyBtkB,EAAAA,GAAAA,IAAgB,KAC7CqjB,EAAoB,CAAEn/D,UAAS,IAG3BqgE,GAAuBvkB,EAAAA,GAAAA,IAAgB,KAC3CwjB,IACAT,EAAW,CAAE7+D,WACT+/D,GACFf,EAAe,CAAEh/D,SAAQwP,OAAQkI,IACjCunD,EAAc,CAAEj/D,SAAQokB,oBAAoB,KAE5C26C,EAAa,CAAE/+D,UACjB,IAGF,GAAKwX,IAAcrJ,GAASkV,GAI5B,OACEu5B,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,kBAAmBvvB,GAAYsuB,IAAK55C,EAAK65C,MAAQ,WAAQr+C,GACrFy/D,GACCjjB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLwhB,QAAM,EACNtR,OAAK,EACLjQ,KAAK,OACL7uB,UAAU,0BACVouB,QAAS2hB,GAERr7D,EAAK,wBAGTk7D,GACCljB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,SACN2hB,QAAM,EACNtR,OAAK,EACLjQ,KAAK,OACL7uB,UAAU,0BACVouB,QAAS+gB,GAERz6D,EAAK,0BAGTg7D,IAAkBE,GACjBljB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,SACN2hB,QAAM,EACNtR,OAAK,EACLjQ,KAAK,OACL7uB,UAAU,0BACVouB,QAAS+gB,GAERz6D,EAAK,8BAGVg4C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLiqC,QAAM,EACN/C,KAAK,OACLJ,MAAM,cACNL,QAAS8hB,EACT3b,UAAW7/C,EAAK,UAEhBg4C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAEf0sB,EAAAA,GAAAA,cAACoZ,GAAAA,EAAa,CACZn0D,OAAQu9D,EACRhd,QAASkd,EACTjvD,MAAOzL,EAAK,iBAAkBye,GAAOoT,EAAAA,EAAAA,IAAuBpT,IAAQlL,EAAAA,EAAAA,GAAavT,EAAMuJ,IACvF3K,KAAM6f,EACFze,EAAK,mCAAmC2lB,EAAAA,EAAAA,IAAgBlH,IACxDze,EAAK,mCACT27D,sBAAoB,EACpBtK,aAAcrxD,EAAK,SACnBsxD,eAAgB7yC,EAAO68C,EAAqBG,GAE3Ch9C,GACCu5B,EAAAA,GAAAA,cAAC4jB,GAAAA,EAAQ,CACPC,MAAO77D,EAAK,kBACZ87D,QAASjB,EACTkB,QAASjB,IAGZr8C,GAAQu8C,GACPhjB,EAAAA,GAAAA,cAAC4jB,GAAAA,EAAQ,CACPC,MAAO77D,EAAK,cACZ87D,QAASnB,EACToB,QAASnB,KAIX,KCsTV,IAAejjB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAEW,IAFT,OACPvN,EAAM,SAAEC,EAAQ,gBAAE0E,EAAe,SAAEs8C,GACpC1zC,EACC,MAAM,kBACJ2D,EAAiB,4BAAE02C,EAA2B,YAAEt/C,EAAW,aAAE6I,IAC3DtQ,EAAAA,EAAAA,IAAetB,IACb,aAAE05B,GAAiB15B,EACnB4O,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,IAExBA,OAAQ64B,EAAajyB,UAAWkyB,GAAmBxwB,EACrDs4D,EAAe/nC,GAAeC,GAChCzkB,EAAAA,EAAAA,IAAkB9U,EAAQs5B,EAAaC,QACvC14B,EAEJ,IAAIisB,EACoB,WAApB1nB,EAEF0nB,GADkBnjB,EAAAA,EAAAA,IAAgB3J,EAAQS,EAAQC,IACvBP,OACE,cAApBiF,EAET0nB,GADqBipB,EAAAA,EAAAA,IAAmB/1C,EAAQS,EAAQC,IAC1BP,OACD,WAApBiF,GAAgC1E,IAAamB,EAAAA,KAEtDirB,GADmBvkB,EAAAA,EAAAA,IAAiBvI,EAAQS,EAAQC,IACxBosB,eAAiB,GAG/C,MAAMw0C,EAAmC,WAApBl8D,GAAgC1E,IAAamB,EAAAA,GAC5D0/D,EAAgB3yD,IAAQ4yD,EAAAA,EAAAA,IAAoBxhE,EAAQ4O,GACpD6yD,EAAgB95D,QAAQ45D,IAAiBG,EAAAA,EAAAA,IAAoB1hE,EAAQS,IACrEkhE,EAAcJ,IAAkBE,GAAiB95D,SAAQi6D,EAAAA,EAAAA,IAA0B5hE,EAAQS,IAC3FohE,EAAel6D,QACnBiH,IAAS0yD,GAAgB1yD,EAAK5L,YAAa8+D,EAAAA,EAAAA,IAAclzD,KAASmzD,EAAAA,EAAAA,IAAiBnzD,KAAUA,EAAK6hC,aAE9FuxB,EAAwBr6D,QAAQiH,GAAM6hC,aAAe7hC,EAAKqzD,eAG1D3mB,EAAoB,CACxB1K,cAHmBE,EAAAA,EAAAA,IAAkB9wC,EAAQS,EAAQC,EAAU,gBAI/DiR,oBACAuwD,oBAAoB94D,EAAAA,EAAAA,IAAyBpJ,EAAQ0hD,GACrDygB,oBAAoBC,EAAAA,EAAAA,IAAqBpiE,GACzCqhE,eACAzyD,OACAke,gBACAu1C,gBAAgBC,EAAAA,EAAAA,IAAqBtiE,EAAQS,GAC7Ci5B,eACA2uB,8BACAka,qBAAsBz0D,KAAKC,IAAI,EAAG6D,EAAazR,OAAS,GACxDy5B,gBAAiB55B,EAAO45B,gBACxBxC,UAAWp3B,EAAOo3B,UAClBorC,kBAAmBb,GAAeF,GAAiBI,GAAgBG,GAG/DprB,GAAenxC,EAAAA,EAAAA,IAAmBzF,EAAQS,GAChD,GAAwB,WAApB2E,IAAiCwxC,EACnC,OAAO0E,EAGT,GAAI56C,IAAamB,EAAAA,KAAmB+M,GAAM5L,QAAS,CACjD,MAAMy/D,GAAkB9hD,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,GAC3DkF,EAAU68D,GAAkB3tD,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQgiE,QAAmB5hE,EACjF6hE,EAAmB98D,GAAU+8D,EAAAA,EAAAA,IAAsB3iE,EAAQ4F,QAAW/E,EACtEs3B,GAAa5vB,EAAAA,EAAAA,IAAiBvI,EAAQS,EAAQC,GAEpD,MAAO,IACF46C,EACH5xC,iBAAkB+4D,EAClB7rB,eACAgsB,UAAU,EACVF,mBACAG,WAAYl7D,QAAQwwB,GAAYhQ,iBAEpC,CAEA,MAAMze,GAAmBC,EAAAA,EAAAA,IAAgB3J,EAAQS,EAAQC,GACzD,GAAIgJ,GAAkBvJ,OAAQ,CAC5B,MAAM2iE,EAAqBlsB,EAAaltC,EAAiB,KACnD,SACJk5D,GACGE,IAAsBj9D,EAAAA,EAAAA,IAA4B7F,EAAQ8iE,EAAoBpiE,IAAc,CAAC,EAElG,MAAO,IACF46C,EACH5xC,mBACAktC,eACAgsB,WAEJ,CAEA,OAAOtnB,CAAK,GA1FIqF,EAhX4BvgD,IA4B1C,IA5B2C,OAC/CK,EAAM,SACNC,EAAQ,gBACR0E,EAAe,QACf29D,EAAO,SACPrhB,EAAQ,iBACRh4C,EAAgB,aAChBktC,EAAY,SACZgsB,EAAQ,iBACRF,EAAgB,aAChB9xB,EAAY,mBACZuxB,EAAkB,kBAClBxwD,EAAiB,mBACjBuwD,EAAkB,aAClBb,EAAY,KACZzyD,EAAI,cACJke,EAAa,WACb+1C,EAAU,eACVR,EAAc,aACd3oC,EAAY,kBACZ8oC,EAAiB,4BACjBna,EAA2B,qBAC3Bka,EAAoB,gBACpB3oC,EAAe,UACfxC,EAAS,wBACT4rC,EAAuB,mBACvBC,EAAkB,qBAClBC,GACD9iE,EACC,MAAM,iBACJ2hC,EAAgB,WAChBohC,EAAU,aACVz6D,EAAY,SACZ1E,EAAQ,iBACRo/D,EAAgB,mBAChBC,EAAkB,iBAClBC,EAAgB,sBAChB5gE,IACEwW,EAAAA,EAAAA,MAEE7T,GAAO25C,EAAAA,GAAAA,KACPukB,GAAqBxiB,EAAAA,EAAAA,KAAO,IAC5B,SAAEyiB,IAAa7hB,EAAAA,EAAAA,MAGf8hB,GADuBC,EAAAA,GAAAA,GAAgBV,GACI,GAAEviE,KAAUC,MAAe,EACtEijE,GAAqBD,EAAAA,GAAAA,GAAgBT,GACrCR,EAAkBpiE,MAAMujE,QAAQl6D,GAAoBA,EAAiB+5D,GAAsB/5D,EAC3Fm6D,EAAgBjtB,GAAgB6rB,EAAkB7rB,EAAa6rB,QAAmB5hE,EAClFijE,EAAsBzjE,MAAMujE,QAAQl6D,GACtCA,EAAiBvJ,OAAUuJ,EAAmB,OAAI7I,EAChDkjE,EAAkBn1D,IAAQgK,EAAAA,EAAAA,GAAavT,EAAMuJ,GAAMzO,OACnD6jE,EAAkBtB,GAAmBl8D,EAAAA,EAAAA,IAAenB,EAAMq9D,QAAoB7hE,GAC9E,SAAEoX,GAAarJ,GAAQ,CAAC,EACxB5L,GAAU4L,GAAM5L,SAEtBw5C,EAAAA,EAAAA,KAAU,KACJ9iB,GAAgBqpC,IAAYriE,IAAamB,EAAAA,IAAkBmB,KAC7DqgE,EAAmB,CAAE5iE,SAAQC,YAC/B,GACC,CAACD,EAAQ4iE,EAAoB3pC,EAAch5B,EAAUqiE,EAAS//D,MAEjEihE,EAAAA,GAAAA,GAAiBxjE,EAAQgiE,EAAiBoB,GAE1C,MAAQpuD,MAAOu1B,KAAgBk5B,EAAAA,GAAAA,KAEzBC,GAAuBn5B,IAAeI,EAAAA,IACtCg5B,GAAwBZ,GAAY7xD,EAGpC0yD,IAAetjB,EAAAA,EAAAA,IAAuB,MACtCujB,IAAqBvjB,EAAAA,EAAAA,KAAgB,IAEnCuV,YAAaiO,GAAmBhO,gBAAiBiO,KAA0BhO,EAAAA,GAAAA,IAAa,KAC9Fz0B,EAAiB,CAAEngC,GAAInB,EAAQC,YAAW,IAGtCq1D,IAAqBxZ,EAAAA,GAAAA,IAAiBl1C,IAC1C87D,EAAW,CAAE97D,YAAWmd,SAAS,GAAO,IAGpCigD,IAA2BloB,EAAAA,GAAAA,IAAiBtqC,IAChD,MAAM5K,EAAY4K,EAAE84C,UAAY1qD,MAAMujE,QAAQl6D,GAC1CA,GAAiBg7D,EAAAA,GAAAA,GAAch7D,EAAiBvJ,OAAQuJ,EAAiBhF,QAAQ+9D,GAAoB,IACrGA,EAEAS,EAAqB77D,IACvBqB,EAAa,CACXjI,SAAQC,WAAU2G,YAAWpF,mBAAmB,GAEpD,IAGI0iE,IAAuBpoB,EAAAA,GAAAA,IAAgB,KAC3Cv4C,EAAS,CAAEpC,GAAInB,EAAQC,WAAUoB,KAAM,UAAW,IAG9C8iE,IAAsBroB,EAAAA,GAAAA,IAAgB,KAC1C/yC,YAAW,KACT+5D,EAAmB1yC,SAAU,CAAI,GAvIL,IAwID,IAGzBg0C,IAAkBtoB,EAAAA,GAAAA,IAAiBtqC,IACvC,GAAKsxD,EAAmB1yC,QAAxB,CASA,GANA0yC,EAAmB1yC,SAAU,EACzB6wB,GACmBnxC,SAASmsC,cAA8BooB,EAAAA,MAC9CxmC,OAGZ6jC,EAGF,OAFAz/D,SACAkiE,KAIF,GAAwB,WAApBx/D,GAAyD,IAAzBm9D,EAUlC,OATKiB,GAAYY,IACfnyD,EAAE4yC,kBACF7gD,EAAS,CAAEpC,QAAIf,GAAa,CAAEiK,uBAAuB,KAErDw4D,SAGFsB,KAKFxB,IACAwB,IA7BuC,CA6BlB,IAGjBG,GACJ/5B,IAAeI,EAAAA,KACZJ,GAAcg6B,EAAAA,KAEjBh6B,GAAci6B,EAAAA,KACXj6B,GAAcI,EAAAA,OACZ24B,GAAmBA,EAAkB,IAEtCmB,GAA6BH,IACjC/5B,GAAcE,EAAAA,KACXF,GAAcm6B,EAAAA,IAGbC,GAAkBz9D,QAAQsQ,GAAUqoD,eAAiBroD,GAAUsoD,iBAAmBtoD,GAAUooD,gBAEhGnV,aAAcma,GACdja,qBAAsBka,KACpBja,EAAAA,GAAAA,GAAkB+Z,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkBntD,OAAWpX,GAAW,IAGrFqqD,aAAcua,GACdra,qBAAsBsa,KACpBra,EAAAA,GAAAA,GAAkB1jD,QAAQ05D,IAExBsE,IAAwBH,EAAAA,GAAAA,GAAiBnE,GAAc,IAG3DnW,aAAc0a,GACdxa,qBAAsBya,KACpBxa,EAAAA,GAAAA,GAAkB1jD,QAAQk8D,QAAgBhjE,GAAW,GAEnDilE,IAAyBN,EAAAA,GAAAA,GAAiB3B,GAAe,GACzDkC,IAA+BP,EAAAA,GAAAA,GAAiB1B,GAAqB,GACrEkC,IAAoBR,EAAAA,GAAAA,GAAiB5C,GAAU,GAC/CqD,IAA8BT,EAAAA,GAAAA,GAAiBxB,GAE/CkC,IAAoBC,EAAAA,GAAAA,GAAY5D,GAChClT,QACkBxuD,IAAtBqlE,IAAmCA,GAAoB3D,EAAuB2D,QAAoBrlE,EAG9FulE,GAAkBR,IAA6BE,IAC/CL,IAA2BE,IAGjCrR,EAAAA,EAAAA,KAAgB,KACd,MAAM+R,EAAchC,GAAaxzC,QACjC,GAAKw1C,EAIL,OAAKnB,IAA+BkB,QAMhClE,GAAsB6C,IACpBT,GAAmBzzC,UACrBw1C,EAAYC,UAAU95C,IAAI,gBAAiB,YAC3C83C,GAAmBzzC,SAAU,GAI/BrnB,YAAW,MACT+8D,EAAAA,EAAAA,KAAgB,KACdF,EAAYC,UAAUE,OAAO,WAAW,GACxC,GAjPiB,OAoPrBH,EAAYC,UAAUE,OAAO,iBAC7BlC,GAAmBzzC,SAAU,KAnB7Bw1C,EAAYC,UAAUE,OAAO,gBAAiB,iBAC9ClC,GAAmBzzC,SAAU,GAmB/B,GACC,CAACq0C,GAA4BkB,GAAgBrB,GAA6B7C,IAE7E,MAAM,qBAAEpjB,IAAyBlB,GAAoBv4C,EAAMu0B,EAAiBxC,GAAW,GAmEvF,SAASqvC,KAA6D,IAA5CC,EAAOxmE,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAUymE,EAAiBzmE,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAC1D,OACEm9C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eACb0sB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLknC,KAAK,UACLJ,MAAM,cACNL,QAAS8lB,GACT3f,UAAW7/C,EAAKqhE,EAAU,QAAU,SAEpCrpB,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,uBAAwBwmB,GAAW,iBAEnEC,GAAqBtpB,EAAAA,GAAAA,cAACupB,GAAa,MAG1C,CAEA,MAAMC,GAAwBl/D,QAAQ89D,IAA2BE,IAC3DmB,GAA4BD,KAC3BnlB,GAAY8gB,GAAqBx3B,GAAc+7B,EAAAA,IAItD,OAFA3gB,EAAAA,GAAAA,GAAgBie,IAGdhnB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eAAe2xB,IAAK+hB,IACjChnB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTzP,KAAMyY,EAA8B,OAAS,YAC7C/I,UAAWijB,EACXnT,eAAa,EACbC,oBAAqBA,IA7FD,WAApBjqD,GACE1E,IAAamB,EAAAA,KAAkB+M,GAAM5L,QAMzCq6C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGopB,KACDppB,EAAAA,GAAAA,cAAA,eACqBx8C,IAAlBisB,EACqB,WAApB1nB,EACEC,EAAKw9D,EAAa,gBAAkB,UAAW/1C,EAAe,KACxC,WAApB1nB,EAAgCC,EAAK,sBAAuBynB,EAAe,KACrD,cAApB1nB,EACAi9D,EAAiBh9D,EAAK,aAAeA,EAAK,WAAYynB,EAAe,UACnEjsB,EACNwE,EAAK,aAQbg4C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,MACI8mB,IAAwB5B,EAAuB,IAAMkE,GAAiBrC,IAAuB,GAC/F/mB,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,oBACVouB,QAASwlB,GACT3N,YAAa4N,KAEZjnC,EAAAA,EAAAA,IAAS98B,GACR48C,EAAAA,GAAAA,cAAC2pB,GAAAA,EAAe,CACdntB,IAAKp5C,EACLwP,OAAQxP,EACRmwC,aAAcA,EACdl3B,OAAQolC,GACRmoB,SAAUt/D,QAAQm3C,IAClBooB,cAAY,EACZC,iBAAe,EACfC,oBAAkB,EAClBC,gBApSY,GAqSZC,OAAK,IAGPjqB,EAAAA,GAAAA,cAACkqB,GAAAA,EAAa,CACZ1tB,IAAKp5C,EACLA,OAAQA,EACRC,SAAUA,EACVkwC,aAAcA,EACdl3B,OAAQolC,GACRmoB,SAAUt/D,QAAQm3C,IAClBqoB,gBAAiBzmE,IAAamB,EAAAA,GAC9BqlE,aAAcxmE,IAAamB,EAAAA,GAC3BulE,oBAAkB,EAClBE,OAAK,OA0CZ5mE,IAAamB,EAAAA,KAAmB+M,GAAM5L,SACrCq6C,EAAAA,GAAAA,cAACmqB,GAAAA,EAAgB,CACfC,gBACG7B,IAA6Bj+D,QAAQm+D,KAClCL,IAA2B99D,QAAQg+D,IAEzCllE,OAAQA,IAIXmlE,IAA6BE,IAC5BzoB,EAAAA,GAAAA,cAACqqB,GAAmB,CAClB7tB,IAAKp5C,EACLmF,QAASkgE,GACT1/C,MAAO2/C,IAAgC,EACvC1mD,MAAOokD,EACP1O,YAAakR,GACbt1C,UAAWk1C,GACX7Q,eAAgBgR,GAAoBjQ,QAAqBl1D,EACzDk+C,QAAS0lB,GACTxP,iBAAkB0P,GAClBnqD,eAAkC3Z,IAAvB8iE,EACXzO,YAAa4R,KAIhBzB,IACChoB,EAAAA,GAAAA,cAACsqB,GAAe,CACd9tB,IAAKp5C,EACLA,OAAQA,EACRwX,SAAUstD,GACV50C,UAAW20C,KAIfjoB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBACZk2C,IACCxpB,EAAAA,GAAAA,cAACuqB,GAAW,CACV/tB,KAAKguB,EAAAA,EAAAA,IAAclC,IACnB//D,QAAS+/D,GACTh1C,UAAW+0C,KAGfroB,EAAAA,GAAAA,cAACyqB,GAAAA,EAAa,CACZrnE,OAAQA,EACRC,SAAUA,EACV0E,gBAAiBA,EACjBs8C,SAAUA,EACVqmB,kBAAmBlB,MAGnB,KC3cH,SAASmB,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GAAcxiE,EAAwBkvC,GACpD,IAMIuzB,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAc5iE,EAAS,GAAG4H,KAC1Bi7D,UAAUC,EAAAA,GAAAA,IAAiC,IAAnB9iE,EAAS,GAAG4H,MACpCm7D,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DA3iE,EAASoG,SAAQ,CAAClG,EAASyZ,KACrBzZ,EAAQ+nC,UACLw6B,GAOHA,EAAaziE,SAASa,KAAKX,GACvBA,EAAQ4H,QAAQvJ,OAClBkkE,EAAaQ,YAAc/iE,IAR7BuiE,EAAe,CACbS,QAAShjE,EAAQqE,UACjBvE,SAAU,CAACE,GACX+iE,YAAa/iE,GASjBwiE,EAAmB7hE,KAAKX,GAG1B,MAAMijE,EAAcnjE,EAAS2Z,EAAQ,GASrC,IANE8oD,GACKU,GAAgBA,EAAY5+D,WAAa4+D,EAAY5+D,YAAck+D,EAAaS,UAErFR,EAAmB7hE,KAAK4hE,GACxBA,OAAetnE,GAEbgoE,EAAa,CACf,MAAMC,GAAyBN,EAAAA,GAAAA,IAAiC,IAAnBK,EAAYv7D,MACrD+6D,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAYv7D,KAC1Bi7D,SAAUO,EACVL,aAAc,IAEhBC,EAAWniE,KAAK8hE,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAaliE,KAAK6hE,KAEnCS,EAAYjnE,KAAOgzC,GAChBhvC,EAAQqP,WAAa4zD,EAAY5zD,UACjCrP,EAAQ8H,aAAem7D,EAAYn7D,aAClCinC,EAAAA,EAAAA,IAAgB/uC,KAAaA,EAAQ4H,QAAQ6H,QAAQgmC,YACrD1G,EAAAA,EAAAA,IAAgBk0B,KAAiBA,EAAYr7D,QAAQ6H,QAAQgmC,WAE/Dz1C,EAAQmjE,aAAeF,EAAYE,cAEjCnjE,EAAQmjE,YAAYC,eAAiBH,EAAYE,YAAYC,cAC1DpjE,EAAQmjE,YAAY79D,aAAe29D,EAAYE,YAAY79D,YAC3DtF,EAAQmjE,YAAYE,iBAAmBJ,EAAYE,YAAYE,iBAGnErjE,EAAQsjE,eACRL,EAAYK,eACXL,EAAYv7D,KAAO1H,EAAQ0H,KA9ER,OAgFvB86D,EAAqB,GACrBC,EAAiBI,aAAaliE,KAAK6hE,GAEvC,KAGKM,CACT,C,+ICpFA,MACMS,GAAkCrrC,EAAAA,GAAa,IAAO,ICD/CsrC,GAAgC,GAAK3+B,GAAAA,GACrC4+B,GAA4B,GAAK5+B,GAAAA,GACxC6+B,GAAyC,GAAK7+B,GAAAA,GAC9C8+B,GAAkB,EAAI9+B,GAAAA,GACf++B,GAAmB,EAAI/+B,GAAAA,GAG7B,SAASg/B,GAAiBC,EAAmBC,GAClD,OAAOD,EACFC,EAAmBL,GAAyCD,GAC5DM,EAAmBP,GAAgCG,EAC1D,CAEO,SAASK,GACdhkE,EAAqBikE,EAAuBC,EAAqBpoB,GAEjE,MAAMqoB,GAAQC,EAAAA,EAAAA,IAAapkE,GACrBm0B,GAAQkwC,EAAAA,EAAAA,IAAgBrkE,KAAYskE,EAAAA,EAAAA,IAAuBtkE,GAC3DiuC,GAAQs2B,EAAAA,EAAAA,IAAgBvkE,GAExBwkE,EAAiBziE,SAAQuiE,EAAAA,EAAAA,IAAuBtkE,IAChDykE,EAAiB1iE,SAAQ2iE,EAAAA,EAAAA,IAAuB1kE,KAChD,MAAE6P,EAAK,OAAEC,GAAWqkB,GACtBwwC,EAAAA,GAAAA,IAA+BxwC,EAAOgwC,EAAOF,EAAaO,EAAgBN,EAAWpoB,IACrF8oB,EAAAA,GAAAA,IAAyB32B,EAAQk2B,EAAOF,EAAaQ,EAAgBP,EAAWpoB,GAG9E+oB,EAAgBhB,GADN9hE,SAAQmuC,EAAAA,EAAAA,IAAelwC,KAGvC,IAAI8kE,EAAgB,EAChBj1D,EAAQg1D,GAAiBA,EAAgBh1D,EAzBjB,KA0B1Bi1D,EAAgBD,EAAgBh1D,GAE9BC,EAASg1D,EAAgBlB,IAAoBA,GAAmB9zD,EAASg1D,EA5BjD,KA6B1BA,EAAgBlB,GAAmB9zD,GAGrC,MAAMi1D,EAAa78D,KAAKwK,MAAM7C,EAAQi1D,GAChCE,EAAc98D,KAAKwK,MAAM5C,EAASg1D,GAExC,MAAO,CACLj1D,MAAOk1D,EACPj1D,OAAQk1D,EACRC,QAASF,EAAaF,GAAiBG,EAAcpB,GAEzD,CCUA,SAASsB,GAAWC,EAAgBC,GAClC,OAAOD,EAAK5kE,QAAO,CAAC8kE,EAAaC,IAASD,EAAcC,GAAMF,EAChE,CAQA,SAASG,GAAuBC,GAC9B,MAAM9qB,EAAwB,CAAE7qC,MAAO,EAAGC,OAAQ,GAalD,OAZA01D,EAAOt/D,SAAQ1L,IAGT,IAHU,WACdirE,EAAU,MACVC,GACDlrE,EAlEM,EAmEDkrE,IACFhrB,EAAO7qC,MAAQ41D,EAAW51D,MAAQ41D,EAAWtgC,GAnEzC,EAqEFugC,IACFhrB,EAAO5qC,OAAS21D,EAAW31D,OAAS21D,EAAWz+B,EACjD,IAGK0T,CACT,CAEO,SAASirB,GACdxB,EACAF,EACAC,EACArO,EACA/Z,GAEA,MACM8pB,EArDR,SAAmB9lE,EAAwBg8C,GACzC,OAAOh8C,EAASC,KACbC,IACC,MAAMylE,EAAazB,GAAyBhkE,OAAS/E,OAAWA,EAAW6gD,GAE3E,OAAO2pB,EAAW51D,MAAQ41D,EAAW31D,MAAM,GAGjD,CA6CiB+1D,CAAUhQ,EAAM/1D,SAAUg8C,GACnCgqB,EA5CR,SAAwBF,GACtB,OAAOA,EAAO7lE,KAAKmyD,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOjxD,KAAK,GACrF,CA0CsB8kE,CAAeH,GAC7BI,EAzCR,SAAyBJ,GACvB,OAAOA,EAAOrlE,QAAO,CAACD,EAAQ4xD,IAAUA,EAAQ5xD,GAAQ,GAAKslE,EAAOrrE,MACtE,CAuCuB0rE,CAAgBL,GAC/BM,EAAaN,EAAOrrE,OACpB4rE,EAAYP,EAAOz9B,MAAM+pB,GAAUA,EAAQ,IAC3CkU,GAAWC,EAAAA,GAAAA,IAAkBlC,EAAOF,GAAa,EAAOC,EAAWpoB,IAAamoB,EAAc,IAAM,GAAKp/B,GAAAA,GAG/G,IAAI2gC,EAEJ,MAAMtrD,EAAS,CACb0rD,SACAE,cACAE,eACAI,WACAE,SAAU,IACVC,UAVgBH,EAWhBI,QAlBc,GA+BhB,OATEhB,EADEU,GAAc,GAAKC,EAgBzB,SAAkC/9D,GAOhB,IANhBw9D,OAAQa,EAAc,aACtBT,EAAY,SACZI,EAAQ,SACRE,EAAQ,QACRE,EAAO,UACPD,EAAa,EAAIH,EAAY,GACfh+D,EACd,MAAMw9D,EA3ER,SAAoBA,EAAkBI,GACpC,OAAOJ,EAAO7lE,KAAKmyD,GACT8T,EAAe,KAAMU,EAAAA,GAAAA,IAAMxU,EAAO,EAAG,OAAQwU,EAAAA,GAAAA,IAAMxU,EAAO,MAAQ,IAE9E,CAuEiByU,CAAWF,EAAgBT,GACpCxlD,EAAQimD,EAAelsE,OACvB+F,EAAS,IAAI7F,MAAM+lB,GACnBomD,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAI/8D,EAAS,EACb88D,EAAW5gE,SAAS8gE,IAClBD,EAAQpmE,KAXQsmE,EAACj9D,EAAgBk9D,KACnC,MACMC,EAAMjC,GADUU,EAAOv+D,MAAM2C,EAAQA,EAASk9D,GACd,GAEtC,OAAQd,GAAYc,EAAe,GAAKV,GAAWW,CAAG,EAOvCF,CAAYj9D,EAAQg9D,IACjCh9D,GAAUg9D,CAAY,IAGxBJ,EAASjmE,KAAK,CACZmmE,aACAC,WACA,EAGJ,IAAK,IAAIK,EAAQ,EAAGA,IAAU5mD,IAAS4mD,EAAO,CAC5C,MAAMC,EAAS7mD,EAAQ4mD,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,GAExB,CAEA,IAAK,IAAID,EAAQ,EAAGA,IAAU5mD,EAAQ,IAAK4mD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW7mD,EAAQ4mD,IAASC,EAAQ,CACvD,MAAMC,EAAQ9mD,EAAQ4mD,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,GAEhC,CAGF,IAAK,IAAIF,EAAQ,EAAGA,IAAU5mD,EAAQ,IAAK4mD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW7mD,EAAQ4mD,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAU9mD,EAAQ4mD,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAAS/mD,EAAQ4mD,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,GAEvC,CAIJ,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAI/tD,EAAI,EAAGA,EAAIktD,EAASrsE,OAAQmf,IAAK,CACxC,MAAM,QACJqtD,EAAO,WACPD,GACEF,EAASltD,GACPguD,EAAYZ,EAAWvsE,OACvBotE,EAAczC,GAAW6B,EAAS,GAAKP,GAAWkB,EAAY,GAE9DE,EADgB1/D,KAAKq9B,OAAOwhC,GACLT,EAAW,IAAM,EACxCuB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,CACR,EARY,GASPC,EAAO7/D,KAAK8/D,IAAIL,EAAcpB,GAAaqB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASltD,GAC1B+tD,EAAcM,EAElB,CAEA,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAc1tE,OAC/B,IAAIkf,EAAQ,EACRutB,EAAI,EACR,IAAK,IAAIohC,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5Bt4D,EAAS5H,KAAKwK,MAAM41D,GAC1B,IAAInjC,EAAI,EAER,IAAK,IAAIojC,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAM7C,EAjOJ,GAkOW,IAAR0C,EAjOJ,EADC,IAmOGA,IAAQD,EAAW,EAhOpB,EAHF,IAoOW,IAARI,EAhOH,EAJA,IAqOGA,IAAQF,EAAW,EAnOrB,EAFD,GAsOInW,EAAQ0T,EAAOnsD,GACf5J,EAAQ04D,IAAQF,EAAW,EAAIjC,EAAWjhC,EAAIj9B,KAAKwK,MAAMw/C,EAAQoW,GACvEhoE,EAAOmZ,GAAS,CACdgsD,WAAY,CACVtgC,IACA6B,IACAn3B,QACAC,UAEF41D,SAEFvgC,GAAKt1B,EAAQ22D,IACX/sD,CACJ,CACAutB,GAAKl3B,EAAS02D,CAChB,CAEA,OAAOlmE,CACT,CA3IakoE,CAA0BtuD,GACX,IAAfgsD,EA4Ib,SAAmBhsD,GACjB,MAAM,OACJ0rD,EAAM,YACNE,EAAW,aACXE,GACE9rD,EACJ,MAAuB,OAAhB4rD,GAAwBE,EAAe,KAAOJ,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4B1rD,GAC1B,MAAM,OACJ0rD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACErsD,EACEpK,EAAS5H,KAAKwK,MAAMxK,KAAKq9B,IAAI6gC,EAAWR,EAAO,GAAI19D,KAAKq9B,IAAI6gC,EAAWR,EAAO,IAAKW,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNf,WAAY,CACVtgC,EAAG,EACH6B,EAAG,EACHn3B,MAAOu2D,EACPt2D,UAEF41D,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAG,EACH6B,EAAGl3B,EAAS02D,EACZ32D,MAAOu2D,EACPt2D,UAEF41D,MAAO+C,IAEX,CAhCMC,CAAmBxuD,GACH,OAAhB4rD,GAAwC,OAAhBA,EAiC9B,SAAiC5rD,GAC/B,MAAM,OACJ0rD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACErsD,EACErK,GAASu2D,EAAWI,GAAW,EAC/B12D,EAAS5H,KAAKwK,MAAMxK,KAAKq9B,IAAI11B,EAAQ+1D,EAAO,GAAI19D,KAAKq9B,IAAI11B,EAAQ+1D,EAAO,GAAIW,KAClF,MAAO,CAAC,CACNd,WAAY,CACVtgC,EAAG,EACH6B,EAAG,EACHn3B,QACAC,UAEF41D,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAGt1B,EAAQ22D,EACXx/B,EAAG,EACHn3B,QACAC,UAEF41D,MAAO+C,GAEX,CA1DQE,CAAwBzuD,GA4DhC,SAA4BA,GAC1B,MAAM,OACJ0rD,EAAM,SACNU,EAAQ,SACRF,EAAQ,QACRI,EAAO,UACPD,GACErsD,EACE0uD,EAAe1gE,KAAKwK,MAAM,IAAM4zD,GAChCuC,EAAc3gE,KAAKq9B,IACvBr9B,KAAKwK,MACHxK,KAAKC,IACH,IAAOi+D,EAAWI,IACjBJ,EAAWI,GAAWZ,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEQ,EAAWI,EAAUoC,GAEjBE,EAAa1C,EAAWyC,EAAcrC,EACtC12D,EAAS5H,KAAKq9B,IAAIghC,EAAWr+D,KAAKwK,MAAMxK,KAAKq9B,IAAIujC,EAAalD,EAAO,GAAIiD,EAAcjD,EAAO,MAEpG,MAAO,CAAC,CACNH,WAAY,CACVtgC,EAAG,EACH6B,EAAG,EACHn3B,MAAOi5D,EACPh5D,UAEF41D,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAG2jC,EAAatC,EAChBx/B,EAAG,EACHn3B,MAAOg5D,EACP/4D,UAEF41D,MAAO+C,GAEX,CAjGQM,CAAmB7uD,EAC3B,CAtJa8uD,CAAU9uD,GACK,IAAfgsD,EAuPb,SAAqBhsD,GACnB,MAAM,YAAE4rD,GAAgB5rD,EAExB,MAA0B,MAAnB4rD,EAAY,GAKrB,SAAiC5rD,GAC/B,MAAM,UACJqsD,EAAS,QACTC,EAAO,OACPZ,EAAM,SACNQ,EAAQ,SACRE,GACEpsD,EACE+uD,EAAc1C,EACd2C,EAAchhE,KAAKwK,MACvBxK,KAAKq9B,KACFghC,EAAYC,GAAW,EACvBZ,EAAO,IAAMQ,EAAWI,IAAaZ,EAAO,GAAKA,EAAO,MAGvDuD,EAAeF,EAAcC,EAAc1C,EAC3C4C,EAAalhE,KAAKC,IACtBm+D,EACAp+D,KAAKwK,MACHxK,KAAKq9B,KACF6gC,EAAWI,GAAW,EACvBt+D,KAAKq9B,IACH2jC,EAActD,EAAO,GACrBuD,EAAevD,EAAO,OAKxByD,EAAYnhE,KAAKq9B,IAAIr9B,KAAKwK,MAAMu2D,EAAcrD,EAAO,IAAKQ,EAAWI,EAAU4C,GAErF,MAAO,CAAC,CACN3D,WAAY,CACVtgC,EAAG,EACH6B,EAAG,EACHn3B,MAAOw5D,EACPv5D,OAAQm5D,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAGkkC,EAAY7C,EACfx/B,EAAG,EACHn3B,MAAOu5D,EACPt5D,OAAQq5D,GAEVzD,MAAO+C,GACN,CACDhD,WAAY,CACVtgC,EAAGkkC,EAAY7C,EACfx/B,EAAGmiC,EAAe3C,EAClB32D,MAAOu5D,EACPt5D,OAAQo5D,GAEVxD,MAAO+C,GAEX,CA3DMa,CAAwBpvD,GA6D9B,SAAgCA,GAC9B,MAAM,SACJksD,EAAQ,OACRR,EAAM,UACNW,EAAS,QACTC,GACEtsD,EACE4uD,EAAa1C,EACb6C,EAAc/gE,KAAKwK,MAAMxK,KAAKq9B,IAAIujC,EAAalD,EAAO,GAAI,KAAQW,EAAYC,KAC9EqC,GAAezC,EAAWI,GAAW,EACrC2C,EAAejhE,KAAKq9B,IACxBghC,EAAY0C,EAAczC,EAC1Bt+D,KAAKwK,MAAMxK,KAAKq9B,IACdsjC,EAAcjD,EAAO,GACrBiD,EAAcjD,EAAO,MAKzB,MAAO,CAAC,CACNH,WAAY,CACVtgC,EAAG,EACH6B,EAAG,EACHn3B,MAAOi5D,EACPh5D,OAAQm5D,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAG,EACH6B,EAAGiiC,EAAczC,EACjB32D,MAAOg5D,EACP/4D,OAAQq5D,GAEVzD,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAG0jC,EAAcrC,EACjBx/B,EAAGiiC,EAAczC,EACjB32D,MAtBei5D,EAAaD,EAAcrC,EAuB1C12D,OAAQq5D,GAEVzD,MAAO+C,GAEX,CAxGMc,CAAuBrvD,EAC7B,CA5PasvD,CAAYtvD,GAqWzB,SAAoBA,GAClB,MAAM,YAAE4rD,GAAgB5rD,EAExB,MAA0B,MAAnB4rD,EAAY,GAKrB,SAA8BzuD,GAMZ,IANa,SAC7B+uD,EAAQ,OACRR,EAAM,QACNY,EAAO,UACPD,EAAS,SACTD,GACcjvD,EACd,MAAMoyD,EAAIrD,EACJsD,EAAKxhE,KAAKwK,MAAMxK,KAAKq9B,IAAIkkC,EAAI7D,EAAO,GAAI,KAAQW,EAAYC,KAC5DmD,EAAIzhE,KAAKwK,OAAO0zD,EAAW,EAAII,IAAYZ,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAK1hE,KAAKC,IAAIm+D,EAAUp+D,KAAKwK,MAAMxK,KAAKq9B,IAAI,IAAO6gC,EAAW,EAAII,GAAUmD,EAAI/D,EAAO,MACvFiE,EAAK3hE,KAAKwK,MAAMxK,KAAKC,IAAID,KAAKC,IAAIm+D,EAAU,KAAQF,EAAW,EAAII,IAAWmD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIrD,EACvBuD,EAAK7hE,KAAKq9B,IAAIghC,EAAYmD,EAAKlD,EAASmD,GAE9C,MAAO,CAAC,CACNlE,WAAY,CACVtgC,EAAG,EACH6B,EAAG,EACHn3B,MAAO45D,EACP35D,OAAQ45D,GAEVhE,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAG,EACH6B,EAAG0iC,EAAKlD,EACR32D,MAAO+5D,EACP95D,OAAQi6D,GAEVrE,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAGykC,EAAKpD,EACRx/B,EAAG0iC,EAAKlD,EACR32D,MAAOi6D,EACPh6D,OAAQi6D,GAEVrE,MAjgBM,GAkgBL,CACDD,WAAY,CACVtgC,EAAGykC,EAAKpD,EAAUsD,EAAKtD,EACvBx/B,EAAG0iC,EAAKlD,EACR32D,MAAOg6D,EACP/5D,OAAQi6D,GAEVrE,MAAO+C,GAEX,CApDMuB,CAAsB9vD,GAsD5B,SAA+BnC,GAMb,IANc,UAC9BwuD,EAAS,OACTX,EAAM,SACNQ,EAAQ,QACRI,EAAO,SACPF,GACcvuD,EACd,MAAM4xD,EAAIpD,EACJqD,EAAK1hE,KAAKwK,MAAMxK,KAAKq9B,IAAIokC,EAAI/D,EAAO,GAAI,IAAOQ,EAAWI,KAC1DiD,EAAIvhE,KAAKwK,OAAO6zD,EAAY,EAAIC,IAAY,EAAIZ,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAKxhE,KAAKwK,MAAM+2D,EAAI7D,EAAO,IAC3BmE,EAAK7hE,KAAKwK,MAAM+2D,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAIvD,EACvBsD,EAAK5hE,KAAKC,IAAIm+D,EAAUp+D,KAAKq9B,IAAI6gC,EAAWwD,EAAKpD,EAASiD,IAEhE,MAAO,CAAC,CACNhE,WAAY,CACVtgC,EAAG,EACH6B,EAAG,EACHn3B,MAAO+5D,EACP95D,OAAQ65D,GAEVjE,MAAO+C,IACN,CACDhD,WAAY,CACVtgC,EAAGykC,EAAKpD,EACRx/B,EAAG,EACHn3B,MAAOi6D,EACPh6D,OAAQ45D,GAEVhE,MAAO+C,GACN,CACDhD,WAAY,CACVtgC,EAAGykC,EAAKpD,EACRx/B,EAAG0iC,EAAKlD,EACR32D,MAAOi6D,EACPh6D,OAAQi6D,GAEVrE,MApjBK,GAqjBJ,CACDD,WAAY,CACVtgC,EAAGykC,EAAKpD,EACRx/B,EAAG0iC,EAAKK,EAAK,EAAIvD,EACjB32D,MAAOi6D,EACPh6D,OAAQm6D,GAEVvE,MAAO+C,GAEX,CArGMyB,CAAuBhwD,EAC7B,CAzWaiwD,CAAWjwD,GAGf,CACLsrD,SACA4E,eAAgB7E,GAAuBC,GAE3C,C,4BC3He,SAAS6E,GACtBC,EACA7oE,EACA5G,EACA0vE,EACAC,EACAC,EACAjmE,EACAkmE,GAEA,MAAMC,GAAiBxvB,EAAAA,EAAAA,KAAQuvB,IAE/Bhc,EAAAA,EAAAA,KAAgB,KACd,MAAMkc,EAAcD,EAAe1/C,QAGnC,GAFA0/C,EAAe1/C,SAAU,EAErBs/C,GAAaD,EAAWr/C,QAAS,CACnC,MAAM4/C,EAAoBP,EAAWr/C,QAAQ6/C,QAAwB,gBAE/DC,EAAaN,EAEbO,EAAOA,KAAMC,EAAAA,GAAAA,IACjBJ,EACAP,EAAWr/C,QACX8/C,EAAa,MAAQ,cA1BR,QA4BM9vE,IAAnBuvE,EAAgCO,EA9BZ,IACG,SA6BsE9vE,EAC7FuvE,OACAvvE,EACAuJ,GACA,GAGEomE,GAEFM,EAAAA,EAAAA,IAAoBF,IAEpBG,EAAAA,EAAAA,KAAe,MACbxK,EAAAA,EAAAA,IAAgBqK,IAAQ,GAG9B,IACC,CACDV,EAAYzvE,EAAQ0vE,EAAWC,EAAgBC,EAAkBjmE,GAErE,C,0BC1CA,MAGM4mE,GAA4B,EAAIvmC,GAAAA,GAChCwmC,GAA6B5oE,OAAOoiC,GAAAA,IACpCymC,GAAgC,+BAEvB,SAASC,GACtBC,EACAhe,EACA/rD,EACA2gE,EACAqJ,EACAC,EACAC,EACAlT,EACAjB,EACA38D,EACA+wE,EACAC,EACA1H,EACA2H,GAEA,MAAM,gBAAEjpE,EAAe,oBAAEkpE,IAAwBz4D,EAAAA,EAAAA,OAE1C04D,EAAwBC,EAA0BC,IAA8B3wB,EAAAA,GAAAA,MAChF4wB,EAAUC,EAAYC,IAAgB9wB,EAAAA,GAAAA,KACvC+wB,GAAsBnxB,EAAAA,EAAAA,MAOtBoxB,GAAkBC,EAAAA,GAAAA,IAAsBngE,IAC5C,MAAMogE,EAAyBZ,EAAiB5gD,QAChD,IAAKwhD,EAAwB,OAE7B,MAAM,QAAEC,EAAO,QAAEC,GAAYtgE,GAE3B84B,EAAGynC,EAAgB/8D,MAAOg9D,EAAoB7lC,EAAG8lC,EAAgBh9D,OAAQi9D,GACvEN,EAAuBO,wBACrB7nC,EAAIynC,EAAiBC,EAAqB,EAC1C7lC,EAAI8lC,EAAiBC,EAAsB,EAE3CE,EAAa/kE,KAAK8/D,IAAI7iC,EAAIunC,GAAWtB,GACrC8B,EAAahlE,KAAK8/D,IAAIhhC,EAAI2lC,GAAWtB,GACvC4B,GAAcC,EAChBjB,IAEAC,GACF,GACC,CAACL,GAAmBV,EAAAA,IA0HvB,OA5CAv0B,EAAAA,EAAAA,KAAU,KACR,IAAKhwC,EAAAA,IAAgB6kE,IAAmBC,GAAYE,EAClD,OAGF,IAAIuB,EACJ,OAAOzoB,EAAAA,GAAAA,IAAc8I,EAAaviC,QAAU,CAC1C05B,wBAAyB,eACzByoB,wBAAyB,gBACzBxoB,QAAUA,CAACv4C,EAAGlH,IACRA,IAAc0/C,GAAAA,GAAAA,OACXsoB,IACHA,EAAYnmE,KAAKC,OAGnBmlE,KAEO,GAKXiB,UAAWA,KACJF,GAAczB,IAInB7oE,EAAgB,CAAEpB,cAElBmC,WAAWyoE,EAAcnkE,KAAKC,IAAI,EA9JT,KA8JwCnB,KAAKC,MAAQkmE,KAC9EA,OAAYlyE,EAAS,GAEvB,GACD,CACDuyD,EAAcie,EAAgBhqE,EAAWoB,EAAiBupE,EAAYC,EAAcX,EAAUE,IAUzF,CACLjb,gBAAkB8a,OAAmCxwE,EAlJvD,SAAyBoR,IACvBihE,EAAAA,GAAAA,GAAwBjhE,GACxBmrD,EAAwBnrD,EAC1B,EAgJEqkD,YA1FF,SAAqBrkD,GACnB,GAAIo/D,EACFD,EAAcn/D,QAIhB,GAAKzF,EAAAA,GAEL,OAAI0lE,EAAoBrhD,SACtBjZ,cAAcs6D,EAAoBrhD,SAClCqhD,EAAoBrhD,aAAUhwB,OAhBhC8wE,EAAoB,CAClBlxE,SACA4G,oBAmBF6qE,EAAoBrhD,QAAUrnB,YAAW,KACvC0oE,EAAoBrhD,aAAUhwB,EAxClC,SAAmBoR,GACjB,GAAI6rB,EAAAA,GAAY,CACd,MAAMq1C,EAASlhE,EAAEkhE,OACjB,IAAKA,EAAO7M,UAAU8M,SAAS,kBAAoBD,EAAO7M,UAAU8M,SAAS,WAC3E,OAGEnoC,GAAAA,EAAAA,uBACFzhC,YAAW,KACT60D,EAAcpsD,EAAE,GAvEa,KA0E/BosD,EAAcpsD,EAElB,CACF,CA0BIohE,CAAUphE,EAAE,GArGsB,KAuGtC,EAwEEorD,kBAAoBgU,EAAsCE,EAAc+B,GAAAA,OAAYzyE,EAtEtF,SAA2BoR,GACzB,GAAI6rB,EAAAA,GAAY,CACd,GAAK7rB,EAAEkhE,OAAuBI,QAAQ,YAAc/B,EAClD,OAGFv/D,EAAE8qC,iBACFq0B,GACF,MACE/S,EAAcpsD,EAElB,EA4DEuhE,kBAAoBnC,OAA8CxwE,EA1DpE,YACM2L,EAAAA,IAAiB8kE,GAErB7oE,EAAgB,CAAEpB,aACpB,EAuDEosE,yBAA2BjnE,EAAAA,QAAiC3L,EArD9D,SAAyBoR,GACvBA,EAAE4yC,iBACJ,EAoDEstB,kBACAuB,wBA/HF,SAAiCzhE,GAC/BA,EAAE4yC,kBACF8sB,EAAoB,CAClBlxE,SACA4G,aAEJ,EA0HEknD,iBAfF,SAA0Bt8C,IAGxB8+D,EAAAA,EAAAA,IAAee,GACXJ,GAyBR,SAAuCz/D,GACrC,MAAM0hE,EAAmBC,GAA8B3hE,EAAE4hE,eACrDF,GACFA,EAAiBG,gBAAgB5C,GAErC,CA9BgC6C,CAA8B9hE,EAC5D,EAWE8/D,WACAH,yBACAoC,iCAEJ,CAEA,SAASA,GAA8B/hE,GACrC,MAAM0hE,EAAmBC,GAA8B3hE,EAAE4hE,eACrDF,GACFA,EAAiBM,aAAa/C,GAA+B,GAEjE,CASA,SAAS0C,GAA8BM,GACrC,IAAIrjD,EAA0BqjD,EAE9B,GACErjD,EAAUA,EAAQsjD,yBACXtjD,IAAYA,EAAQy1C,UAAU8M,SAAS,2BAEhD,OAAOviD,CACT,C,4BCtNA,IAAIujD,GACJ,MAAMC,GAAyB,IAAIC,GAAAA,EAE/BC,EAAAA,IACF/qE,YAGF,WACO4qE,KACHA,IAASI,EAAAA,GAAAA,GACP,IAAIC,OAAO,IAAIxqD,IAAI,qBAErBoqD,GAAuBjc,UAE3B,GAnB0B,K,4BCA1B,MAQA,IAAepb,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAE36C,GAAW26C,EACby3B,GAAuBv3B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB96C,GAGrF,OAAOoyE,EAAuBr3B,EAAAA,GAAAA,cAACq3B,EAAyBz3B,QAAYp8C,CAAS,I,4BCc/E,MAmGA,IAAem8C,EAAAA,EAAAA,KAnGoC58C,IAG7C,IAH8C,QAClDwF,EAAO,cACPgtD,GACDxyD,EACC,MAAM,gBACJu0E,EAAe,mBAAEC,EAAkB,iBAAEroE,IACnC2M,EAAAA,EAAAA,OAEE,WAAExL,GAAe9H,EAEjBP,GAAO25C,EAAAA,GAAAA,MACN61B,EAAeC,IAAoB72B,EAAAA,EAAAA,OACnC82B,EAAkBC,EAAgBC,IAAmB9zB,EAAAA,GAAAA,IAAQ,GAC9D+zB,GAAoBr1B,EAAAA,GAAAA,IAAS0V,EAAAA,EAAAA,IAAoB3vD,EAAS,SAC1Do2C,EAAUp2C,EAAQ4H,QAAQ6H,OAAQ0kB,OAAOiiB,QAEzCm5B,GAAyB54B,EAAAA,GAAAA,IAAgB,KAC7ChwC,EAAiB,CACfuE,MAAOzL,EAAK,wBACZO,QAASP,EAAK,mBACdgQ,OAAQ,CACNA,OAAQ,4BACRpU,QAAS,CACPuQ,OAAQ6J,EAAAA,GAAAA,OAGZ+5D,WAAY/vE,EAAK,SACjB,IAGEgwE,GAA2B94B,EAAAA,GAAAA,IAAiBzlB,IAChDg+C,OAAiBj0E,GACjB+zE,EAAmB,CAAE99C,SACrBq+C,GAAwB,IAGpBG,GAAuB/4B,EAAAA,GAAAA,IAAgB,KAC3Cu4B,OAAiBj0E,EAAU,IAGvB00E,GAAiBh5B,EAAAA,GAAAA,IAAgBjiC,UACrC26D,IACAE,IAGA,MAAMp7C,EAAQn0B,EAAQ4H,QAAQ6H,OAAQ0kB,MAChCga,QAAgB1H,GAAAA,GAAmB,cAAatS,EAAMn4B,YAAa0qC,EAAAA,GAAAA,SACnEisB,QAAaxhD,MAAMg9B,GAAS/8B,MAAM60B,GAAMA,EAAE0sB,SAChDqc,EAAmB,CACjB99C,KAAM,IAAI0+C,KAAK,CAACjd,GAAO,cACvBvc,SAAS,EACTy5B,QAAS17C,EAAM27C,YAAYvoE,MAAMwG,QAAyB9S,IAAnB8S,EAAEgiE,gBAA6BA,cACtE,IAoBJ,OACEt4B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,kCAAkCs8B,SAAU,EAAG2oB,KAAK,SAAS72B,QAlB7CzkC,WAC3B5M,GAAcwnE,EACbl5B,EACFg5B,IAEAF,QAAuB/9D,MAAMm+D,GAAmBl+D,MAAM60B,GAAMA,EAAE0sB,UAGhEoc,EAAgB,CACdl0E,OAAQmF,EAAQnF,OAChBqZ,QAASlU,EAAQhE,GACjBlB,SAAUmB,EAAAA,GACV8G,OAAQktE,EAAAA,GAAAA,iBAEZ,GAKEx4B,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CACL/7C,MAAOn0B,EAAQ4H,QAAQ6H,OAAQ0kB,MAC/Bg8C,kBAAgB,EAChBC,UAAWh6B,EACXwD,KAAK,UAEPnC,EAAAA,GAAAA,cAAA,YAAOuV,KAEPvV,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,yBAAyBtrB,EAAK22C,EAAU,kBAAoB,oBAC5EqB,EAAAA,GAAAA,cAAC44B,GAAAA,EAAS,CACRn/C,KAAM+9C,EACNhyB,QAASyyB,EACT9tB,SAAU6tB,IAEZh4B,EAAAA,GAAAA,cAACoZ,GAAAA,EAAa,CACZn0D,OAAQyyE,EACRjkE,MAAOzL,EAAK,kBACZsxD,eAAgB4e,EAChB1yB,QAASoyB,EACTiB,UAAWtjB,MAER,IC2IX,IAAe5V,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAAwC,IAAtC,QAAEpI,EAAO,SAAElF,GAAUsN,EAC5B,MAAM,OACJvN,EAAM,SAAEwU,EAAQ,iBAAEuM,EAAgB,QAAEhU,GAClC5H,EAEEqK,EAASgF,GACT,cAAEkhE,EAAa,aAAEC,GAAiB5oE,EAAQ6H,QAAU,CAAC,EACrDghE,EAAkB70D,EAClB80D,EAAgBD,GAClBvhE,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ41E,QAClCx1E,EAEEsvE,IAAYzvE,IAAW61E,EAAAA,EAAAA,IAAuBv2E,EAAQ4F,EAASlF,IAEnEqK,UAAWqlE,EACXxmE,YAAaymE,GACVF,IAAa7uE,EAAAA,EAAAA,IAAetB,GAAQw2E,gBAAmB,CAAC,EAEvD5nE,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1Bg2E,EAAS7nE,KAASkzD,EAAAA,EAAAA,IAAclzD,IAASqB,IAAWxP,GACpDi2E,GAAcD,GAAUxmE,GAAS8T,EAAAA,EAAAA,IAAW/jB,EAAQiQ,QAAUpP,EAC9D81E,EAAaF,EAAS7nE,OAAO/N,EAC7B+1E,EAAqB52E,EAAOwvB,cAAcpd,WAAW,GAG3D,MAAO,CACLskE,aACAC,aACAP,eACAD,gBACAG,gBACAnG,YACAyG,qBACAtwD,OAVY0uB,EAAAA,EAAAA,IAAuBh1C,EAAQ4F,GAW3CixE,uBAAuBC,EAAAA,EAAAA,IAA4B92E,MAC/CmwE,GAAa,CACfC,iBACAC,oBAEH,GAxCe1vB,EA3L6BvgD,IAuB3C,IAvB4C,QAChDwF,EAAO,WACPmxE,EAAU,gBACVC,EAAkB,EAAC,YACnB1G,EAAW,aACX2G,EAAY,WACZP,EAAU,WACVC,EAAU,cACVR,EAAa,cACbG,EAAa,aACbF,EAAY,UACZjG,EAAS,eACTC,EAAc,iBACdC,EAAgB,mBAChBuG,EAAkB,cAClBM,EAAa,MACb5wD,EAAK,qBACL6wD,EAAoB,sBACpBN,EAAqB,8BACrBO,EAA6B,8BAC7BC,EAA6B,8BAC7BC,EAA6B,2BAC7BC,GACDn3E,EACC,MAAM,iBAAEu4C,EAAgB,gBAAE6+B,IAAoBt+D,EAAAA,EAAAA,MAExC7T,GAAO25C,EAAAA,GAAAA,KAGPsD,GAAMvB,EAAAA,EAAAA,IAAuB,OAEnC02B,EAAAA,GAAAA,IAAen1B,EAAK80B,IACpBnT,EAAAA,GAAAA,GAAiBr+D,EAAQnF,OAAQmF,EAAQ4b,iBAAkB80D,GAC3DrG,GAAgB3tB,EAAK18C,EAAQhE,GAAIgE,EAAQnF,OAAQ0vE,EAAWC,EAAgBC,EAAkBC,IAE9F9zB,EAAAA,EAAAA,KAAU,KACR,GAAK52C,EAAQgf,SAEb,MAAO,KACL2yD,IAA6B,CAAEG,0BAA2B,CAAC9xE,EAAQhE,IAAK+1E,WAAW,GAAO,CAC3F,GACA,CAACJ,EAA4B3xE,EAAQgf,SAAUhf,EAAQhE,KAE1D,MAAMg2E,EAAwBZ,GAAmB,GAC1CxqB,EAASqrB,IAAa12B,EAAAA,GAAAA,GAAQy2B,GAC/BjuC,EAAShiC,QAAQ/B,EAAQ4H,QAAQ6H,QAAQpR,KAAK+mD,WAAW,eACzD8sB,EAAqD,wBAAjClyE,EAAQ4H,QAAQ6H,QAAQvT,MAAkC8D,EAAQ4H,QAAQ6H,OAAQ0kB,OAE5GyiB,EAAAA,EAAAA,KAAU,KACJo7B,GAIJpuE,WAAWquE,EAvDU,GAuDCb,EAAmC,GACxD,CAACA,EAAiBa,EAAWD,IAEhC,MAAMzgB,GAAY4gB,EAAAA,GAAAA,IAAkBz1B,EAAKg1B,GAEnCU,GAAwBj3B,EAAAA,EAAAA,IAAO,MACnC,MAAM1yC,EAAW8oE,GAAsBtmD,SAAWjrB,EAAQhE,IAAMu1E,EAAqBtmD,QACrF,OAAO8Y,IAAW/jC,EAAQ8H,YAAcW,CACzC,EAHoC,KAKrCmuC,EAAAA,EAAAA,KAAU,KACJ2a,GAAa6gB,EAAsBnnD,UACrCmnD,EAAsBnnD,SAAU,EAChC2mD,IACF,GACC,CAACrgB,EAAWqgB,IAEf,MAAM,qBAAEpsB,IAAyBC,EAAAA,GAAAA,GAAkBmB,OAAS3rD,EAAW+2E,GAAuB,GAGxFK,GAAYxuE,EAAAA,EAAAA,MAAY+T,MAAMQ,KAC9Bk6D,GAAcn4B,EAAAA,EAAAA,KAAQ,IACnBo2B,EACHA,EAAcxwE,KAAKsK,GAAWgoE,IAAYhoE,KAAS9L,OAAOwD,cAC1D9G,GACH,CAACs1E,EAAe8B,IAEbrlB,GAAgBrW,EAAAA,GAAAA,IAAgB,KAC7B47B,EAAAA,GAAAA,GACL9yE,EACAO,EACA8wE,EACAC,EACAuB,EACA5B,EACAF,EACA9vD,EACA,CAAEywD,cACFM,EACAC,MAIE,kBACJna,EAAiB,oBAAEib,EAAmB,wBACtChb,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlb,GACrBkvB,OAA6C3wE,IAAxBu3E,EAkB3B,GADyBlB,GAAkD,0BAAjCtxE,EAAQ4H,QAAQ6H,QAAQpR,KAEhE,OAAOo5C,EAAAA,GAAAA,cAAA,QAAMiF,IAAKA,IAGpB,GAAIy0B,EACF,OAAO15B,EAAAA,GAAAA,cAAA,QAAMiF,IAAKA,EAAK3xB,UAAU,2BAA2BiiC,KAqB9D,MAAMjiC,GAAYuvB,EAAAA,GAAAA,GAChB,kCACAiwB,IAAcE,GAAoB,WACjC1mC,GAAUmuC,IAAsB,kBACjCtG,GAAsB,gBACtByF,GAAgB,gBACfttC,IAAWmuC,GAAqB,aACjC1sB,GAGF,OACE/N,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACL1gD,IAAIy2E,EAAAA,EAAAA,IAAiBzyE,EAAQhE,IAC7B+uB,UAAWA,EACX,kBAAiB/qB,EAAQhE,GACzB,iBAAgBgE,EAAQgf,eAAY/jB,EACpC+1D,YA3DqB3kD,KACvBihE,EAAAA,GAAAA,GAAwBjhE,GACxBmrD,EAAwBnrD,EAAE,EA0DxBosD,cAAehB,IAEbya,GAAqBz6B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,0BAA0BiiC,KAChEjpB,GArCD0T,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,sBAAsBs8B,SAAU,EAAG2oB,KAAK,SAAS72B,QArBtCu5B,KAC7B3/B,EAAiB,CACfhP,QAAQ,EACRD,WAAYgtC,GAAY90E,GACxBioC,SAAUssC,IAAgB,GAC1BvsC,aAAchkC,EAAQ4H,QAAQ6H,QAAQ40B,QAAU,GAChD,GAgBEoT,EAAAA,GAAAA,cAACk7B,GAAAA,EAAuB,CACtB1+B,IAAKj0C,EAAQhE,GACbsQ,QAAS0kE,EACT4B,KAAM3B,EACN4B,QAAM,EACNC,gBAAc,IAEhBr7B,EAAAA,GAAAA,cAAA,cAASh4C,EAAK,2BACdg4C,EAAAA,GAAAA,cAAA,YAAOh4C,EAAK,4BAA6BA,EAAK,SAAUO,EAAQ4H,QAAQ6H,QAAQ40B,OAAQ,OAExFoT,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,yBAAyBtrB,EAAK,2BA2B/CyyE,GACCz6B,EAAAA,GAAAA,cAACs7B,GAA4B,CAC3B/yE,QAASA,EACTgtD,cAAeA,IAGlBwlB,GACC/6B,EAAAA,GAAAA,cAACq3B,GAAoB,CACnBpyE,OAAQ66D,EACRyb,OAAQR,EACRxyE,QAASA,EACTR,gBAAgB,SAChBy9C,QAASya,EACTzN,oBAAqB0N,IAGrB,KC/GV,GAjGsCn9D,IAYhC,IAZiC,UACrCuwB,EAAS,QACT/qB,EAAO,OACPS,EAAM,MACNyK,EAAK,WACL+nE,EAAU,YACVtH,EAAW,aACXuH,EAAY,eACZC,EAAc,8BACd1B,EAA6B,8BAC7BC,EAA6B,QAC7Bv4B,GACD3+C,EAEC,MAAMkiD,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7Bi4B,GAAiBjB,EAAAA,GAAAA,IAAkBz1B,EAAK+0B,GAExC/hB,GAAezV,EAAAA,GAAAA,GAASj6C,IAAW2vD,EAAAA,EAAAA,IAAoB3vD,EAAS,cAAeozE,GAC/E5jB,GAAiBC,EAAAA,GAAAA,GAAazvD,GAC9BqzE,EAAetxE,QAAQ/B,IAAWszE,EAAAA,EAAAA,IAAqBtzE,IACvD4vD,EAAY7tD,QAAQ/B,IAAW6vD,EAAAA,EAAAA,IAAoB7vD,IAEnDP,GAAO25C,EAAAA,GAAAA,KAEPm6B,EAAc9yE,GAASG,EAAAA,EAAAA,IAAenB,EAAMgB,GAAUT,GAASmjE,aAAaE,gBAE5E,YAAE3S,EAAW,gBAAEC,IAAoBC,EAAAA,GAAAA,GAAazX,GAEtD,OACE1B,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACL3xB,WAAWuvB,EAAAA,GAAAA,GACT,kBACAvvB,EACAtqB,IAAWyyE,GAAiB,UAAQM,EAAAA,EAAAA,IAAgB/yE,MAEtD04C,QAASn5C,GAAW0wD,EACpBM,YAAahxD,GAAW2wD,GAEvBnB,GA6BP,SACE0B,EACA/iB,EACAklC,EACA1H,EACA/b,GAEA,MAAM,MAAE//C,EAAK,OAAEC,IAAWshD,EAAAA,GAAAA,MAEpBC,EAASljB,GAAW+iB,EAE1B,OACEzZ,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,iBAAkB+4B,GAAgB,WAC7DzjB,GACAnY,EAAAA,GAAAA,cAAA,OACEmD,IAAKyW,EACLxhD,MAAOA,EACPC,OAAQA,EACR+qC,IAAI,GACJ9vB,UAAU,YACV0oD,WAAW,IAGfh8B,EAAAA,GAAAA,cAAC6Z,GAAAA,EAAY,CAACJ,aAAcG,EAAQE,UAAWxvD,QAAQ6tD,GAAY//C,MAAOA,EAAOC,OAAQA,IACxF67D,GAAel0B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAGtC,CAxDyBymC,CAAgBhC,EAAgBE,EAAc2jB,EAAc1H,EAAa/b,GAC5FnY,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBACb0sB,EAAAA,GAAAA,cAAA,KAAG4B,IAAI,QACHr5C,GAEE+uC,EAAAA,EAAAA,IAAgB/uC,GAClBy3C,EAAAA,GAAAA,cAACi8B,GAAa,CACZ1zE,QAASA,EACTmxE,YAAU,EACVM,8BAA+BA,EAC/BC,8BAA+BA,IAGjCj6B,EAAAA,GAAAA,cAACka,GAAAA,EAAc,CACblyD,KAAMA,EACNO,QAASA,EACT4xD,QAAS7vD,QAAQytD,GACjBiiB,8BAA+BA,EAC/BC,8BAA+BA,IAdjCuB,GA7CC,KA+DLx7B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBAAgBsuB,IAAI,SAAQqY,EAAAA,GAAAA,GAAW6hB,GAAeroE,GA/DhE,OAiENioE,GAAkB17B,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,iCAC5B,E,uCC3EV,MAgHA,IAAeqsB,EAAAA,EAAAA,KAhHmB58C,IAa5B,IAb6B,QACjCwF,EAAO,eACP2zE,EAAc,UACdC,EAAS,mBACTC,EAAkB,kBAClB5sD,EAAiB,0BACjB6sD,EAAyB,UACzBC,EAAS,aACTC,EAAY,SACZh1D,EAAQ,QACRm6B,EAAO,mBACP86B,EAAkB,aAClBC,GACD15E,EACC,MAAM,iBAAEmM,IAAqB2M,EAAAA,EAAAA,MACvB7T,GAAO25C,EAAAA,GAAAA,MACN+6B,EAAaC,IAAiB74B,EAAAA,GAAAA,KAErC,SAAS84B,EAAoBhoE,GAC3BA,EAAE4yC,kBAEFt4C,EAAiB,CACf3G,QAASP,EAAK,iBAElB,CAOA,MAAMyL,GAAQivC,EAAAA,EAAAA,KAAQ,KACpB,IAAKg6B,EAAa,OAClB,MAAMG,GAAiBC,EAAAA,GAAAA,IAAsC,IAAfv0E,EAAQ0H,KAAajI,EAAK4gC,UAAMplC,EAAWwE,EAAK+0E,YACxFC,EAAez0E,EAAQ00E,WACxBH,EAAAA,GAAAA,IAA2C,IAApBv0E,EAAQ20E,SAAkBl1E,EAAK4gC,UAAMplC,EAAWwE,EAAK+0E,YAC3EI,EAAoB50E,EAAQmjE,cAC7BoR,EAAAA,GAAAA,IAAkD,IAA3Bv0E,EAAQmjE,YAAYz7D,KAAajI,EAAK4gC,UAAMplC,EAAWwE,EAAK+0E,YAExF,IAAIn2E,EAAOi2E,EAUX,OATIG,IACFp2E,GAAQ,KACRA,GAAQoB,EAAK,mBAAmBsL,QAAQ,SAAU0pE,IAEhDG,IACFv2E,GAAQ,KACRA,GAAQoB,EAAK,sBAAsBsL,QAAQ,SAAU6pE,IAGhDv2E,CAAI,GAGV,CAAC81E,EAAa10E,EAAMO,EAASP,EAAK+0E,aAE/BK,GAAgBv6B,EAAAA,GAAAA,GACpB,cACAu5B,GAAsB,mBACtB7zE,EAAQmjE,aAAa2R,YAAc,eAGrC,OACEr9B,EAAAA,GAAAA,cAAA,QACE1sB,UAAW8pD,EACXx7B,IAAK55C,EAAK65C,MAAQ,MAAQ,MAC1BH,QAASA,EACT,2BAEC66B,GACCv8B,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,wCAAwCouB,QAAS86B,IAE/DlyE,QAAQ/B,EAAQ8mB,QACf2wB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,kBACb+sB,EAAAA,GAAAA,IAAqB93C,EAAQ8mB,QAEhC2wB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,6BAGfgpD,GAAahyE,QAAQklB,GAAmBC,gBACxCuwB,EAAAA,GAAAA,cAAA,QAAM0B,QArDZ,SAA0B9sC,GACxBA,EAAE4yC,kBACFi1B,GACF,EAkDuCnpD,UAAU,2BACzC0sB,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,mBACd0sB,EAAAA,GAAAA,cAACga,GAAAA,EAAe,CAACpzD,MAAMy5C,EAAAA,GAAAA,IAAqB7wB,EAAmBC,kBAEjEuwB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,4BAGhB/L,GACCy4B,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,4CAEd6oD,GACCn8B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,sBAAqB2mC,EAAAA,GAAAA,GAAWkiB,IAElDn8B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,eAAe7f,MAAOA,EAAOm+C,aAAc+qB,GACxDp0E,EAAQmjE,aAAa2R,YACpBr9B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,mBAAmBouB,QAASk7B,IACzCE,EAAAA,GAAAA,IAAkD,IAA3Bv0E,EAAQmjE,YAAYz7D,KAAajI,EAAK4gC,MAAM,IAEtEoX,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,mBAAmBouB,QAASk7B,GAAsB50E,EAAK,qBAG1EO,EAAQ00E,UAAa,GAAEj1E,EAAK,qBAC5Bs1E,EAAAA,GAAAA,IAAWt1E,EAAqB,IAAfO,EAAQ0H,OAE3BisE,GACCl8B,EAAAA,GAAAA,cAACu9B,GAAAA,EAAqB,CAAClhE,OAAQ6/D,IAEhCG,GAA6BA,IACzB,I,4BCtHX,MAkIA,GApH8Bt5E,IAGxB,IAHyB,QAC7BwF,EAAO,oBAAEi1E,EAAmB,8BAAEvD,EAA6B,WAAEwD,EAAU,aAAEphD,EAAY,iBACrFqhD,EAAgB,WAAEC,EAAU,aAAEC,EAAY,aAAEC,GAC7C96E,EACC,MAAM,iBAAEmM,EAAgB,eAAE4uE,IAAmBjiE,EAAAA,EAAAA,MAEvC7T,GAAO25C,EAAAA,GAAAA,MACP,SAAE0C,IAAaC,EAAAA,EAAAA,MAGfW,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B7uC,EAAUtM,EAAQ4H,QAAQ0E,SAC1B,eAAEob,EAAc,QAAE0uB,EAAO,UAAEo/B,GAAclpE,EAEzCmpE,EAAYnpE,EAAQ+hC,yBAAsBpzC,GAC9C00D,EAAAA,EAAAA,IAAoB3vD,EAASo2C,IAAYs/B,EAAAA,GAAoB,YAAc,UAGvEC,GAAUxD,EAAAA,GAAAA,IAAkBz1B,EAAKu4B,GACjCW,GAAUzD,EAAAA,GAAAA,IAAkBz1B,EAAKg1B,GACjCmE,EAAmB,UAASvpE,EAAQtQ,YACpC85E,GAAgB77B,EAAAA,GAAAA,GACpB47B,GACCF,IAAYH,EACb9uC,EAAAA,GAAAA,QACA5S,IAEKiiD,EAAiBC,EAAoBC,IAAqB16B,EAAAA,GAAAA,KAE3D26B,GAAoBv/B,EAAAA,GAAAA,IAAgB,KACxCs/B,IACAX,KAAgB,IAGZa,GAA2B5V,EAAAA,GAAAA,GAAY4U,IAE7Cv+B,EAAAA,EAAAA,KAAU,KACJ4+B,GAAaJ,GAAcQ,IAAYT,GAAoBgB,KAC7DH,IACAX,MACF,GACC,CAACG,EAAWI,EAASP,EAAcF,EAAkBgB,EAA0BH,EAAoBZ,IAEtG,MAAMgB,GAAYz/B,EAAAA,GAAAA,IAAgB,KAChC4+B,EAAe,CACb7tD,eAAgBpb,EAAQob,gBACxB,IAGEgpC,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClC,GAAI6+B,EAAW,CACb,GAAIO,IAAoBX,EAWtB,YAVAzuE,EAAiB,CACf3G,QAASP,EAAK,yBACdgQ,OAAQ,CACNA,OAAQ,iBACRpU,QAAS,CACPqsB,eAAgBpb,EAAQob,iBAG5B8nD,WAAY/vE,EAAK,gBAGd,GAAI21E,EAGT,OAFAY,SACAX,KAGJ,CACAe,GAAW,IAGPC,EAAkB,cAAe3uD,GACjC,MAAE7X,EAAK,OAAEC,IAAWwmE,EAAAA,GAAAA,IAAqBhqE,EAASwvC,GAClD/wB,GAAYuvB,EAAAA,GAAAA,GAChB,sBACA+7B,GAAmB,WACnBb,IAAcx1E,EAAQ8H,YAAc,YAGtC,OACE2vC,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACL3xB,UAAWA,EACXyvB,MAAQ,UAAS3qC,gBAAoBC,OACrCqpC,QAAUk9B,OAAgCp7E,EAAdy1D,GAE5BjZ,EAAAA,GAAAA,cAAC8+B,GAAAA,EAAW,CACV/oB,aAAc9Q,EACdpwC,QAASA,EACTkqE,cAAef,EACfgB,mBAAmB,aACnB78B,KAAM/pC,EACNqlE,WAAYA,EACZwB,QAASf,EACTgB,QAASf,EACTj7B,qBAAmB,EACnBi8B,YAAa9iD,IAEd0hD,GAAaJ,GAAcO,GAAWI,GACrCt+B,EAAAA,GAAAA,cAACo/B,GAAAA,EAAe,CACd5iC,IAAK4hC,EACL9qD,UAAU,iBACV+rD,OAAQhB,EACRl8B,KAvHqB,KAuHf/pC,EACN+iE,MAAI,EACJmE,eAAa,EACblE,QAAM,EACNmE,QAASd,IAGT,E,4BC7IV,MAAMe,GAAO,EAAIpyC,GAAAA,GAKF,SAASqyC,GACtBr8E,EACA4G,EACA01E,EACA7vC,EACA68B,EACAtjE,EACAu2E,GAEA,MAAM,0BACJC,EAAyB,qBAAEC,EAAoB,6BAAEC,IAC/CjkE,EAAAA,EAAAA,MAGEopC,GAAMvB,EAAAA,EAAAA,IAAuB,MAG7Bq8B,GAAWr8B,EAAAA,EAAAA,IAAqC,MAEhDs8B,GAAiBx9B,EAAAA,GAAAA,GAASk9B,EAAW,WAAUA,SAAYl8E,GAAYk8E,GAEvEv9B,EAAOw9B,GAAiBH,GACxBz8B,GAAQk9B,EAAAA,GAAAA,GAAY,UAAS99B,MAAW,WAAUA,MAAU/4C,GAAS,mBAErE0mC,GAAe4T,EAAAA,EAAAA,SAA6BlgD,GAC5C08E,GAAsBx8B,EAAAA,EAAAA,SAA2BlgD,GACjD28E,GAAuBjhC,EAAAA,GAAAA,IAAgB,KACzB+F,EAAIzxB,UAItBqsD,EAAqB,CACnBz8E,OAAQA,EACR4G,UAAWA,EACXZ,MAAOA,EACP0mC,aAAcA,EAAatc,UAE7B0sD,EAAoB1sD,aAAUhwB,EAC9BssC,EAAatc,aAAUhwB,EAAS,IAG5B23E,GAAOj8B,EAAAA,GAAAA,IAAgB,KAC3B,MAAMse,EAAQuiB,EAASvsD,QACnBwsD,IACExiB,IACFA,EAAM7rC,QACN6rC,EAAM2L,UAER4W,EAASvsD,QAAU,IAAI4sD,MACvBL,EAASvsD,QAAQ2vB,IAAM68B,GACvBK,EAAAA,GAAAA,GAASN,EAASvsD,SAClBusD,EAASvsD,QAAQwtB,iBAAiB,SAAS,KACzC++B,EAASvsD,aAAUhwB,CAAS,GAC3B,CAAE88E,MAAM,IACb,IAGIrnB,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClCi8B,IAEA,MAAMoF,EAAYt7B,EAAIzxB,QAEtB,KAAKpqB,GAAUm3E,GAAcv2E,GAAc5G,GACzC,OAGF,MAAM,EAAEsqC,EAAC,EAAE6B,GAAMgxC,EAAUhL,wBAE3BqK,EAA0B,CACxBx2E,MAAOA,EACPskC,IACA6B,IACAC,UAAW2S,EACX1S,YAAai9B,IAGV58B,EAAatc,UAChBsc,EAAatc,QAAU,GACvB0sD,EAAoB1sD,QAAUgtD,YAAYhxE,MAC1CrD,WAAWg0E,EAnFc,MAsF3BrwC,EAAatc,QAAQtqB,KAAKg3E,EAAoB1sD,SACzCgtD,YAAYhxE,MAAQ0wE,EAAoB1sD,SAtF9B,IACE,EAsFA,IAiCnB,OA7BA2rB,EAAAA,EAAAA,KAAU,KACR,MAAMohC,EAAYt7B,EAAIzxB,QAEjB+sD,GAAc1wC,GAEnBA,EAAwBphC,SAAQ1L,IAI1B,IAJ2B,GAC/BwB,EAAE,UACFirC,EACAxlC,UAAWy2E,GACZ19E,EACC,GAAIysC,GAAaxlC,IAAcy2E,EAC7B,OAGF,MAAM,EAAE/yC,EAAC,EAAE6B,GAAMgxC,EAAUhL,wBAE3BuK,EAA6B,CAC3Bv7E,KACAnB,OAAQA,EACR2sC,SAAU3mC,EACVomC,UAAW2S,EACXzU,IACA6B,IACAE,YAAai9B,IAEfyO,GAAM,GACN,GACD,CAACtrC,EAAyBzsC,EAAQgG,EAAOsjE,EAAO1iE,EAAWmxE,EAAM2E,EAA8B39B,IAE3F,CACL8C,MACA9C,OACAY,QACAkW,cAEJ,CCpGA,MAwCA,IAAetZ,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAqB,CAAC3gD,EAAMgO,KAA6B,IAA3B,MAAEvH,EAAK,YAAEs3E,GAAa/vE,EACtE,MAAO,CACLkE,SAAS8rE,EAAAA,EAAAA,IAAoBh+E,EAAQyG,GACrCw3E,OAAQF,GAAcG,EAAAA,EAAAA,IAA0Bl+E,EAAQyG,QAAS5F,EACjEk8E,SAASoB,EAAAA,EAAAA,IAAyBn+E,EAAQyG,GAC3C,GALiBk6C,EAtC6BvgD,IAW3C,IAX4C,MAChD2pE,EAAK,oBACL8Q,EAAmB,aACnBnhD,EAAY,iBACZ0kD,EAAgB,UAChB/2E,EAAS,OACT5G,EAAM,wBACNysC,EAAuB,QACvBh7B,EAAO,OACP+rE,EAAM,QACNlB,GACD38E,EACC,MAAM,IACJkiD,EAAG,KACH9C,EAAI,MACJY,EAAK,YACLkW,GACEwmB,GAAiBr8E,EAAQ4G,EAAW01E,EAAS7vC,EAAyB68B,EAAOkU,GAAQx3E,OACnFuyE,GAAiBjB,EAAAA,GAAAA,IAAkBz1B,EAAKu4B,GAE9C,OACEx9B,EAAAA,GAAAA,cAACk7B,GAAAA,EAAuB,CACtBrmE,QAASA,EACTstC,KAAMA,EACN6+B,QA1BU,EA2BV/B,QAAStD,EACTsF,aAAcF,EACd1kD,aAAcA,EACd8+C,KAAMQ,EACNluE,uBAAqB,EACrBw3C,IAAKA,EACL3xB,WAAWuvB,EAAAA,GAAAA,GAAe,4BAA6BhuC,GAAStQ,KAAO28E,GAAAA,IAAmB,sBAC1Fn+B,MAAOA,EACPrB,QAASuX,GACT,KCGN,IAAetZ,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAAqB,CAAC3gD,EAAMgO,KAAqC,IAAnC,cAAEwwE,EAAa,YAAET,GAAa/vE,EAC9E,MAAMkE,EAAUlS,EAAO8S,aAAakL,KAAKwgE,GAEzC,MAAO,CACLtsE,UACA+rE,OAAQ/rE,GAASzL,OAASs3E,GAAcG,EAAAA,EAAAA,IAA0Bl+E,EAAQkS,EAAQzL,YAAS5F,EAC3Fk8E,QAAS7qE,GAASzL,QAAS03E,EAAAA,EAAAA,IAAyBn+E,EAAQkS,EAAQzL,OACpE81E,SAASzF,EAAAA,EAAAA,IAA4B92E,GACtC,GARiB2gD,EAtCmCvgD,IAWjD,IAXkD,MACtD2pE,EAAK,cACLyU,EAAa,UACbn3E,EAAS,OACT5G,EAAM,wBACNysC,EAAuB,QACvBh7B,EAAO,OACP+rE,EAAM,QACNlB,EAAO,OACPR,EAAM,oBACN1B,GACDz6E,EACC,MAAM,IACJkiD,EAAG,KACH9C,EAAI,MACJY,EAAK,YACLkW,GACEwmB,GACFr8E,EAAQ4G,EAAW01E,EAAS7vC,EAAyB68B,EAAOkU,GAAQx3E,OAAOg4E,EAAAA,GAAAA,IAAmB,IAGhG,OACEphC,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACViC,IAAKA,EACL9vC,WAAYgsE,EACZ7tD,WAAWuvB,EAAAA,GAAAA,GAAe,4BAA6BhuC,GAAStQ,KAAO28E,GAAAA,IAAmB,sBAC1Fn+B,MAAOA,EACPZ,KAAMA,EACNk/B,OAAK,EACLnC,OAAQA,EACRh8B,qBAAmB,EACnBz1C,uBAAqB,EACrBusE,8BAA+BwD,EAC/B97B,QAASuX,GACT,KCzEAqoB,GAA2B,CAC/BC,KAAM,CACJC,SAAU,mBACVC,SAAU,iBAEZC,MAAO,CACLF,SAAU,mBACVC,SAAU,qBAIC,SAASE,GACtBx+B,EAAaupB,EAAgBkV,EAAwBhgB,EAAsBj9B,GAE3E,OAAIi9B,EACK5wC,QAAQ+pC,QAAQumB,GAAyB38C,GAAS,SAAS+nC,EAAQ,WAAa,aAK3FzvD,eAAyCkmC,EAAaupB,GACpD,MAAM7R,EAAM,IAAIC,MAChBD,EAAI1X,IAAMA,EACV0X,EAAIgnB,YAAc,YAEbhnB,EAAIziD,aACD,IAAI4Y,SAAS+pC,IACjBF,EAAIG,OAASD,CAAO,IAIxB,MAAMkB,EAAS/oD,SAASgpD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MAE9BH,EAAO7jD,MAAQyiD,EAAIziD,MACnB6jD,EAAO5jD,OAASwiD,EAAIxiD,OAEpBkkD,EAAIE,UAAU5B,EAAK,EAAG,EAAGA,EAAIziD,MAAOyiD,EAAIxiD,QAExC,MAAMq1B,EAAIg/B,EAAQ7R,EAAIziD,MAAQ,EAAI,EAC5Bm3B,EAAIsrB,EAAIxiD,OAAS,EAGvB,MAAQ,QADMrV,MAAMof,KAAKm6C,EAAIulB,aAAap0C,EAAG6B,EAAG,EAAG,GAAG34B,MACjCpN,KAAK,OAC5B,CA3BSu4E,CAA0B5+B,EAAKupB,EACxC,C,4BCbe,SAASsV,GACtBz5E,EACAk4C,EACAwhC,GAEA,MAAM,SAAE59B,IAAaC,EAAAA,EAAAA,MAEf49B,EAAUD,IAAaE,EAAAA,EAAAA,IAA4B55E,GAEzD,OAAO65E,EAAAA,GAAAA,GACLF,EACA53E,QAAQm2C,GACR4D,IAAag+B,EAAAA,GAEjB,C,4BCsCA,MAuKA,GAvK4Bt/E,IAoBtB,IApBuB,GAC3BwB,EAAE,QACFgE,EAAO,oBACPi1E,EAAmB,UACnB/Q,EAAS,YACT6V,EAAW,eACXtO,EAAc,WACdpS,EAAU,eACV2gB,EAAc,YACdC,EAAW,KACXrgC,EAAO,SAAQ,WACf6rB,EAAU,YACVxB,EAAW,eACX6O,EAAc,qBACdoH,EAAoB,cACpBC,EAAa,YACbxO,EAAW,MACXvvC,EAAK,QACL+c,EAAO,eACPihC,GACD5/E,EAEC,MAAMkiD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BhnB,GAASkwC,EAAAA,EAAAA,IAAgBrkE,KAAYskE,EAAAA,EAAAA,IAAuBtkE,GAC5Dq6E,EAAelmD,EAAMga,QAErBilC,GAAiBjB,EAAAA,GAAAA,IAAkBz1B,EAAKu4B,IAExC,SAAEn5B,IAAaC,EAAAA,EAAAA,OACdu+B,EAAeC,IAAoBliC,EAAAA,EAAAA,IAAS0hC,GAC7CS,EAAaF,GAAiBlH,GAC9B,UACJ7d,EAAS,aAAEklB,IACTC,EAAAA,GAAAA,IAAyB/qB,EAAAA,EAAAA,IAAoB3vD,EAAS45C,IAAQ4gC,GAC5DG,EAAgBN,GAAgB9kB,EAEhCqlB,EAAwB74E,QAAQk4E,IAC/BY,IAAaxiC,EAAAA,EAAAA,KAAUsiC,GACxBG,EAAU/4E,QAAQ44E,GAClBI,EAAWtB,GAAwBz5E,EAAS86E,GAC5CE,EAAuBvB,GAAwBz5E,GAAU46E,GACzDK,GAAkBC,EAAAA,GAAAA,IAAoBJ,GACtC5pB,GAAe0oB,EAAAA,EAAAA,IAA4B55E,IAE1Cm7E,EAAe,CAAGC,IAAe7/B,EAAAA,GAAAA,GAAQpnB,EAAMy7B,YAGpD6qB,aAAcY,IACZX,EAAAA,GAAAA,IACF/qB,EAAAA,EAAAA,IAAoB3vD,EAAS,aAAcm6E,GAAemB,EAAAA,EAAAA,IAAsBt7E,EAAS,cAGrF,YACJu7E,EAAW,eAAEC,EAAc,iBAAEC,IAC3BC,EAAAA,EAAAA,IACF17E,EACAg6E,IAAmBG,EAAgBkB,EAAmBZ,GACtDD,IAAeG,GAEXgB,GAAiD,KAA/Bpb,EAAAA,GAAAA,GAAY+Z,IAGlCh1B,aAAcs2B,EACdp2B,qBAAsBq2B,IACpBp2B,EAAAA,GAAAA,GAAkB+1B,OAAgBvgF,EAAW0gF,EAAiB,SAEhEr2B,aAAcw2B,EACdt2B,qBAAsBu2B,IACpBt2B,EAAAA,GAAAA,IAAmBk1B,IAAkBL,GAEnC5pB,IAAc/Z,EAAAA,GAAAA,IAAgB,KAC9B4kC,EACFnB,IAAiBp6E,GAId26E,EAKDQ,EACFC,IAIFjiC,IAAUn5C,EAAQhE,IAThBu+E,GAAkByB,IAAeA,GASd,IAGjB7X,IAAQC,EAAAA,EAAAA,IAAapkE,IAC3Bi8E,EAAAA,GAAAA,IAA4B7zE,IAAgC,IAA9B8zE,GAAyB9zE,EACrD,IAAK8xE,EAIH,YAHIgC,GACFx/B,EAAIzxB,QAAS6/C,QAAwBqR,EAAAA,KAA2BjO,gBAAgBkO,EAAAA,MAKpF,MAAMC,EAAY3/B,EAAIzxB,QAAS6/C,QAAwBqR,EAAAA,KACnDxB,EACFvB,GAAoBuB,EAAexW,GAAOsH,EAAgBpS,EAAYj9B,GAAOhrB,MAAMkrE,KACjF3b,EAAAA,EAAAA,KAAgB,KACd0b,EAAU7hC,MAAM+hC,YAAY,gBAAiBD,GAC7CD,EAAUhO,aAAa+N,EAAAA,IAA2B,GAAG,GACrD,IAGJC,EAAU3b,UAAU95C,IAAI,qBAC1B,GACC,CAACszD,EAAsBS,EAAexW,GAAOsH,EAAgBpS,EAAYj9B,IAE5E,MAAM,MAAEvsB,GAAK,OAAEC,GAAM,QAAEm1D,IAAYQ,GAAczB,GAAyBhkE,EAASikE,EAAaC,EAAWpoB,GAErG/wB,IAAYuvB,EAAAA,GAAAA,GAChB,eACCihC,IAAgBzI,GAAkB,cACnC7N,IAAW,cACXp1D,KAAUC,IAAU,eACpBA,GAAS8zD,IAAoB,kBAGzB4Y,GAAkB/W,EAAc,WAAU51D,eAAkB41D,EAAWtgC,aAAasgC,EAAWz+B,OAAS,GACxGwT,GAAiB,WAATZ,EAAqB,WAAU9pC,QAAY0sE,UAAoBvhF,EAE7E,OACEw8C,EAAAA,GAAAA,cAAA,OACEz7C,GAAIA,EACJ0gD,IAAKA,EACL3xB,UAAWA,GACXyvB,MAAOA,GACPrB,QAASoiC,OAActgF,EAAYy1D,IAElCkqB,GAAyBnjC,EAAAA,GAAAA,cAAA,UAAQiF,IAAKs+B,EAAsBjwD,UAAU,yBACvE0sB,EAAAA,GAAAA,cAAA,OACEmD,IAAK+/B,EACL5vD,WAAWuvB,EAAAA,GAAAA,GAAe,aAAcsgC,GAAyB,mBACjE//B,IAAI,GACJL,MAAOy/B,EAAe,UAASA,WAAkBh/E,EACjDw4E,WAAY9H,IAEbkP,GACCpjC,EAAAA,GAAAA,cAAA,UAAQiF,IAAKq+B,EAAUhwD,WAAWuvB,EAAAA,GAAAA,GAAe,YAAa2gC,KAE/DtP,GAAel0B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAC/B6wD,IAAwBE,GACvBrkC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAY,iBAAgB8wD,KAC/BpkC,EAAAA,GAAAA,cAACglC,GAAAA,EAAe,CAACpiE,SAAUohE,EAAkBtiC,QAASoiC,EAAc7qB,QAAcz1D,KAGrF6gF,GACIrkC,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,OAAQ,gBAAiByhC,KAC3DtkC,EAAAA,GAAAA,cAAC6Z,GAAAA,EAAY,CACXC,UAAW4pB,EACXuB,eAAa,EACbxrB,aAAcA,EACdrhD,MAAOA,GACPC,OAAQA,GACRib,UAAU,kBAEXywD,GACC/jC,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,6BAA6B7iB,KAAKwK,MAAyB,IAAnB+oE,GAAwB,KAE9E,E,gBCrKV,MAgNA,GAhN4BjhF,IAiBtB,IAjBuB,GAC3BwB,EAAE,QACFgE,EAAO,8BACPyxE,EAA6B,8BAC7BC,EAA6B,UAC7BxN,EAAS,YACT6V,EAAW,YACX4C,EAAW,eACX3C,EAAc,YACdC,EAAW,aACXnmD,EAAY,WACZ2xC,EAAU,YACVxB,EAAW,cACXkW,EAAa,YACbxO,EAAW,QACXxyB,EAAO,eACPihC,GACD5/E,EAEC,MAAMkiD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7ByhC,GAAWzhC,EAAAA,EAAAA,IAAyB,MAEpClN,GAASs2B,EAAAA,EAAAA,IAAgBvkE,KAAY0kE,EAAAA,EAAAA,IAAuB1kE,GAC5Dq6E,EAAepsC,EAAME,SAEpBgtC,EAAe,CAAGC,IAAe7/B,EAAAA,GAAAA,GAAQtN,EAAM2hB,WAEhDitB,GAA2B1K,EAAAA,GAAAA,IAAkBz1B,EAAK+0B,GAClDqL,GACJ3K,EAAAA,GAAAA,IAAkBz1B,EAAKg1B,IACpBmL,EAECE,GAAoB5hC,EAAAA,EAAAA,IAAO0hC,GAC7BC,IAA6BC,EAAkB9xD,UACjD8xD,EAAkB9xD,SAAU,GAG9B,MAAM,SAAE6wB,IAAaC,EAAAA,EAAAA,OACdu+B,EAAeC,IAAoBliC,EAAAA,EAAAA,IAAS0hC,GAC7CS,EAAaz4E,QAAQu4E,GAAiBuC,GAA4B/oD,IACjEkpD,EAAeC,IAAoB5kC,EAAAA,EAAAA,IAASt2C,QAAQ46E,IAAgBxB,IAErE3E,GAAgB7mB,EAAAA,EAAAA,IAAoB3vD,EAAS,WAC5Ck9E,IAAwB7kC,EAAAA,EAAAA,IAASt2C,QAAQy0E,GAAiB/vC,GAAAA,GAA0B+vC,MACrF,UAAEjhB,EAAS,aAAEklB,IAAiBC,EAAAA,GAAAA,GAClClE,GAAgBgE,GAAYc,EAAAA,EAAAA,IAAsBt7E,EAAS,UAAW8zB,GAElE6mD,EAAgBN,GAAgB9kB,GAC/B4nB,EAAeC,IAAmB7hC,EAAAA,GAAAA,KAEnC2V,GAAe0oB,EAAAA,EAAAA,IAA4B55E,GAC3Cq9E,EAAWt7E,QAAQmvD,GACnB0pB,EAAwB74E,QAAQk4E,GAEhCqD,GAAmB3tB,EAAAA,EAAAA,IAAoB3vD,EAAS,YAC/Cu9E,IAAsBllC,EAAAA,EAAAA,IAASt2C,QAAQu7E,GAAoB72C,GAAAA,GAA0B62C,KACtFE,EAAiBX,GAA4B/oD,EAC7Cwa,GAAiB2L,EAAAA,GAAAA,GAASqjC,GAAmBE,OAAgBviF,EAAW64B,GACxE2pD,GAAoBvC,EAAAA,GAAAA,IAAoBmC,GAAY/uC,KAAoB6uC,GAExErC,GAAWuC,GAAY/uC,GAAkB6uC,EACzCpC,EAAWtB,GAAwBz5E,EAAS86E,GAC5CE,EAAuBvB,GAAwBz5E,GAAU46E,GACzDK,IAAkBC,EAAAA,GAAAA,IAAoBJ,GAEtC4C,GAAW/C,GAAiBoC,EAAkB9xD,SAE5CwvD,aAAcY,KAAqBX,EAAAA,GAAAA,IACzC/qB,EAAAA,EAAAA,IAAoB3vD,EAAS,aAC5Bm6E,GACDmB,EAAAA,EAAAA,IAAsBt7E,EAAS,YAC/B8zB,IAGI,YAAEynD,GAAW,eAAEC,GAAc,iBAAEC,KAAqBC,EAAAA,EAAAA,IACxD17E,EACAg6E,IAAmBG,EAAgBkB,GAAmBZ,GACrDD,IAAe2C,IAAkBD,GAAyB/C,GAGvDwB,IAAiD,KAA/Bpb,EAAAA,GAAAA,GAAY+Z,IAElCh1B,aAAcs2B,GACdp2B,qBAAsBq2B,KACpBp2B,EAAAA,GAAAA,GAAkB+1B,QAAgBvgF,EAAW0gF,KAE/Cn2B,qBAAsBm4B,KACpBl4B,EAAAA,GAAAA,GAAkB1jD,SAASu4E,GAAiBK,KAAmBqC,IAAkBpB,MAE9EgC,GAAcC,KAAmBxlC,EAAAA,EAAAA,IAAiB,GACnDylC,IAAmBnnC,EAAAA,GAAAA,IAAiBtqC,IACxCwxE,GAAgB31E,KAAKC,IAAI,EAAGkE,EAAE4hE,cAAc8P,YAAc,GAAG,IAGzD3oB,GAAWwnB,EAAS3xD,SAASmqC,UAAYnnB,EAAMmnB,UAAY,EAE3D+O,IAAQC,EAAAA,EAAAA,IAAapkE,GACrBykE,GAAiB1iE,SAAQ2iE,EAAAA,EAAAA,IAAuB1kE,KAChD,MACJ6P,GAAK,OAAEC,IACL21D,IAAcb,EAAAA,GAAAA,IAAyB32B,EAAOk2B,GAAOF,EAAaQ,GAAgBP,EAAWpoB,GAE3F4U,IAAc/Z,EAAAA,GAAAA,IAAgB,KAC9B4kC,GACFnB,IAAiBp6E,GAIfm6E,GACF7mE,EAAAA,EAAAA,MAAavN,2BAA2B,CAAE/F,YAIvC26E,GAKDA,IAAkBqC,GACpBC,GAAiB,GAGf9B,EACFC,IAIFjiC,IAAUn5C,EAAQhE,KAbhBu+E,GAAkByB,IAAeA,GAad,IAGjBjxD,IAAYuvB,EAAAA,GAAAA,GAChB,oBACCihC,IAAe,cAChBzrE,GAAS8zD,IAAoB,kBAIzBppB,GAAS,WAAU1qC,QADD21D,EAAc,WAAU51D,eAAkB41D,EAAWtgC,aAAasgC,EAAWz+B,OAAS,KAG9G,OACEyQ,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACL1gD,GAAIA,EACJ+uB,UAAWA,GACXyvB,MAAOA,GACPrB,QAASoiC,QAActgF,EAAYy1D,IAElCkqB,GAAyBnjC,EAAAA,GAAAA,cAAA,UAAQiF,IAAKs+B,EAAsBjwD,UAAU,yBACtE2yD,IACCjmC,EAAAA,GAAAA,cAACumC,GAAAA,EAAc,CACbthC,IAAKkgC,EACLhiC,IAAK+/B,EACL5vD,WAAWuvB,EAAAA,GAAAA,GAAe,aAAcsgC,GAAyB,mBACjEhF,QAASoH,GAAiBF,EAC1BmB,OAAK,EACLC,MAAI,EACJC,aAAW,EACX1K,WAAY9H,EACZyS,aAAcN,GACdO,QAASjB,EACT5iC,MAAOy/B,EAAe,UAASA,WAAkBh/E,IAGrDw8C,EAAAA,GAAAA,cAAA,OACEmD,IAAKtM,EACLvjB,WAAWuvB,EAAAA,GAAAA,GAAe,YAAamjC,EAAmB7C,GAAyB,mBACnF//B,IAAI,GACJL,MAAOy/B,EAAe,UAASA,YAAmBh/E,EAClDw4E,WAAY9H,IAEb0R,IAAaE,GACZ9lC,EAAAA,GAAAA,cAAA,UACEiF,IAAKq+B,EACLhwD,WAAWuvB,EAAAA,GAAAA,GAAe,YAAa2gC,MAG1CtP,GAAel0B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAChC0sB,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,OAAQ,kBAAmBqjC,MACxDlmC,EAAAA,GAAAA,cAAC6Z,GAAAA,EAAY,CACXC,UAAW4pB,EACXuB,eAAa,EACbxrB,aAAcA,EACdrhD,MAAOA,GACPC,OAAQA,GACRib,UAAU,kBAEX6wD,IACCnkC,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,gBAAiBuhC,KAC9CpkC,EAAAA,GAAAA,cAACglC,GAAAA,EAAe,CAACpiE,SAAUohE,GAAkBtiC,QAASuX,OAGxD4pB,IAAkBK,GAClBljC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,uBAEdywD,GACC/jC,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,6BACZwwD,IAAepB,EAAkB,GAAEjyE,KAAKwK,MAAyB,IAAnB+oE,OAA6B,OAG/EhkC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,0BACZkjB,EAAMqwC,MAAQ,OAAQC,EAAAA,GAAAA,IAAoBr2E,KAAKC,IAAIitD,GAAWwoB,GAAc,KAG7E,E,eC5OV,MAqCA,IAAe7iC,EAAAA,EAAAA,KACb,CAAC3gD,EAAMgO,KAA8B,IAA5B,QAAEo2E,GAASp2E,EAClB,MAAQq2E,aAAeC,WAAYC,IAAoBvkF,EAGvD,MAAO,CACL8jB,MAHWC,EAAAA,EAAAA,IAAW/jB,EAAQokF,EAAQn0E,QAItCs0E,gBACD,GARL,EAnC2CnkF,IAErC,IAFsC,QAC1CgkF,EAAO,KAAEtgE,EAAI,cAAEygE,GAChBnkF,EACC,MAAM,SAAE4D,IAAakV,EAAAA,EAAAA,OAEf,UACJojB,EAAS,SACTD,EAAQ,YACRc,EAAW,OACXltB,GACEm0E,EACEI,EAbwB,MAaTv0E,EAEfqmD,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClCv4C,EAAS,CAAEpC,GAAIqO,GAAS,IAG1B,OACEotC,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,UAAWskC,GAAgB,eACrDzlC,QAASylC,EAAeluB,OAAcz1D,GAEtCw8C,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CACLt2B,KAAK,QACL17B,KAAMA,EACN7f,KAAMq4B,GAAaD,IAErBghB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBAAgB2L,EAAU,IAAED,GAC3CghB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kBAAiB8zD,EAAAA,GAAAA,IAA0BF,EAAepnD,KAEvE,I,oDC0CV,SAASunD,GAAcp7C,EAAeq7C,GACpC,OAAOA,EAAQ,GAAMr7C,EAAQq7C,EAAS,KAAKC,UAAY,CACzD,CAEA,SAnFiCxkF,IAO3B,IAP4B,OAChCykF,EAAM,YACNC,EAAW,YACXrtC,EAAW,eACXstC,EAAc,eACdC,EAAc,cACdC,GACD7kF,EACC,MAAM8F,EAAS4+E,GAAeA,EAAY33E,MAAM0+B,GAAMA,EAAE/kB,SAAW+9D,EAAO/9D,SACpEo+D,EAA0C,IAA1BF,EAAe7kF,SAA2D,IAA3C6kF,EAAetgF,QAAQmgF,EAAO/9D,QAC7Eq+D,EAAYH,EAAe7kF,OAAS,GAAK+kF,GAAmBh/E,GAAQoxC,SACpE8tC,EAAgBl/E,EAASw+E,GAAcx+E,EAAO6xC,YAAaN,GAAe,GAAK,GAC9E4tC,EAAcC,IAAmBrnC,EAAAA,EAAAA,IAASgnC,EAAgB,EAAIG,GAE/DG,GAAUxkC,EAAAA,EAAAA,IAAuB,MACjCykC,EAAYt/E,EAASw+E,GAAcx+E,EAAO6xC,YAAagtC,GAAkB,GAAK,EAC9EU,EAA0BJ,IAAiBD,EA0BjD,IAxBA5oC,EAAAA,EAAAA,KAAU,KACJyoC,GACFK,EAAgBF,EAClB,GACC,CAACH,EAAeG,KAEnB9wB,EAAAA,EAAAA,KAAgB,KACd,MAAMoxB,EAASH,EAAQ10D,QAEvB,GAAI60D,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAOlxB,kBAEfpU,EAAQqlC,EAA0B,GAAK,sDACxCE,EAMHA,EAAM1R,aAAa,QAAS7zB,GAL5BslC,EAAO5wB,UAAa,gFACiD1U,+EAMzE,IACC,CAACqlC,EAAyBR,KAExBH,IAAgB5+E,EACnB,OAGF,MAAM0/E,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACEpoC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,aAAasuB,IAAI,OAC9B5B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAY,sBAAsC,QAAlBy0D,EAA0B,cAAgB,KAC5EA,EAAc,IACdD,GACC9nC,EAAAA,GAAAA,cAAA,QAAM1sB,WAAWuvB,EAAAA,GAAAA,GACf,sBACCglC,GAAiB,QAClBD,GAAiB,YAGjB5nC,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,OAAQglC,EAAgB,aAAe,kBAI1E7nC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,qBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,mBAAmBsuB,IAAI,SACnCqY,EAAAA,GAAAA,GAAWutB,EAAO5gF,OAErBo5C,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,qBAAsBilC,IAAaD,GAAiB,UACjF7nC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,qBAAqB2xB,IAAKijC,IACzCloC,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,mBACVyvB,MAAOwlC,MAIT,EC8PV,SAAS/gC,GAAgB5yC,GACvBA,EAAE4yC,iBACJ,CAEA,UAAe7H,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAAe,IAAb,KAAE6Y,GAAM7Y,EACf,MAAM,eAAEwpC,GAAmB3wB,EAAKhX,SACxB2N,OAASQ,KAAMi6D,IAAgBj4E,EACvC,OAAKw3C,GAA4C,IAA1BA,EAAer3C,OAI/B,CACLq3C,iBACAygC,aALO,CAAC,CAMT,GAXet3B,EAnToBvgD,IAMlC,IANmC,QACvCwF,EAAO,KACPihB,EAAI,eACJ2wB,EAAc,UACdygC,EAAS,WACT4N,GACDzlF,EACC,MAAM,YAAEqhB,EAAW,gBAAEqkE,EAAe,gBAAEtO,IAAoBt+D,EAAAA,EAAAA,OAElDtX,GAAIyF,EAAS,OAAE5G,GAAWmF,GAC5B,QAAEmgF,EAAO,QAAEl2E,GAAYgX,GACtBm/D,EAAcC,IAAmBhoC,EAAAA,EAAAA,KAAkB,IACnDioC,EAAeC,IAAoBloC,EAAAA,EAAAA,IAAmB,KACtDmoC,EAAiBC,IAAsBpoC,EAAAA,EAAAA,KAAkB,IACzDqoC,EAAcC,IAAmBtoC,EAAAA,EAAAA,KAAkB,IACnDuoC,EAAaC,IAAkBxoC,EAAAA,EAAAA,KACnC8nC,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxD74E,KAAKq9B,IAAI46C,EAAQY,UAAY74E,KAAKI,MAAMtB,KAAKC,MAAQ,MAAQi1C,EAAAA,EAAAA,MAAuBikC,EAAQS,aAC5F,GAGAI,GAAe7lC,EAAAA,EAAAA,IAAuB,OACpClxC,QAASi1E,EAAW,YAAErtC,GAAgB5nC,EACxCg3E,EAAW/B,GAAeA,EAAY/2C,MAAMlC,GAAMA,EAAEyL,WACpDwvC,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAY3+E,OAAOwH,EAAQ4nC,aAAe,EAC9EwvC,EAAaH,GAAWf,EAAQmB,eAChCnC,EAAiBD,EAAch3E,KAAKC,OAAO+2E,EAAYn/E,KAAKkmC,GAAMA,EAAEkM,eAAgBN,EACpFutC,EAAiBF,EAAcA,EAAY3+E,QAAO,CAACghF,EAAmBt7C,KACtEA,EAAEu7C,WACJD,EAAQ5gF,KAAKslC,EAAE/kB,QAGVqgE,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQxhF,KAAK4hB,IAAC,CACpC25C,MAAO35C,EAAEtjB,KACTqlC,MAAO/hB,EAAET,OACTugE,OAAQ1/E,QAAQo+E,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxEhqC,EAAAA,EAAAA,KAAU,KACR,MAAM+qC,EAAS1gE,EAAKhX,QAAQA,SAAS1C,MAAMjH,GAAWA,EAAOoxC,WACzD0uC,GAAgBuB,IACdA,EAAOH,WACT5P,IAEFyO,GAAgB,GAClB,GACC,CAACD,EAAcn/D,EAAKhX,QAAQA,QAAS2nE,KAExCh7B,EAAAA,EAAAA,KAAU,KACJgqC,EAAc,GAChBh9E,YAAW,IAAMi9E,EAAeD,EAAc,IAAI,KAGpD,MAAMgB,EAAcZ,EAAa/1D,QAEjC,GAAI22D,EAAa,CACf,MAAMC,EAAgB,GAAQ35E,KAAK45E,GAC7B/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAYhzB,kBAK5B,GAJIgyB,GAAe,GACjBgB,EAAYlhB,UAAU95C,IAAI,YAGvBm5D,GAAUiC,EASR,CACL,MAAMC,GAAqB9B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBiB,EACzFG,EAAQE,aAAc3D,EAAAA,GAAAA,IAAoBqC,GACzCb,EAAMnxB,kBAAiCyf,aAAa,oBAAsB,IAAG4T,IAChF,MAZEL,EAAY1yB,UAAa,oBACjBqvB,EAAAA,GAAAA,IAAoBqC,2LAGJiB,KAAiBA,qEAS7C,IACC,CAACjB,EAAaT,EAAQS,eAEzBhqC,EAAAA,EAAAA,KAAU,KACJupC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7DjlE,EAAY,CAAEhhB,SAAQ4G,aACxB,GACC,CAAC5G,EAAQ+lF,EAAaK,EAAUplE,EAAapa,EAAW0+E,EAAQW,OAAQX,EAAQuB,QAGnF9qC,EAAAA,EAAAA,KAAU,KACR,IAAIurC,EAQJ,OANIhC,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFuB,EAAQtkF,OAAO+F,YAAW,KACxBiY,EAAY,CAAEhhB,SAAQ4G,aAAY,GACX,IAAtB0+E,EAAQS,cAGN,KACDuB,GACFtkF,OAAOgH,aAAas9E,EACtB,CACD,GACA,CAACjB,EAASrmF,EAAQghB,EAAapa,EAAW0+E,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMU,GAAejoC,EAAAA,EAAAA,KAAQ,IACpBvI,EAAiBA,EAAerxC,QAAO,CAACD,EAAmBtE,KAChE,MAAMkiB,EAAOm0D,EAAUr2E,GAKvB,OAJIkiB,GACF5d,EAAOK,KAAKud,GAGP5d,CAAM,GACZ,IAAM,IACR,CAAC+xE,EAAWzgC,IAETywC,GAAoB1rC,EAAAA,GAAAA,IAAiBz1B,IACzCq/D,EAAiB,CAACr/D,IAClBm/D,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAAC/+D,GAAQ,IAGhBohE,GAAuB3rC,EAAAA,GAAAA,IAAiB31B,IAC5Cu/D,EAAiBv/D,EAAQ,IAGrBuhE,GAAkB5rC,EAAAA,GAAAA,IAAgB,KACtC0pC,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,EAAc,IAGrBkC,GAAyB7rC,EAAAA,GAAAA,IAAgB,KAC7CupC,EAAgB,CAAErlF,SAAQ4G,aAAY,IAGlCghF,GAAqB9rC,EAAAA,GAAAA,IAAgB,KACzC8pC,GAAmB,EAAK,IAGpBiC,GAAqB/rC,EAAAA,GAAAA,IAAgB,KACzC8pC,GAAmB,GACnBE,GAAgB,EAAM,KAIxB/pC,EAAAA,EAAAA,KAAU,KACJ8pC,GAAgBO,GAAYd,EAAQuB,MAAQz3E,EAAQA,SAAWgX,EAAKhX,QAAQ04E,WACxD14E,EAAQA,QAAQ1C,MAAM0+B,GAAMA,EAAEyL,UAAYzL,EAAEu7C,aAEhEf,GAAmB,GAEvB,GACC,CAACQ,EAAUP,EAAcz2E,EAAQA,QAASk2E,EAAQuB,KAAMzgE,EAAKhX,QAAQ04E,WAExE,MAAMljF,GAAO25C,EAAAA,GAAAA,KA6Cb,OACE3B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,OAAOsuB,IAAK55C,EAAK65C,MAAQ,OAAS,OAZ/CknC,GAAmBv/D,EAAKhX,QAAQ04E,UAC9BlrC,EAAAA,GAAAA,cAACmrC,GAAAA,EAAY,CACX5iF,SAAS6iF,EAAAA,GAAAA,GAAuB,CAAExkF,KAAM4iB,EAAKhX,QAAQ04E,SAAU7lE,SAAUmE,EAAKhX,QAAQ64E,mBACtF1tB,SArMgB,IAsMhB2tB,UAAWL,EACXM,YAxMoB,2BAiNxBvrC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kBAAiB2mC,EAAAA,GAAAA,GAAWyuB,EAAQ8C,SAAU,CAAC,QAAS,QACvExrC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,aACZtrB,EAuET,SAA2B0gF,GAEzB,YAAgC,IAArBA,EAAQiB,SA1RR,IA8RPjB,EAAQW,OACH,eAGLX,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGlCjB,EAAQiB,SAAW,aAAe,eAC3C,CAtFc8B,CAAkB/C,IAhC1BiC,EAAa7nF,OAAS,GACpBk9C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,sBACZq3D,EAAariF,KAAKme,GACjBu5B,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CACLj8B,IAAK/1B,EAAKliB,GACV49C,KAAK,QACL17B,KAAMA,OA4BX0iE,EAAc,GAAKM,GAAWzpC,EAAAA,GAAAA,cAAA,OAAKiF,IAAKskC,EAAcj2D,UAAU,mBAChEo1D,EAAQuB,MAAQzgE,EAAKhX,QAAQ04E,WAAazB,GACzCzpC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLknC,KAAK,OACLJ,MAAM,cACNzuB,UAAU,iBACV+tC,SAAU0nB,EACVrnC,QAASspC,EACTnjC,UAAU,iBAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAIlBm2D,GACCzpC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eAAeouB,QAAS8F,IACpCoiC,EAEG5pC,EAAAA,GAAAA,cAAC0rC,GAAAA,EAAa,CACZniE,QAASugE,EACT3/B,SAAU0gC,EACVxpB,SAAU94D,EAAQ+tC,aAAeqyC,EACjCgD,eAAgBhD,EAAeE,OAAgBrlF,EAC/CyX,OAAK,IAIP+kC,EAAAA,GAAAA,cAAC4rC,GAAAA,EAAU,CACTr5C,KAAO,QAAOvoC,IACduf,QAASugE,EACT3/B,SAAUygC,EACVvpB,SAAU94D,EAAQ+tC,aAAeqyC,EACjCkD,cAAelD,EAAeE,EAAc,QAAKrlF,MAKzDimF,GACAzpC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBACZo1D,EAAQoB,QAAQxhF,KA1FzB,SAA4Bk/E,GAC1B,OACExnC,EAAAA,GAAAA,cAAC8rC,GAAU,CACTtvC,IAAKgrC,EAAO/9D,OACZm+D,cAAeqB,IAAiBQ,EAChCjC,OAAQA,EACRC,YAAaA,EACbrtC,YAAaA,EACbstC,eAAgBA,EAChBC,eAAgBA,GAGtB,MAiFM+B,IAAkBE,GAClB5pC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,qBA0CvB,SAAgCtrB,EAAcoH,EAA0B2Z,GACtE,OAAKA,EAIE/gB,EAAKoH,EAAS,SAAW,OAAQ2Z,EAAO,KAHtC/gB,EAAKoH,EAAS,4BAA8B,kCAIvD,CAhD4C28E,CAAuB/jF,EAAM0gF,EAAQuB,KAAMz3E,EAAQ4nC,cAExFwvC,GACC5pC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLwhB,QAAM,EACNrC,SAAmC,IAAzBwnB,EAAc/lF,OACxBq/C,KAAK,OACLT,QAASopC,GAER9iF,EAAK,oBAGT0hF,GACC1pC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLwhB,QAAM,EACNvhB,KAAK,OACLT,QAASqpC,GAER/iF,EAAK,oBAGN,K,4BCvSV,MAwJA,IAAe23C,EAAAA,EAAAA,KAtIe58C,IAcxB,IAdyB,QAC7BwF,EAAO,oBACPi1E,EAAmB,UACnB/Q,EAAS,YACT6V,EAAW,YACX4C,EAAW,UACX8G,EAAS,YACTxf,EAAW,aACXnwC,EAAY,cACZqmD,GAAgB,EAAK,YACrBxO,EAAW,MACXvvC,EAAK,aACLsnD,EAAY,sBACZC,GACDnpF,EACC,MAAM,iBAAEypB,IAAqB3Q,EAAAA,EAAAA,MACvBswE,GAAUC,EAAAA,EAAAA,IAAkB7jF,IAC5B,SAAE87C,IAAaC,EAAAA,EAAAA,MAEft8C,GAAO25C,EAAAA,GAAAA,KAEP0qC,GAAmBntC,EAAAA,GAAAA,IAAgB,KACvC+sC,GAAe,IAGXK,GAAyBptC,EAAAA,GAAAA,IAAgB,KACxCitC,GACL3/D,EAAiB,CACfnV,IAAK80E,EAAQ90E,KACb,IAGJ,IAAK80E,EACH,OAGF,MAAM,SACJI,EAAQ,IACRl1E,EAAG,WACHm1E,EAAU,MACV/4E,EAAK,YACL8U,EAAW,MACXmU,EAAK,MACL8Z,EAAK,KACL/xC,GACE0nF,EACEM,EAAsBT,OAAyCxoF,ECzFhE,SAA8BiB,GACnC,OAAQA,GACN,IAAK,2BACL,IAAK,6BACL,IAAK,wBACH,MAAO,+BACT,IAAK,mBACH,MAAO,0BACT,IAAK,eACH,MAAO,sBACT,IAAK,qBACH,MAAO,6BACT,IAAK,sBACH,MAAO,qCACT,IAAK,qBACL,IAAK,gBACH,MAAO,wBACT,IAAK,mBACH,MAAO,0BACT,IAAK,gBACH,MAAO,uBACT,IAAK,kBACH,MAAO,0BACT,IAAK,oBACH,MAAO,eACT,QACE,OAEN,CD6D0CioF,CAAqBjoF,GACvDkoF,GAAuBC,EAAAA,GAAAA,GAASrkE,EAjEhB,KAkEhBskE,EAAYviF,QAAQqiF,GAAwBl5E,GAAS84E,GAC3D,IAAIO,GAAgB,EACpB,GAAID,GAAaV,GAASzvD,QAAUyvD,EAAQ31C,MAAO,CACjD,MAAM,MAAEp+B,EAAK,OAAEC,GAAWk0D,GAAyBhkE,OAAS/E,OAAWA,EAAW6gD,GAClFyoC,EAAgB10E,IAAUC,CAC5B,CACA,MAAM00E,GAAsBrwD,GAAS8Z,IAAUy1C,IAAiBa,EAE1Dx5D,GAAYuvB,EAAAA,GAAAA,GAChB,UACAmpC,GAAa,aACbc,GAAiB,qBAChBpwD,IAAU8Z,IAAUw1C,GAAa,gBAClCx1C,GAAS,cACRq2C,GAAa,aACdJ,GAAsB,qBAgBxB,OACEzsC,EAAAA,GAAAA,cAAA,OACE1sB,UAAWA,EACX,gBAAei5D,GAAYC,GAAY,GACvC5qC,IAAI,QAEJ5B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,oBACZoJ,IAAU8Z,GACTwJ,EAAAA,GAAAA,cAACgtC,GAAK,CACJzkF,QAASA,EACTi1E,oBAAqBA,EACrB/Q,UAAWA,EACX6V,YAAaA,EACbngC,KAAM2qC,EAAgB,YAAc,SACpCtgB,YAAaA,EACb6O,gBAAiB0R,EACjBrK,cAAeA,EACfxO,YAAaA,EACbvvC,MAAOA,EACP+c,QAASqrC,EAAqBV,OAAmB7oF,EACjDm/E,eAAgBuJ,IAGnBW,GACC7sC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBACb0sB,EAAAA,GAAAA,cAACitC,GAAAA,EAAQ,CAAC35D,UAAU,YAAYjc,IAAKA,EAAKzQ,KAAM2lF,GAAYC,KAC1DR,GAAav4E,GACbusC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,eAAc2mC,EAAAA,GAAAA,GAAWxmD,IAEvCk5E,GACC3sC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAAoB2mC,EAAAA,GAAAA,GAAW0yB,EAAsB,CAAC,QAAS,UAIhFX,GAAax1C,GACbwJ,EAAAA,GAAAA,cAACktC,GAAK,CACJ3kF,QAASA,EACTyxE,8BAA+BwD,EAC/B/Q,UAAWA,EACX6V,YAAaA,EACb4C,YAAaA,EACb7oD,aAAcA,EACdmwC,YAAaA,EACbkW,cAAeA,EACfxO,YAAaA,EACbxyB,QAASqrC,EAAqBV,OAAmB7oF,EACjDm/E,eAAgBuJ,KAIrBO,IA/DsBU,EA+DkBV,EA7DzCzsC,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,UAAU,wBACV6uB,KAAK,OACLJ,MAAM,uBACNL,QAAS4qC,GAERtkF,EAAKmlF,MARZ,IAA2BA,CAgEnB,I,gBEhJV,MAsFA,IAAextC,EAAAA,EAAAA,KAtFe58C,IAOxB,IAPyB,QAC7BwF,EAAO,qBACPk6E,EAAoB,eACpBzO,EAAc,WACdpS,EAAU,MACVj9B,EAAK,YACL69C,GACDz/E,EAEC,MAAMkiD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B17C,GAAO25C,EAAAA,GAAAA,KACPpe,GAAU6pD,EAAAA,EAAAA,IAAkB7kF,IAE5B,MACJkL,EAAK,KACL7M,EAAI,OACJqmC,EAAM,SACNF,EAAQ,OACRsgD,EAAM,MACN3wD,GACE6G,EAEE+pD,GAAW9qC,EAAAA,GAAAA,IAAS+qC,EAAAA,EAAAA,IAAmB7wD,IACvCymD,EAAwB74E,QAAQk4E,GAChCe,EAAuBvB,GAAwBz5E,GAAU46E,EAAuBmK,GAmBtF,OAjBA9I,EAAAA,GAAAA,IAA4B7zE,IAAgC,IAA9B8zE,GAAyB9zE,EACrD,GAAK8xE,GAOL,GAAI6K,EAAU,CACZ,MAAM1I,EAAY3/B,EAAIzxB,QAAS6/C,QAAwBqR,EAAAA,KACvD/C,GAAoB2L,GAAU,EAAOtZ,EAAgBpS,EAAYj9B,GAAOhrB,MAAMkrE,IAC5ED,EAAU7hC,MAAM+hC,YAAY,gBAAiBD,GAC7CD,EAAUhO,aAAa+N,EAAAA,IAA2B,GAAG,GAEzD,OAZMF,GACFx/B,EAAIzxB,QAAS6/C,QAAwBqR,EAAAA,KAA2BjO,gBAAgBkO,EAAAA,IAWpF,GACC,CAAClC,EAAsB6K,EAAUtZ,EAAgBpS,EAAYj9B,IAG9Dqb,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACL3xB,UAAU,WAET7f,GACCusC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,UAAS2mC,EAAAA,GAAAA,GAAWxmD,IAElC7M,GACCo5C,EAAAA,GAAAA,cAAA,YAAMia,EAAAA,GAAAA,GAAWrzD,EAAM,CAAC,QAAS,QAEnCo5C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAY,gBAAcoJ,EAAQ,YAAc,KAClDpyB,QAAQoyB,IACPsjB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,2BACZ6vD,GAAyBnjC,EAAAA,GAAAA,cAAA,UAAQiF,IAAKs+B,EAAsBjwD,UAAU,yBACtEg6D,GACCttC,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,gBACV6vB,IAAKmqC,EACLlqC,IAAI,GACJL,MAAOy/B,EAAe,UAASA,WAAkBh/E,EACjDq+E,YAAY,eAGdyL,GAAY5wD,GACZsjB,EAAAA,GAAAA,cAACwtC,GAAAA,EAAQ,CACPp1E,MAAOoqE,GAAe9lD,EAAMsxC,YAAY51D,MACxCC,OAAQqkB,EAAMsxC,YAAY31D,OAC1Bo1E,kBAAgB,KAKxBztC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBACVurB,EAAAA,GAAAA,GAAe5R,EAAQF,EAAU/kC,EAAK4gC,MACtCykD,GAAUrtC,EAAAA,GAAAA,cAAA,YAAOh4C,EAAK,yBAGvB,IC/GV,IAAgB,KAAO,uBAAuB,SAAW,uBAAuB,IAAM,uBAAuB,QAAU,wBCgFvH,IAAe23C,EAAAA,EAAAA,KAvD2B58C,IAGpC,IAHqC,QACzCwF,EAAO,aACP8zB,GACDt5B,EACC,MAAM,YAAEwhC,EAAW,kBAAEmpD,IAAsB7xE,EAAAA,EAAAA,MACrC7T,GAAO25C,EAAAA,GAAAA,KACPpe,GAAU6pD,EAAAA,EAAAA,IAAkB7kF,IAE5B,OAAEnF,EAAM,GAAEmB,GAAOgE,EAEjBolF,GAAuBzuC,EAAAA,GAAAA,IAAgB,KAC3CwuC,EAAkB,CAAEtqF,SAAQ4J,IAAK,CAACzI,IAAM,KAG1CqpF,EAAAA,GAAAA,GAAYD,EAAsBtxD,EAhBX,SAgB6C74B,GAEpE,MAAM,OACJypC,EAAM,SACNF,EAAQ,cACR+N,GACEvX,GAEE,MACJnrB,EAAK,OAAEC,EAAM,UAAEs+B,EAAS,SAAEgnB,GACxB7iB,EAEEme,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClC3a,EAAY,CACVnhC,SACA4G,UAAWzF,EACX0kC,iBAAiB,GACjB,IAGJ,OACE+W,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAeI,GAAAA,KAAa,eACvCvB,QAASuX,GAETjZ,EAAAA,GAAAA,cAAC6Z,GAAAA,EAAY,CACXJ,aAAc9iB,GAAWurC,QACzB9pE,MAAOA,EACPC,OAAQA,EACRyhD,WAAS,EACTxmC,UAAW2vB,GAAAA,UAEZ34C,QAAQqzD,IAAa3d,EAAAA,GAAAA,cAAA,OAAK1sB,UAAW2vB,GAAAA,WAAkB6jC,EAAAA,GAAAA,IAAoBnpB,IAC5E3d,EAAAA,GAAAA,cAAA,OAAK1sB,UAAW2vB,GAAAA,KACdjD,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,OAAQ,YAAaI,GAAAA,QACjDj7C,EAAK,qBAAqB62C,EAAAA,GAAAA,GAAe5R,EAAQF,KAEhD,IC1EJ8gD,GAAe,IAAIxuE,IAAIzU,OAAO+f,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpBmjE,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,W,0CCgBpFC,GAAiB,KACjBC,GAAqB,CACzBv2E,MAAO,IACPC,OAAQ,IACRu2E,KAAM,GACN3zB,MAAO,GAIH4zB,GAAU,CAAEC,OAAQ,oyBAyP1B,IAAenvC,EAAAA,EAAAA,KA9OgB58C,IAOzB,IAP0B,QAC9BwF,EAAO,KACPigB,EAAI,aACJ6T,EAAY,eACZ23C,EAAc,WACdpS,EAAU,MACVj9B,GACD5hC,EACC,MAAM,QAAE+/B,IAAYjnB,EAAAA,EAAAA,MAEdopC,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7B6lC,GAAe7lC,EAAAA,EAAAA,IAAuB,MACtC17C,GAAO25C,EAAAA,GAAAA,KACPotC,GAAcC,EAAAA,GAAAA,KAEd9tD,GAAW+tD,EAAAA,EAAAA,IAAmB1mF,IAC9B,KAAE9D,EAAI,IAAEyqF,GAAQhuD,EAEhBiuD,GAAaj/E,EAAAA,EAAAA,MACbk/E,GAAYC,EAAAA,EAAAA,IAAiB9mF,EAAS4mF,GACtCG,EAA6B,YAAT7qF,GAAuB2qF,OAC7C5rF,EAD0D+E,EAAQ0H,KAAOixB,EAASquD,OAASJ,GAGxFK,EAAOC,IAAY7uC,EAAAA,EAAAA,IAASsuC,GAE7BQ,EAA4B,UAATjrF,GAA8B,YAATA,IAAuB2qF,GAC/D,MACJh3E,EAAK,OAAEC,EAAM,KAAEu2E,EAAI,MAAE3zB,GACnB0zB,GAEE3Q,EAAY1zE,QAAQ+xB,KAAiBszD,EAAAA,EAAAA,IAAmBH,EAAOp3E,EAAOC,EAAQu2E,EAAM3zB,GACpFhD,GAAezV,EAAAA,GAAAA,GAASw7B,GACxB4R,GAAmB9mB,EAAAA,GAAAA,GAAY7Q,GAC/B43B,EAAa53B,GAAgB23B,EAE7BE,EAAatnE,IAAQ0X,EAAAA,EAAAA,IAAS1X,EAAKjkB,IACnCwrF,EAAcvnE,GAAQsnE,EAActnE,OAAkBhlB,EACtDwsF,EAAcxnE,IAASsnE,EAActnE,OAAkBhlB,EAEvDkpE,GAAQC,EAAAA,EAAAA,IAAapkE,GAErB0nF,GAAmBvtC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAATj+C,IAAuB+qF,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAG,eAAED,GAAmBV,EAChC,OAAOU,ED7EJ,SAA2BC,EAAavB,GAE7C,OAAQ,aAAen+E,KAAK2/E,IAAID,GAAO1/E,KAAK45E,GAAK,MAAS,GAAKuE,CACjE,CC0E4ByB,CAAkBF,EAAKvB,EAAK,GACnD,CAACnqF,EAAM+qF,EAAOZ,IAOX0B,GAAkBpxC,EAAAA,GAAAA,IAAiBirC,IACvC,GAAa,YAAT1lF,EAAoB,OACxB,MACM2lF,EAAgBt0B,GAAarlD,KAAK45E,GAClC/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAYhzB,kBAEtBo5B,EAAWhoF,EAAQ0H,KAAOixB,EAASquD,QAASr/E,EAAAA,EAAAA,MAC5Cs6E,GAAoB,EAAI+F,EAAWrvD,EAASquD,QAAUnF,EACtDxjF,GAAO4pF,EAAAA,GAAAA,IAAqBxoF,EAAiB,IAAXuoF,GAEnCjI,GAAUiC,GAUbA,EAAQE,YAAc7jF,EACtB0hF,EAAMnxB,kBAAmByf,aAAa,oBAAsB,IAAG4T,MAV/DL,EAAY1yB,UAAa,8CACY7wD,8LAGXwjF,KAAiBA,uCACfI,kCAM9B,IAgJF,OA7IAvzB,EAAAA,EAAAA,KAAgB,KACVsyB,EAAa/1D,SACf88D,EAAgB/G,EAAa/1D,QAC/B,GACC,CAAC88D,KAEJ9L,EAAAA,GAAAA,IAA4B7zE,IAA4B,IAA1B8/E,GAAqB9/E,EACjD,GAAI++E,EACGe,GACHxrC,EAAIzxB,QAAS6/C,QAAwBqR,EAAAA,KAA2BjO,gBAAgBkO,EAAAA,UAKpF,GAAIkL,EAAY,CACd,MAAMjL,EAAY3/B,EAAIzxB,QAAS6/C,QAAwBqR,EAAAA,KACvD/C,GAAoBkO,EAAYnjB,EAAOsH,EAAgBpS,EAAYj9B,GAAOhrB,MAAMkrE,KAC9E3b,EAAAA,EAAAA,KAAgB,KACd0b,EAAU7hC,MAAM+hC,YAAY,gBAAiBD,GAC7CD,EAAU3b,UAAU95C,IAAI,sBACxBy1D,EAAUhO,aAAa+N,EAAAA,IAA2B,GAAG,GACrD,GAEN,IACC,CAAC+K,EAAkBhjB,EAAOsH,EAAgBpS,EAAYj9B,EAAOkrD,KAEhE1wC,EAAAA,EAAAA,KAAU,KAEJ1uC,KAAK8/D,IAAI2e,EAAIiB,IAAMX,EAAMW,KAAOzB,IAAkBj+E,KAAK8/D,IAAI2e,EAAIwB,KAAOlB,EAAMkB,MAAQhC,GAClFc,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,EAAI,GACZ,CAACA,EAAKM,KAET9qC,EAAAA,GAAAA,IAAW,KACTqqC,GAAa,GACXK,OAA6C5rF,EAAP,KAAzB8rF,GAAoB,KAErC1B,EAAAA,GAAAA,IAAY,MACV1kB,EAAAA,EAAAA,KAAgB,KACd,MAAMihB,EAAcZ,EAAa/1D,QAC7B22D,GACFmG,EAAgBnG,EAClB,GACA,GACDmF,EAAmB,SAAO9rF,GA2F3Bw8C,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACL3xB,UAAU,mCACVouB,QAhLgBuX,KAClB,MAAM5hD,EDrFH,SAAuB84E,EAAaO,EAAc9B,GACvD,MAAQ,sCAAoBuB,KAAOO,MAASP,KAAOO,KAAQ9B,IAC7D,CCmFgB+B,CAAcnB,EAAMW,IAAKX,EAAMkB,KAAM9B,GACjD9rD,EAAQ,CAAEzrB,OAAM,GAgLd2oC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eAjEZu8D,EAEH7vC,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,iBACV6vB,IAAK0sC,EACLzsC,IAAI,oBACJL,MAAQ,UAAS4rC,GAAmBv2E,oBAAoBu2E,GAAmBt2E,cANvD2nC,EAAAA,GAAAA,cAACwtC,GAAAA,EAAQ,CAACp1E,MAAOA,EAAOC,OAAQA,IA2C1D,WACE,GAAKw3E,EAEL,OACE7vC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACG11C,QAAQ2lF,KAAsBb,GAC7BpvC,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,oBACVyvB,MAAQ,UAA4B,EAAnBktC,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMW,GAAe/tC,EAAAA,GAAAA,GACnB,MACAp+C,EACA2qF,GAAa,WAEf,GAAa,YAAT3qF,EACF,OACEu7C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWs9D,EAAcC,wBAAyBhC,IACrD7uC,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CAAClnE,KAAMy+E,EAAYvpE,KAAMspE,EAAYz8D,UAAU,yBAChC9vB,IAArB09B,EAAS4vD,SACR9wC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,YAAYyvB,MAAQ,gBAAe7hB,EAAS4vD,gBAMnE,GAAa,UAATrsF,EAAkB,CACpB,MAAMs9C,EDnNL,SAAuBt9C,GAC5B,OAAKA,EACEopF,GAAaznE,IAAI3hB,IACnBopF,GAAaznE,IAAI3hB,EAAKkL,MAAM,KAAK,KACjC8+E,IAGiBsC,EAHYtsF,EAI3BssF,EAAIphF,MAAM,IAAI7G,QAAO,CAACkoF,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrBzC,GAAc3rF,SAHtC,UAMpB,IAAwBiuF,CAFxB,CC8MoBI,CAAcjwD,EAASkwD,WAC/BC,ED1NL,SAAyB5sF,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,EAEpB,CCuNsB6sF,CAAgBpwD,EAASkwD,WACzC,OACEpxC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWs9D,EAAcC,wBAAyBhC,GAAS9rC,MAAQ,gBAAehB,KACrF/B,EAAAA,GAAAA,cAAA,OAAKmD,IAAKkuC,EAAS/9D,UAAU,aAAa8vB,IAAI,KAGpD,CAEA,OACEpD,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWs9D,EAAcztC,IAAKouC,GAAQnuC,IAAI,IAEnD,CAaOouC,GAGP,CAUOC,IAhGP,WACE,GAAK/B,EACL,MAAa,UAATjrF,EAEAu7C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,uBACZ4N,EAASztB,OAEZusC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,0BACZ4N,EAASwwD,UAKL,YAATjtF,EAEAu7C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,uBAAuBtrB,EAAK,uBAC3Cg4C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,2BACZq+D,EAAAA,GAAAA,IAAkB3pF,EAAMmnF,EAAY5mF,EAAQ20E,YAE7CkS,GAAapvC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBAAgB2xB,IAAKskC,UAPzD,CAYF,CAwEKqI,GACG,ICrNV,IAAejyC,EAAAA,EAAAA,KA1DY58C,IAIrB,IAJsB,QAC1BwF,EAAO,iBACPspF,EAAgB,aAChBx1D,GACDt5B,EACC,MAAM,qBAAE+0D,IAAyBj8C,EAAAA,EAAAA,MAC3Bi2E,EAAOvpF,EAAQ4H,QAAQ2hF,MACvB,MACJr+E,EAAK,YAAE8U,GACLupE,EAEEC,EAAYznF,QAAQ+xB,KAAiB21D,EAAAA,EAAAA,GAAwBF,GAC7DG,EAAY3nF,QAAQ+xB,KAAiB61D,EAAAA,EAAAA,IAAwBJ,GAC7DK,GAAe3vC,EAAAA,GAAAA,GAASuvC,GAAYF,GACpCO,GAAe5vC,EAAAA,GAAAA,GAASyvC,GAAYJ,GAS1C,OACE7xC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,QACb0sB,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,UACVyvB,MAAQ,8BACRrB,QAZkB2wC,KACtBv6B,EAAqB,CACnB9tD,UAAWzB,EAAQhE,GACnB4/B,OAAQ57B,EAAQsjE,cAAe,GAAG,IAClC,IAUIsmB,IAAiBC,GACjBpyC,EAAAA,GAAAA,cAACwtC,GAAAA,EAAQ,CAACl6D,UAAU,6BAErB6+D,GACCnyC,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,kBACV6vB,IAAKgvC,EACL/uC,IAAK3vC,IAGR2+E,GACCpyC,EAAAA,GAAAA,cAAA,SACE1sB,UAAU,kBACVozD,aAAW,EACXF,OAAK,EACL8L,yBAAuB,EACvBC,UAAQ,EACR9L,MAAI,EACJtjC,IAAKivC,KAIXpyC,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,SAAS7f,KACtBglC,EAAAA,EAAAA,IAAelwC,IAAYy3C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eAAe/K,GACvD,ICvDK,SAASiqE,GAAkBC,GAiDxC,OAAO9yC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACV,CAAC3gD,EAAQ+vF,KACP,MAAM,QAAEnqF,GAAYmqF,EACpB,MAAO,CACL1e,gBAAgBjP,EAAAA,EAAAA,IAAqBpiE,GACrCi/D,YAAY+wB,EAAAA,EAAAA,IAAwBhwF,EAAQ4F,EAAQhE,IACrD,GANO++C,EAhDmD1D,IAC7D,MAAM,eACJo0B,EAAc,WACdpS,EAAU,QACVr5D,EAAO,WACPylE,GACEpuB,GACE,uBAAE7wC,IAA2B8M,EAAAA,EAAAA,MAE7B+2E,GAAsB1zC,EAAAA,GAAAA,IAAiBtqC,IAC3CA,EAAE4yC,kBACFz4C,EAAuB,CAAE/E,UAAWzB,EAAQhE,GAAIuK,UAAW8F,GAAG84C,UAAW,IAGrEmlC,GAAWnwC,EAAAA,EAAAA,KAAQ,KACvB,MAAQsrB,WAAY8kB,EAAI,QAAEpxC,GAAY9B,EACtC,MAAO,IACFA,EACHo0B,iBACApS,aACAoM,WAAY,IACP8kB,EACHplD,EAAG,EACH6B,EAAG,GAELmS,QAASsyB,OAAiBxwE,EAAYk+C,EACvC,GACA,CAAC9B,EAAOo0B,EAAgBpS,IAE3B,OACE5hB,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,4BAA6B+e,GAAc,eACrE7e,MAAOirB,EAAc,SAAQA,EAAWtgC,aAAasgC,EAAWz+B,OAAS,GACzEmS,QAASsyB,EAAiB4e,OAAsBpvF,GAE/CwwE,GACCh0B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,0BACZsuC,GACC5hB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,sBAKnB0sB,EAAAA,GAAAA,cAACyyC,EAAqBI,GAClB,IAaZ,CCvDA,MAAME,GAAkBP,GAAkBxF,IACpCgG,GAAkBR,GAAkBtF,IA2G1C,IAAe5pC,EAAAA,EAAAA,KACb,CAAC3gD,EAAMgO,KAA4B,IAA1B,MAAEytD,GAAOztD,EAChB,MAAM,OAAEvN,GAAWg7D,EAAMkN,YACnB3mC,GAAQmhB,EAAAA,EAAAA,IAAYnjD,GACpBswF,GAAkBC,EAAAA,EAAAA,IAAsBvwF,EAAQS,GAChDkzC,EAAc8nB,EAAMkN,YAAYh1B,YAEtC,MAAO,CACL3R,QACAwuD,YAAaxwF,EAAOqgB,YAAYC,iBAChCmwE,kBAAmB98C,EAAc28C,GAAiBroE,aAAeqoE,GAAiBjmF,IACnF,GAXL,EAxFyCjK,IAYnC,IAZoC,MACxCq7D,EAAK,oBACLof,EAAmB,kBACnB6V,EAAiB,aACjBh3D,EAAY,MACZqwC,EAAK,YACLwH,EAAW,YACXof,EAAW,aACXrH,EAAY,YACZkH,EAAW,kBACXC,EAAiB,MACjBzuD,GACD5hC,EACC,MAAM,qBAAEwwF,IAAyB13E,EAAAA,EAAAA,MAE3B23E,EAAap1B,EAAM/1D,SAASvF,OAE5B2wF,GAAqBv0C,EAAAA,GAAAA,IAAiB32C,IAC1CgrF,EAAqB,CAAEnwF,OAAQmF,EAAQnF,OAAQ4G,UAAWzB,EAAQhE,IAAK,KA0DjE6T,MAAOs7E,EAAgBr7E,OAAQs7E,GAAoBL,EAAY3gB,eAEvE,OACE3yB,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,QACVyvB,MAAQ,UAAS2wC,gBAA6BC,QAE7Cv1B,EAAM/1D,SAASC,KA9DpB,SAA4BC,EAAqByZ,GAC/C,MAAM,MAAE0a,EAAK,MAAE8Z,IAAUC,EAAAA,EAAAA,IAAkBluC,GAErCg6E,EADa4Q,GAAY9sE,EAAAA,EAAAA,IAAqB9d,KACjBqa,UAC7B,WAAEorD,EAAU,MAAEC,GAAUqlB,EAAYvlB,OAAO/rD,GAG3CsgE,GAAcsR,EAAAA,EAAAA,KAAuBxnF,EAAAA,EAAAA,MAAa7D,GAClD28E,GAAc2O,EAAAA,EAAAA,KAAuBznF,EAAAA,EAAAA,MAAa7D,GAExD,GAAIm0B,EAAO,CACT,MAAM+lD,EAAuB4Q,IAE1B3mB,EAAQ1qD,IAAUwxE,EAAa,EAAIlpF,Q7BhEpC,E6BgE4C2jE,G7BjE1C,E6BiEwEA,IAG5E,OACEjuB,EAAAA,GAAAA,cAAC+yC,GAAe,CACdxuF,GAAK,gBAAcy2E,EAAAA,EAAAA,IAAiBzyE,EAAQhE,MAC5CgE,QAASA,EACTyxE,8BAA+BwD,EAC/B8E,YAAaA,EACbG,qBAAsBA,EACtBF,eAAgBA,EAChBvU,WAAYA,EACZkG,YAAaA,EACbxyB,QAASuqC,EACTtJ,eAAgB8Q,EAChB/Q,cAAe0Q,GAAmB5lF,SAASjF,EAAQhE,IACnDogC,MAAOA,GAGb,CAAO,GAAI6R,EACT,OACEwJ,EAAAA,GAAAA,cAACgzC,GAAe,CACdzuF,GAAK,gBAAcy2E,EAAAA,EAAAA,IAAiBzyE,EAAQhE,MAC5CgE,QAASA,EACTyxE,8BAA+BwD,EAC/B8E,YAAaA,EACb4C,YAAaA,EACb3C,eAAgBA,EAChBlmD,aAAcA,EACd2xC,WAAYA,EACZkG,YAAaA,EACbxyB,QAASuqC,EACTtJ,eAAgB8Q,EAChB/Q,cAAe0Q,GAAmB5lF,SAASjF,EAAQhE,IACnDogC,MAAOA,GAMf,IAUQ,ICpFV,IAAImvD,GAEJ,MAmMA,GAnMiC/wF,IAM3B,IAN4B,QAChCwF,EAAO,oBACPi1E,EAAmB,YACnB8E,EAAW,aACXjmD,EAAY,cACZqmD,GACD3/E,EAEC,MAAMkiD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BqwC,GAAqBrwC,EAAAA,EAAAA,IAAuB,MAE5CswC,GAAYtwC,EAAAA,EAAAA,IAAyB,MAErClN,EAAQjuC,EAAQ4H,QAAQqmC,MAExBmlC,GAAiBjB,EAAAA,GAAAA,IAAkBz1B,EAAKu4B,IAEvCqF,EAAeC,IAAoBliC,EAAAA,EAAAA,IAAS0hC,GAC7CS,EAAaz4E,QAAQu4E,GAAiBlH,GAAkBt/C,IACxD,UAAEyhC,EAAS,aAAEklB,IAAiBC,EAAAA,GAAAA,IAClC/qB,EAAAA,EAAAA,IAAoB3vD,EAAS,WAC5Bw6E,GACDc,EAAAA,EAAAA,IAAsBt7E,EAAS,UAC/B8zB,IAGM2mD,aAAcY,IAAqBX,EAAAA,GAAAA,IACzC/qB,EAAAA,EAAAA,IAAoB3vD,EAAS,aAC5Bm6E,EACDzzC,EAAAA,GAAAA,QACA5S,IAGKqpD,EAAeC,IAAmB7hC,EAAAA,GAAAA,KAEnCu/B,GADW/4E,SAAQ63E,EAAAA,EAAAA,IAA4B55E,KACxBm9E,EACvBpC,EAAWtB,GAAwBz5E,EAAS86E,GAC5CG,GAAkBC,EAAAA,GAAAA,IAAoBJ,GAEtCU,EAAkBlB,IAAkB6C,GAAkBhD,EACtDwB,GAAiD,KAA/Bpb,EAAAA,GAAAA,GAAY+Z,IAGlCh1B,aAAcomC,EACdlmC,qBAAsBq2B,IACpBp2B,EAAAA,GAAAA,GAAkB+1B,OAAgBvgF,EAAW0gF,IAE1CxH,EAAawX,IAAkBtzC,EAAAA,EAAAA,KAAS,IAExCuzC,EAAaC,IAAeC,EAAAA,GAAAA,GAAU,GACvCC,GAAuBC,EAAAA,GAAAA,IAAmBJ,EAvDxB,KAyDxBh1C,EAAAA,EAAAA,KAAU,KACR,IAAKu9B,EACH,OAGF,MAAM8X,EAAWR,EAAUxgE,QAC3B4gE,EAAYI,EAASlO,YAAckO,EAAS72B,SAAS,GACpD,CAACy2B,EAAa1X,EAAa4X,KAE9Br9B,EAAAA,EAAAA,KAAgB,KACd,IAAKylB,EACH,OAGF,MAAM+X,EAAYC,GAAAA,GAA4B,EAExCtK,EAA0C,GAAzBqK,EADL,GACkChkF,KAAK45E,GACnDG,EAAmBJ,EAAgBkK,IAAyBlK,EAC5DuK,EAAoBZ,EAAmBvgE,QACvC80D,EAAQqM,EAAkBx9B,kBAE3BmxB,EAUFA,EAAMnxB,kBAAiCyf,aAAa,oBAAqB4T,EAAiBz/E,YAT3F4pF,EAAkBl9B,UAAa,yBACfi9B,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EATrC,kEAUeA,MAAcA,sCACnBrK,KAAiBA,sCAChBA,kCAK7B,GACC,CAAC1N,EAAa4X,IAEjB,MAAMM,EAAatqF,QAAQwzD,GAAa6d,GAElCkZ,GAAc31C,EAAAA,GAAAA,IAAgB,KAC7B80C,EAAUxgE,UAIf0gE,GAAe,GACfE,EAAY,IACZ/T,EAAAA,GAAAA,GAAS2T,EAAUxgE,UAEnB01C,EAAAA,EAAAA,KAAgB,KACd6qB,EAAmBvgE,QAASikC,UAAY,EAAE,IAC1C,IAGEq9B,GAAiB51C,EAAAA,GAAAA,IAAgB,KACrC40C,OACAA,GAAee,CAAW,IAGtB57B,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClC,IAAK4e,EAGH,YAFAglB,GAAkByB,IAAeA,IAKnC,GAAI7B,EAEF,YADA7mE,EAAAA,EAAAA,MAAavN,2BAA2B,CAAE/F,YAI5C,MAAMisF,EAAWR,EAAUxgE,QACvBkpD,EACE8X,EAASO,SACX1U,EAAAA,GAAAA,GAASmU,IACTQ,EAAAA,GAAAA,OAEAR,EAAS7iE,SAGXmjE,IAEAN,EAAS7iE,QACT6iE,EAASlO,YAAc,GACvBjG,EAAAA,GAAAA,GAASmU,IACTQ,EAAAA,GAAAA,MAEAd,GAAe,GACjB,IAGI7N,GAAmBnnC,EAAAA,GAAAA,IAAiBtqC,IACxC,MAAM4/E,EAAW5/E,EAAE4hE,cAEnB4d,EAAYI,EAASlO,YAAckO,EAAS72B,SAAS,IAGvD,OACE3d,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACL3xB,UAAU,yBACVouB,QAASuX,GAER6E,GACC9d,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iBACb0sB,EAAAA,GAAAA,cAACumC,GAAAA,EAAc,CACbpI,QAASyW,EACT3vC,IAAK+uC,EACL7wC,IAAK2a,EACLxqC,UAAU,aACVlb,MAAOs8E,GAAAA,GACPr8E,OAAQq8E,GAAAA,GACRnC,UAAQ,EACRD,yBAAuB,EACvB9L,OAAQ9J,EACR+J,MAAO/J,EACPgK,aAAW,EACXnH,QAAS7C,EAAcmY,OAAcrxF,EACrCmjF,aAAcjK,EAAc2J,OAAmB7iF,EAC/CojF,QAASjB,KAIf3lC,EAAAA,GAAAA,cAAA,UACEiF,IAAKq+B,EACLhwD,WAAWuvB,EAAAA,GAAAA,GAAe,YAAa2gC,GACvCzgC,MAAQ,UAAS2xC,GAAAA,iBAAwCA,GAAAA,SAE3D10C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WAAW2xB,IAAK8uC,IAC9BE,GACCj0C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAY,iBAAgB8wD,KAC/BpkC,EAAAA,GAAAA,cAACglC,GAAAA,EAAe,CAACpiE,SAAU8/D,EAAgBkB,EAAmBZ,MAGhEllB,IAAc+kB,GACd7iC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,uBAEf0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,0BACZopD,GAAcoK,EAAAA,GAAAA,IAAoBkN,EAAUxgE,QAAS8yD,cAAeQ,EAAAA,GAAAA,IAAoBtwC,EAAMmnB,YAC5F+e,GAAesX,EAAUxgE,QAASuhE,SAAW/0C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAE3D,EC9KV,GAhDoCvwB,IAA0B,IAAzB,QAAEwF,EAAO,QAAEm5C,GAAS3+C,EACvD,MAAMiF,GAAO25C,EAAAA,GAAAA,KAyBb,OACE3B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iBACZ/qB,EAAQsjE,cAAevjE,KAAKqoE,GAC3B3wB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,OACZq9C,EAAIroE,KAAK67B,GACR6b,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACL+C,QAAM,EACNmc,SAA0B,gBAAhBl9B,EAAO1/B,KAEjBi9C,QAASA,IAAMA,EAAQ,CAAE13C,UAAWzB,EAAQhE,GAAI4/B,YAEhD6b,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,uBAAsB2mC,EAAAA,GAAAA,GAAWjyD,EAAKm8B,EAAOv9B,QAnCrDu9B,KAClB,MAAM,KAAE1/B,GAAS0/B,EACjB,OAAQ1/B,GACN,IAAK,MACH,IAAK6nB,EAAAA,IAAAA,KAAiB6X,EAAO9sB,KAC3B,OAAO2oC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,0BAEtB,MAEF,IAAK,UACH,OAAO0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,0BACtB,IAAK,MACL,IAAK,UACH,OAAO0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,mBACtB,IAAK,kBACH,OAAO0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,2BACtB,IAAK,UACL,IAAK,gBACH,OAAO0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAER,EAgBL2hE,CAAW9wD,SAKhB,ECuCV,IAAewb,EAAAA,EAAAA,KA5EqB58C,IAG9B,IAH+B,WACnC+3B,EAAU,SACVumC,GACDt+D,EACC,MAAM,aAAEmyF,IAAiBr5E,EAAAA,EAAAA,MAEnB7T,GAAO25C,EAAAA,GAAAA,MACP,SACJt+C,EAAQ,OAAED,EAAM,cAAEqsB,EAAa,cAAEtkB,EAAa,uBAAEge,EAAsB,iBAAEuG,EAAgB,gBAAE5E,GACxFgQ,EAEEm+B,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClCg2C,EAAa,CAAE3wF,GAAInB,EAAQC,WAAUynB,mBAAkB,IAGnDqqE,GAAiBzyC,EAAAA,EAAAA,KAAQ,KAC7B,IAAKhzB,GAAkB5sB,OACrB,OAIF,MAAQqd,OAASQ,KAAMi6D,GAAa9oE,OAAS6O,KAAMy0E,KAAgBhpF,EAAAA,EAAAA,MAEnE,OAAOsjB,EAAiBpnB,KAAK08B,IACpB9E,EAAAA,EAAAA,IAAS8E,GAAU41C,EAAU51C,GAAUowD,EAAUpwD,KACvDl+B,OAAOwD,QAAQ,GACjB,CAAColB,IAEJ,QAAsBlsB,IAAlBisB,EACF,OAoBF,MAAM4lE,EAAY/qF,QAAQ6e,GAA0Bhe,GAAiBge,EAAyBhe,GAExFmqF,EAAe7lE,EAAiBznB,EAAK,WAAY,wBAAoBxE,EAAWisB,GACnF9f,MAAM,KACNrH,KAAK4M,GACU,mBAANA,EAAyB8qC,EAAAA,GAAAA,cAACga,GAAAA,EAAe,CAACpzD,MAAMy5C,EAAAA,GAAAA,IAAqB5wB,KAAqBva,SAElG1R,EAEJ,OACEw8C,EAAAA,GAAAA,cAAA,OACE,YAAUK,EAAAA,GAAAA,IAAqB5wB,GAC/B6D,WAAWuvB,EAAAA,GAAAA,GAAe,gBAAiBwyC,GAAa,aAAch0B,GAAY,YAClFzf,IAAK55C,EAAK65C,MAAQ,MAAQ,MAC1BH,QAASuX,GAETjZ,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,iCACV6hE,GAA4C,IAA1BA,EAAeryF,SAAiBk9C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,uBAhClE6hE,GAAkBA,EAAeryF,OAAS,GACxCk9C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kBAAkBsuB,IAAK55C,EAAK65C,MAAQ,MAAQ,OACxDszC,EAAe7sF,KAAKme,GACnBu5B,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CACLj8B,IAAK/1B,EAAKliB,GACV49C,KAAK,QACL17B,MAAMyZ,EAAAA,EAAAA,IAASzZ,EAAKliB,IAAMkiB,OAAkBjjB,EAC5C+N,MAAO2uB,EAAAA,EAAAA,IAASzZ,EAAKliB,SAAwBf,EAAlBijB,OA2BnCu5B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,QAAQsuB,IAAI,QACxBnyB,EAAgB6lE,EAAettF,EAAK,kBAEvCg4C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,mBACT,I,4BChGV,UAAgB,KAAO,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,gBAAgB,uBAAuB,aAAe,uBAAuB,OAAS,uBAAuB,UAAY,wBCoCjPiiE,GAAmB,IAAMnoD,GAAAA,GACzBooD,GAAc,IAAMpoD,GAAAA,GA2H1B,IAAeuS,EAAAA,EAAAA,KAzH6B58C,IAOtC,IAPuC,SAC3CurC,EAAQ,eACRmnD,EAAc,gBACdrwF,EAAe,mBACfkqC,EAAkB,oBAClBkuC,EAAmB,YACnBkD,GACD39E,EACC,MAAM,mBAAE2yF,IAAuB75E,EAAAA,EAAAA,MAGzBopC,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BiH,EAAW,eAAgBrc,EAE3BQ,GAAoB4T,EAAAA,EAAAA,KAAQ,IAChCpT,GAAoBx/B,MAAM0+B,IAAMC,EAAAA,EAAAA,IAAeD,EAAEF,SAAUA,MAC1D,CAACgB,EAAoBhB,IAClBqnD,EAAe7mD,GAAmBI,YAAY3qC,IAE9C,YAAE6mB,IAAgBwqE,EAAAA,GAAAA,GAAejrC,EAAWrc,EAASn5B,gBAAa3R,GAElEqyF,GAAmBnzC,EAAAA,EAAAA,KAAQ,KAC/B,IAAKiI,EAAU,OAAO7b,GAAmBC,iBAAiBxqC,GAE1D,IAAK6mB,EAAa,OAClB,MAAM0qE,EAAaxmD,GAAoBx/B,MAAMimF,GAAcA,EAAUznD,SAASyB,WAAa3kB,EAAYhiB,SACnG2lC,iBAAiBxqC,GACrB,OAAOuxF,CAAU,GAChB,CAAChnD,EAAmBQ,EAAoBlkB,EAAau/B,IAElDqrC,GAAWtzC,EAAAA,EAAAA,KAAQ,KACvB,GAAImzC,EACF,OAAOA,EAGT,IAAKJ,GAAgB1gF,SACnB,OAGF,MAAM,SAAEA,GAAa0gF,EAGrB,OAAO1gF,EAFatE,KAAKI,MAAMJ,KAAKob,SAAW9W,EAASjS,SAE3ByB,EAAE,GAC9B,CAACsxF,EAAkBJ,IAEhB9Z,GAAiBjB,EAAAA,GAAAA,IAAkBz1B,EAAKu4B,GAExCyY,EAAsBN,GAAiB,UAASA,IAChDvX,EAAkB4X,GAAa,UAASA,IAExCE,GAAsB1zC,EAAAA,GAAAA,GAASyzC,GAAsBN,GACrDQ,GAAkB3zC,EAAAA,GAAAA,GAAS47B,GAAkB4X,GAE7CI,GAAiB1zC,EAAAA,EAAAA,KAAQ,IAC7Bt9C,GAAiB0K,MAAMkhC,IAAWvC,EAAAA,EAAAA,IAAeuC,EAAO1C,SAAUA,MACjE,CAAClpC,EAAiBkpC,IAEfsmD,EAAatqF,QAAQo2E,GAAe0V,IAAmBzrC,GAAYurC,IAAwBC,IAE/FtoC,aAAcwoC,EACdtoC,qBAAsBuoC,IACpBtoC,EAAAA,GAAAA,GAAkB4mC,OAAYpxF,GAAW,EAAM,QAE7C+yF,GAAcr3C,EAAAA,GAAAA,IAAgB,KAC7Bk3C,GAAgBpsF,WACrB0rF,EAAmB,CAAE1rF,UAAWosF,EAAepsF,UAAWskC,YAAW,KAGhEkoD,EAAmBC,EAAqBC,IAAyB5yC,EAAAA,GAAAA,KAClE6yC,IAAsBhsC,GAAciqC,GAAe4B,GAEnDljE,GAAYuvB,EAAAA,GAAAA,GAChBI,GAAAA,KACAozC,GAAyBpzC,GAAAA,UACzB0H,GAAY1H,GAAAA,eAGd,OACEjD,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWA,EAAW2xB,IAAKA,GAC7B0xC,GAAsB32C,EAAAA,GAAAA,cAAC42C,GAAAA,EAAmB,CAACtoD,SAAUA,EAAUgB,mBAAoBA,IACnFqb,GACC3K,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACV7tC,WAAYm5B,EAASn5B,WACrBme,UAAW2vB,GAAAA,YACXg3B,8BAA+BuD,IAGlC6Y,GACCr2C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACo/B,GAAAA,EAAe,CACd5iC,IAAKw5C,EACL1iE,WAAWuvB,EAAAA,GAAAA,GAAeI,GAAAA,OAAeqzC,GACzCn0C,KAAMqzC,GACNnW,OAAQ8W,EACRhb,KAAMQ,EACNP,QAAM,EACN3tE,uBAAqB,EACrB8xE,QAASgX,IAEV5rC,GACEkrC,GAAoBla,GAAkB37B,EAAAA,GAAAA,cAACgF,GAAiB,CAAC1W,SAAUA,IAEpE0R,EAAAA,GAAAA,cAACo/B,GAAAA,EAAe,CACd5iC,IAAKm5C,EACLriE,WAAWuvB,EAAAA,GAAAA,GAAeI,GAAAA,aAAqBqzC,GAC/Cn0C,KAAMozC,GACNlW,OAAQ6W,EACR/a,KAAMQ,EACNP,QAAM,EACN3tE,uBAAqB,EACrBopF,OAAQJ,EACRlX,QAASmX,KAKb,IC7DV,IAAe/2C,EAAAA,EAAAA,KAhEV58C,IASC,IATA,SACJurC,EAAQ,QACR/lC,EAAO,gBACPnD,EAAe,mBACfkqC,EAAkB,mBAClBwnD,EAAkB,YAClBpW,EAAW,eACX+U,EAAc,oBACdjY,GACDz6E,EACC,MAAM,eAAEotC,IAAmBt0B,EAAAA,EAAAA,OACrB,gBAAE6yB,GAAoBnmC,EAAQ4lC,UAE9B4oD,GAAiBr0C,EAAAA,EAAAA,KAAQ,KAC7B,IAAKo0C,IAAuBpoD,EAC1B,OAIF,MAAMksC,GAAYxuE,EAAAA,EAAAA,MAAY+T,MAAMQ,KAEpC,OAAO+tB,EACJ5nC,QAAQkwF,IAAmBvoD,EAAAA,EAAAA,IAAeuoD,EAAe1oD,SAAUA,EAASA,YAC5EhmC,KAAK0uF,GAAmBpc,EAAUoc,EAAepkF,UACjD9L,OAAOwD,QAAQ,GACjB,CAACgkC,EAASA,SAAUI,EAAiBooD,IAElC79B,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClC/O,EAAe,CACb7B,SAAUA,EAASA,SACnBlrC,OAAQmF,EAAQnF,OAChB4G,UAAWzB,EAAQhE,IACnB,IAGJ,OACEy7C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,WAAWuvB,EAAAA,GAAAA,IAAezU,EAAAA,EAAAA,IAAiBE,IAAa,UACxD6T,KAAK,OACLT,QAASuX,GAETjZ,EAAAA,GAAAA,cAACi3C,GAAqB,CACpB7xF,gBAAiBA,EACjBkpC,SAAUA,EAASA,SACnBgB,mBAAoBA,EACpBmmD,eAAgBA,EAChBjY,oBAAqBA,EACrBkD,YAAaA,IAEdqW,GAAgBj0F,OACfk9C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WACZyjE,EAAezuF,KAAKme,GACnBu5B,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CACLj8B,IAAK/1B,EAAKliB,GACVkiB,KAAMA,EACN07B,KAAK,aAITnC,EAAAA,GAAAA,cAACga,GAAAA,EAAe,CAACpzD,MAAMy5C,EAAAA,GAAAA,IAAqB/R,EAASvlB,OAAQuK,UAAU,YACpE,ICpBb,IAAeqsB,EAAAA,EAAAA,KA1CiB58C,IAW1B,IAX2B,QAC/BwF,EAAO,UACP2uF,EAAS,SACTvoB,EAAQ,gBACRvpE,EAAe,mBACfkqC,EAAkB,aAClB6nD,EAAY,eACZ1B,EAAc,oBACdjY,EAAmB,iBACnB4Z,EAAgB,YAChB1W,GACD39E,EACC,MAAMiF,GAAO25C,EAAAA,GAAAA,KAEPtsB,GAAaqtB,EAAAA,EAAAA,KAAQ,IACzBn6C,EAAQ4lC,UAAW37B,QAAQ1J,QAAO,CAACC,EAAKulC,IAAavlC,EAAMulC,EAASvlB,OAAO,IAC1E,CAACxgB,IAEJ,OACEy3C,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,YAAaq0C,GAAa,cACpDn0C,MAAO4rB,EAAY,cAAaA,WAAenrE,EAC/Co+C,IAAK55C,EAAK65C,MAAQ,MAAQ,OAEzBt5C,EAAQ4lC,UAAW37B,QAAQlK,KAAKgmC,GAC/B0R,EAAAA,GAAAA,cAACq3C,GAAc,CACb76C,KAAK86C,EAAAA,EAAAA,IAAqBhpD,EAASA,UACnCA,SAAUA,EACV/lC,QAASA,EACTnD,gBAAiBA,EACjBkqC,mBAAoBA,EACpBwnD,mBAAoBzhE,GAjCH,IAiCwC+hE,EACzD3B,eAAgBA,EAChBjY,oBAAqBA,EACrBkD,YAAaA,MAGhByW,EACG,IC4BV,IAAex3C,EAAAA,EAAAA,KAzEwB58C,IAIjC,IAJkC,UACtCi7C,EAAS,QACTz1C,EAAO,OACPnF,GACDL,EACC,MAAM,4BAAEw0F,IAAgC17E,EAAAA,EAAAA,MAElC7T,GAAO25C,EAAAA,GAAAA,MACP,WACJtxC,EAAU,QAAEsuC,EAAO,OAAEr2B,EAAM,SAAEq1C,GAC3B3f,EACEw5C,EAAsB,WAAXlvE,EACXmvE,EAAyB,SAAXnvE,QAAkC9kB,IAAbm6D,EAEnC+5B,GAAax4C,EAAAA,GAAAA,IAAgB,KACjCq4C,EAA4B,CAAE54C,UAAS/rC,OAAQxP,GAAS,IAGpDu0F,GAAaj1C,EAAAA,EAAAA,KAAQ,IACrB/D,EACE64C,EAAiBnnF,EAAa,iCAAmC,iCACjEonF,EAAoB,mCAEjBpnF,EAAa,2BAA6B,2BAE7CmnF,EAAiBnnF,EAAa,4BAA8B,4BAC5DonF,EAAoB,8BAEjBpnF,EAAa,sBAAwB,uBAE7C,CAAConF,EAAaD,EAAUnnF,EAAYsuC,IAEjCi5C,GAAoBl1C,EAAAA,EAAAA,KAAQ,IACzB1E,EAAU2f,UAAWk6B,EAAAA,GAAAA,IAAmB7vF,EAAMg2C,EAAU2f,eAAYn6D,GAC1E,CAACwE,EAAMg2C,EAAU2f,WAEdm6B,GAAgBxa,EAAAA,GAAAA,IAAWt1E,EAAqB,IAAfO,EAAQ0H,MAC/C,OACE+vC,EAAAA,GAAAA,cAAA,OAAK1sB,UC5Dc,wBD6DjB0sB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,UACLJ,MAAM,cACN9mC,OAAK,EACLiqC,QAAM,EACNxD,QAASg2C,EACTpkE,UCnE+C,uBDoE/C+tC,UAAWtjB,EAAAA,GACX8J,UAAW7/C,EAAKqI,EAAa,YAAc,aAE3C2vC,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,OAAQlE,EAAU,sBAAwB,iBAEzEqB,EAAAA,GAAAA,cAAA,OAAK1sB,UCzE0E,wBD0E7E0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UC1EwG,wBD0E7EtrB,EAAK2vF,IACrC33C,EAAAA,GAAAA,cAAA,OAAK1sB,UC3EyQ,wBD4E5Q0sB,EAAAA,GAAAA,cAAA,KACE1sB,WAAWuvB,EAAAA,GAAAA,GACT,OACA,mBC/EsI,uBDiFtI20C,GCjFwM,uBDkFxMC,GClF0O,wBDmFzOpnF,GCnFuK,0BDsF5K2vC,EAAAA,GAAAA,cAAA,QAAM1sB,UCtFwS,wBDuF3SskE,EAAoB5vF,EAAK,0BAA2B,CAAC8vF,EAAeF,IAAsBE,KAI7F,I,+EErEV,MAAMC,GAAkB,MAAQ3qD,GAAAA,GAwBhC,IAAeuS,EAAAA,EAAAA,KAtBiB58C,IAI1B,IAJ2B,MAC/BkmB,EAAK,UACLqK,EAAS,QACTouB,GACD3+C,EACC,MAAMiF,GAAO25C,EAAAA,GAAAA,KACb,OACE3B,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GChCM,uBDgCsBvvB,GACvCyvB,MAAQ,qCAAmCi1C,EAAAA,GAAAA,IAAyB/uE,GAAOgvE,cAC3Ev2C,QAASA,GAERz4B,EACG+2B,EAAAA,GAAAA,cAACk4C,GAAAA,EAAS,CAACjvE,MAAOA,EAAOk5B,KAAM41C,KAC/B/3C,EAAAA,GAAAA,cAAA,OAAKmD,IAAKg1C,GAAU/0C,IAAI,KAC3Bn6B,GAAOxV,OAAQwmD,EAAAA,GAAAA,GAAWhxC,EAAMxV,OAASzL,EAAK,WAC9CihB,GAAOkjB,UAAY6T,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,mBACjC0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,mBACT,IEuOJ8kE,GAAe,CAAEtJ,OAAQ,kvBAEzBuJ,GAAmB,CAAEvJ,OAAQ,qvBAG7BwJ,GAAsB,KAAOlrD,GAAAA,GAC7BmrD,GAA4B,KAAOnrD,GAAAA,GAuiCzC,IAAeuS,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAQ+vF,KACP,MAAM,eACJvZ,EAAc,gBAAE3zE,EAAe,gBAAEJ,EAAe,wBAAEyqC,IAChD5rC,EAAAA,EAAAA,IAAetB,IACb,aAAE05B,GAAiB15B,GACnB,QACJ4F,EAAO,MAAE61D,EAAK,eAAEo6B,EAAc,WAAEC,EAAU,SAAEp1F,EAAQ,gBAAE0E,EAAe,sBAAE2wF,EAAqB,eAAEC,GAC5FjG,GACE,GACJnuF,EAAE,OAAEnB,EAAM,SAAEuU,EAAQ,cAAEihF,EAAa,iBAAEz0E,EAAgB,WAAE9T,EAAU,kBAAEmf,EAAiB,YAAEk8C,EAAW,gBACjG1gD,EAAe,SAAEzD,GACfhf,EAEEgJ,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B4hE,GAAiBC,EAAAA,EAAAA,IAAqBtiE,EAAQS,GAC9Cy1F,GAAgBC,EAAAA,EAAAA,IAAqB11F,GACrCsyD,EAAYnkD,IAAQkzD,EAAAA,EAAAA,IAAclzD,GAClCqgC,EAAUrgC,IAAQwnF,EAAAA,EAAAA,IAAYxnF,GAC9BynF,EAAgBznF,GAAM80B,UACtB4yD,GAAgB/4D,EAAAA,EAAAA,IAAS98B,QAA+CI,GAArCquC,EAAAA,EAAAA,IAAmBlvC,EAAQS,GAE9D81F,EAAe1zF,EAAgBsC,YAActC,EAAgBsC,WAAW0F,SAASjJ,GACjF40F,GAAmBn0B,IAAkBo0B,EAAAA,EAAAA,IAAsB7wF,GAC3D8wF,EAAgBb,GAAkBC,GAAcU,EAChDnwF,GAASC,EAAAA,EAAAA,IAAatG,EAAQ4F,GAC9B+wF,GAAeh0B,EAAAA,EAAAA,IAAsB3iE,EAAQ4F,GAC7C49B,EAAYxuB,GAAW+O,EAAAA,EAAAA,IAAW/jB,EAAQgV,QAAYnU,EACtD+1F,EAAoBvwF,GAAQzE,IAAMqtC,EACpCqnD,GAAcvjD,mBAAmB1sC,GAAQzE,SACzCf,EAEEg2F,EAAqBn2F,GAAWigB,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,QAAYG,EACrFi2F,EAAclxF,EAAQhE,KAAOi1F,EAE7BE,EAAkBv1E,IAAqBq1E,EACvCt1E,EAAeC,IAAqBu1E,GACtCjiF,EAAAA,EAAAA,IAAkB9U,EAAQk2F,GAAiBD,EAAgBA,EAAgBx1F,EAAQ+gB,QACnF3gB,EACEm2F,EAAqBz1E,IAAgB01E,EAAAA,EAAAA,IAAkBj3F,EAAQuhB,EAAc5Z,QAAQohE,IACrFmuB,EAA6D,gBAAvC31E,GAAc/T,QAAQ6H,QAAQvT,KAEpD89E,GAAiBuX,EAAAA,EAAAA,IAAqBn3F,EAAQ4F,GAC9CuqE,EAAgC,WAApB/qE,IAChBq2D,EACIA,EAAM/1D,SAASqoC,MAAMrmB,IAAM6uD,EAAAA,EAAAA,IAAuBv2E,EAAQ0nB,EAAGhnB,MAC7D61E,EAAAA,EAAAA,IAAuBv2E,EAAQ4F,EAASlF,KAI5CqK,UAAWqlE,EAAgBxmE,YAAaymE,EAAgB,oBAAEjmE,GACvD+lE,GAAaqG,GAAmB,CAAC,GAE9Bt1E,MAAOk2F,KAAc7iE,EAAAA,EAAAA,IAAwBv0B,IAAW,CAAC,EAE3Dq3F,IAAcC,EAAAA,EAAAA,IAA6B1xF,GAC3C2xF,GAAgBF,KAAerZ,EAAAA,EAAAA,IAAoBh+E,EAAQq3F,IAAeA,QAAcx2F,EACxF22F,IAAsBC,EAAAA,EAAAA,IAA4B7xF,GAExD,IAAIq5D,GAEFA,GADExD,GAAO/1D,SACI+1D,EAAM/1D,SAASgyF,OAAMz6E,IAAA,IAAGrb,GAAIyF,GAAW4V,EAAA,OAAK+yE,EAAAA,EAAAA,IAAwBhwF,EAAQqH,EAAU,KAEtF2oF,EAAAA,EAAAA,IAAwBhwF,EAAQ4B,GAG/C,MAAM,SAAE0vE,IAAkC,WAApBlsE,IAAgCS,EAAAA,EAAAA,IAA4B7F,EAAQ4F,EAASlF,IAAc,CAAC,EAC5Gq/E,IAAgB4X,EAAAA,EAAAA,IAAoB33F,EAAQ4F,GAC5CgyF,GAA0B/qE,GAC5BtkB,EAAAA,EAAAA,IAAiBvI,EAAQ6sB,EAAkBpsB,OAAQosB,EAAkBnsB,WAAamsB,OAClFhsB,EAEE6sC,GAAoB/lC,QAAQ/B,EAAQqE,aAAerE,EAAQ+nC,UAC3DC,GAA8BF,IAChCriC,EAAAA,EAAAA,IAA0BrL,EAAQS,EAAQmF,EAAQqE,WAAa,QAC/DpJ,EACEg3F,GAAkBnqD,GACtBqoD,GAAwBjhF,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQmtC,SAAgC/sC,EACxF+E,EAEEkyF,GAAoBlpF,GAAMggC,iBAAiB/jC,SAASjF,EAAQhE,IAE5Dm2F,GAAer3F,IAAamB,EAAAA,IAAkB+M,GAAM5L,SAAWgzF,EAC/DgC,GAAeD,IAAgB/iD,EAAAA,EAAAA,IAAuBh1C,EAAQ4F,IAAYgJ,GAAMiK,SAASo/E,EAAAA,UAC3Fp3F,EAEEq3F,GAAavwF,SAAQ2kF,EAAAA,EAAAA,IAAmB1mF,IACxCuyF,IAAmBC,EAAAA,EAAAA,IAAuBp4F,EAAQS,GAClD43F,IAA+B3pF,EAAAA,EAAAA,IAAmC1O,EAAQS,EAAQmF,EAAQhE,IAEhG,MAAO,CACLogC,OAAOmhB,EAAAA,EAAAA,IAAYnjD,GACnBq2F,gBACAG,kBACAE,gBACAC,eACAnzD,YACAuzD,gBAAiBA,GAAmBG,EACpCJ,cACAv1E,eACAy1E,qBACAtpD,qBACA6jC,aAAa+mB,EAAAA,EAAAA,IAAyBt4F,EAAQ4F,GAC9C2yF,iBAAiBC,EAAAA,EAAAA,IAAsBx4F,EAAQS,GAC/C0vE,YACAomB,eACAsB,mBACAx1B,iBACA6zB,gBACAnjC,YACA9jB,UACAqiC,YACA53C,eACA09D,aACAG,iBACAC,uBACAnmB,gBAAgBjP,EAAAA,EAAAA,IAAqBpiE,GACrCi/D,cACAw5B,gBACE9wF,QAAQ/B,EAAQqE,aACZrE,EAAQ+nC,YACT+qD,EAAAA,EAAAA,IAA8B14F,EAAQS,EAAQmF,EAAQqE,WAE3DvJ,WACAq/E,iBACA4Y,aAAkC,WAApBvzF,EACdwf,WACAsqE,kBAAkB+B,EAAAA,EAAAA,IAAuBjxF,EAAQ4F,GACjDgzF,kBAAkB1H,EAAAA,EAAAA,IAAuBlxF,EAAQ4F,GACjDizF,sBAAuB74F,EAAOiY,SAASC,MAAM2gF,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyB/4F,GAC7C6sB,kBAAmB+qE,GACnBjrD,mBAAoB3sC,EAAO2sC,mBAC3B4B,iBAAiBhB,EAAAA,EAAAA,IAAe3nC,IAAgC,cAApBR,OACxCvE,GAAYysC,EAAAA,EAAAA,IAAsBttC,EAAQS,GAC9CgC,gBAAiBo1F,IAAmBp1F,EAAgBo1F,GAAgBj2F,IACpEsrC,0BACA4qD,qBACAkB,oBAAoCn4F,IAApBwnB,GAAiCroB,EAAOo4C,eAAe/vB,IAAkBoD,UACzFwtE,qBAAqCp4F,IAApBwnB,EAAgCroB,EAAOo4C,eAAe/vB,IAAkBpkB,UAAOpD,EAChG6vB,WAAWtJ,EAAAA,EAAAA,IAA2BpnB,GACtC42F,oBACAoB,gBACAlF,eAAgB9yF,EAAOkwB,oBACvB6nE,gBACAI,oBACAe,uBAAwBl5F,EAAOiY,SAASC,MAAMihF,aAC9Cd,gCACAe,cAAezxF,QAAQ2uF,GAAc+C,cACrCC,qBAAqBnrD,EAAAA,EAAAA,IAA+BnuC,EAAQ,mBAC5Du5F,oBAAoBprD,EAAAA,EAAAA,IAA+BnuC,EAAQ,sBACtD02F,GAAiBwB,KAAe,CAAE7xF,aACnCqH,GAAc,CAAE6rE,gBAAgBigB,EAAAA,EAAAA,IAAqBx5F,EAAQ4F,EAA6B,cAApBR,OAC5C,iBAAnBw6E,GAA+B,CAAEA,qBACxCzP,GAAa,CACfC,iBACAC,mBACAjmE,uBAEH,GA/Jeu2C,EAliCuBvgD,IAkFrC,IAlFsC,QAC1CwF,EAAO,cACPywF,EAAa,6BACboD,EAA4B,8BAC5BpiB,EAA6B,8BAC7BC,EAA6B,MAC7B7b,EAAK,UACLqO,EAAS,WACTgsB,EAAU,eACVD,EAAc,WACd6D,EAAU,UACV/f,EAAS,gBACT3C,EAAe,YACf1G,EAAW,eACX0lB,EAAc,UACdtlE,EAAS,cACTipE,EAAa,uBACbC,EAAsB,sBACtB7D,EAAqB,eACrBiD,EAAc,gBACdC,EAAe,aACfhiB,EAAY,MACZj1C,EAAK,gBACLw0D,EAAe,OACfnwF,EAAM,cACNqwF,EAAa,aACbC,EAAY,UACZnzD,EAAS,YACTszD,EAAW,gBACXC,EAAe,aACfx1E,EAAY,mBACZy1E,EAAkB,eAClBzd,EAAc,eACdqG,EAAc,kBACdlyC,EAAiB,YACjB6jC,EAAW,gBACXgnB,EAAe,UACfpoB,EAAS,eACTC,EAAc,iBACdC,EAAgB,oBAChBjmE,EAAmB,aACnBmsF,EAAY,eACZl0B,EAAc,cACd6zB,EAAa,UACbnjC,GAAS,QACT9jB,GAAO,SACPqiC,GAAQ,aACR53C,GAAY,UACZ09D,GAAS,cACTG,GAAa,oBACbC,GAAmB,eACnB1E,GAAc,cACdsG,GAAa,eACb/nB,GAAc,WACdpS,GAAU,gBACVw5B,GAAe,SACf/3F,GAAQ,gBACRm3F,GAAe,mBACflrD,GAAkB,gBAClB4B,GAAe,gBACf9rC,GAAe,wBACfyqC,GAAuB,gBACvB9nC,GAAe,aACfuzF,GAAY,SACZ/zE,GAAQ,cACRm7D,GAAa,iBACbmP,GAAgB,iBAChB0J,GAAgB,mBAChBE,GAAkB,sBAClBD,GAAqB,kBACrBhsE,GAAiB,kBACjBirE,GAAiB,qBACjB3gB,GAAoB,kBACpByf,GAAiB,aACjBoB,GAAY,aACZD,GAAY,iBACZI,GAAgB,uBAChBe,GAAsB,6BACtBb,GAA4B,oBAC5BiB,GAAmB,mBACnBC,GAAkB,2BAClBhiB,IACDn3E,EACC,MAAM,uBACJgM,GAAsB,qBACtB+oD,GAAoB,uBACpB7oD,GAAsB,sBACtButF,GAAqB,iBACrB7vF,KACEkP,EAAAA,EAAAA,MAGEopC,IAAMvB,EAAAA,EAAAA,IAAuB,MAE7B+4C,IAAkB/4C,EAAAA,EAAAA,IAAuB,MAEzC0wB,IAAmB1wB,EAAAA,EAAAA,IAAuB,MAE1Cg5C,IAAmBh5C,EAAAA,EAAAA,IAAO,GAE1B17C,IAAO25C,EAAAA,GAAAA,MAENg7C,GAAuBC,KAA0Bh8C,EAAAA,EAAAA,KAAS,IAC1Di8C,GAAwBC,GAAoBC,KAAqBj5C,EAAAA,GAAAA,MAClE,SAAEO,KAAaC,EAAAA,EAAAA,OAErB81B,EAAAA,GAAAA,IAAeqiB,GAAiBL,GAEhC,MAAM,kBACJt8B,GAAiB,oBACjBib,GAAmB,kBACnBiiB,GAAiB,wBACjBj9B,GACAC,kBAAmBgB,GAAa,uBAChCf,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBlb,GAAK91C,EAAAA,IAAgB6kE,IAAiB7tE,EAAAA,IAAas6B,EAAAA,KAE9E0e,EAAAA,EAAAA,KAAU,KACJ2gB,IACF7wD,IACF,GACC,CAAC6wD,GAAmB7wD,KAEvB,MAAMsrE,GAAwBZ,GAAmB,GAC1CxqB,GAASqrB,KAAa12B,EAAAA,GAAAA,GAAQy2B,KACrCp7B,EAAAA,EAAAA,KAAU,KACJo7B,IAIJpuE,WAAWquE,GA3IU,GA2ICb,EAAmC,GACxD,CAACA,EAAiBa,GAAWD,KAEhC,MAAM,qBAAExsB,KAAyBC,EAAAA,GAAAA,GAC/BmB,IAAW8jB,OACXzvE,EACA+2E,KAA0BtH,GAC1B,IAIA1uE,GAAIyF,GAAS,OAAE5G,GAAM,YAAEsoE,GAAW,SAAE/zD,GAAQ,qBAAEsT,IAC5C1iB,GAEJ42C,EAAAA,EAAAA,KAAU,KACR,IAAK53B,GAAU,OACf,MAAMhjB,EAAK65D,EAAQA,EAAMkN,YAAY/mE,GAAKyF,GAE1C,MAAO,KACLkwE,GAA2B,CAAEG,0BAA2B,CAAC91E,GAAK+1E,WAAW,GAAO,CACjF,GACA,CAAClc,EAAO72C,GAAUvd,GAAWkwE,KAEhC,MAAMtzD,IAAUspB,EAAAA,EAAAA,IAAe3nC,GACzBmkE,IAAQC,EAAAA,EAAAA,IAAapkE,GACrB+tC,GAAkC,cAApBvuC,IAAmCQ,EAAQ+tC,YACzD2mD,IAAWC,EAAAA,EAAAA,IAAe30F,KAAamxF,EACvCyD,GAAY7yF,QAAQklB,KAA0C,WAApBznB,GAC1Cq1F,IAAgBC,EAAAA,EAAAA,IAAsB90F,GACtC+0F,GAAmBF,KAAkBlD,IAAiBC,IACtDoD,GAAe/C,IAAiBrsD,aAAcqvD,EAAAA,EAAAA,IAAkBhD,GAAgBrsD,WAChFq+B,GACJd,MACK1G,GAAkB1uB,MACnBuiD,IACAntB,GAAY+xB,sBACZL,GAEAzyB,GAAUrgE,QAAQ8zD,IAAUA,EAAO/1D,SAASvF,OAAS,IACrDs7D,GAAO/1D,SAASqoC,MAAMgtD,GAA4C,IAApC9yF,OAAOC,KAAK6yF,EAAIvtF,SAASrN,SACvD66F,GAA4BttD,IAAsBksD,EAClDqB,GAA2BvtD,IAAsBqoD,EACjDvkB,QAA6C3wE,IAAxBu3E,GACrB8iB,KACF1pB,IAAsBH,IAAkBklB,GACtC0E,IAEAE,GAAapoC,KAAcpf,IAAe/tC,EAAQw1F,sBAAwB7C,EAC1E8C,GAAW1zF,QAAQgxF,IACnB5vB,KACEA,GAAYuyB,eAAkBj5B,IAAmB0H,IAAUmsB,IAC5DntB,GAAYwyB,eAGbC,GAAezD,IAAgBuC,GAE/BlpB,IAAgB70B,EAAAA,GAAAA,IAAgB,CAACtqC,EAAkDhI,KACvFmC,GAAuB,CACrB/E,aACA4C,eACIgI,GAAG84C,UAAY,CAAE5+C,WAAW,MAC5B67D,IAAW,CAAE97D,gBAAiBuvD,EAAO/1D,SAASC,KAAIqI,IAAA,IAAC,GAAEpM,GAAIoM,EAAA,OAAKpM,CAAE,MACpE,IAGE65F,GAAgB/E,EAAgBrwF,OAASxF,EACzC66F,GAAyB/zF,SAASqyF,KAA0B1xE,IAAwB2wE,IAGpF0C,GAD2B5yB,KAAgB1G,GAAkB6zB,IAAkBuF,IACvC9E,EAAe8E,GACvDG,GAAa7yB,GAAc4tB,EAAe8E,IAE1C,gBACJllC,GAAe,YACfD,GAAW,kBACX+G,GAAiB,kBACjBmW,GAAiB,yBACjBC,GAAwB,gBACxBtB,GAAe,wBACfuB,GAAuB,iBACvBnlB,GAAgB,SAChBwjB,GAAQ,uBACRH,GAAsB,8BACtBoC,IACE7C,GACFC,GACA9uB,GACAj7C,GACA2gE,EACArgE,QAAQ0pE,IACR1pE,QAAQ2pE,IACR3pE,QAAQ4pE,GACRlT,GACAjB,GACA38D,GACA+wE,GACAC,GACA1H,EACAkxB,KAGI,kBACJY,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,iBACjBC,GAAgB,iBAChBtS,GAAgB,gBAChBuS,GAAe,sBACfC,GAAqB,gBACrBC,GAAe,uBACfC,GAAsB,iBACtBC,GAAgB,gBAChBC,GAAe,mBACfxL,GAAkB,eAClByL,GAAc,mBACdC,GAAkB,cAClBC,GAAa,YACbC,GAAW,qBACXC,GAAoB,6BACpBC,GAA4B,qBAC5BC,IC3gBW,SACbx3F,EACA+rE,EACAxrE,EACAnF,EACAC,EACAgtC,EACAm8B,EACAl2B,EACAwiD,EACA16B,EACAkgC,EACAC,EACAp4D,EACAw0D,GAEA,MAAM,SACJh0F,EAAQ,iBAAEuI,EAAgB,aAAE7D,EAAY,gBAAEisE,EAAe,gBAAEmoB,EAAe,iBAC1EzzE,EAAgB,qBAAEunE,EAAoB,aAAEmM,EAAY,gBAAErxF,EAAe,uBAAEsxF,EAAsB,yBAC7FC,IACE/jF,EAAAA,EAAAA,OAGFtX,GAAIyF,EAAS,YAAE0hE,EAAW,iBAAEvnD,EAAgB,cAAEy0E,EAAa,oBAAEl0E,EAAmB,UAAE9X,GAChFrE,EAEEi2F,GAAoBt/C,EAAAA,GAAAA,IAAgB,KACnCo/C,GAIL33F,EAAS,CAAEpC,GAAI+5F,EAAW/5F,IAAK,IAG3Bk6F,GAAoBv/C,EAAAA,GAAAA,IAAgB,KACnCq/C,EAMD/xB,GAAed,GAAam0B,cAC9Bx0F,EAAa,CAAEjI,OAAQm7F,EAAWh6F,GAAIyF,UAAW0hE,EAAYm0B,gBAE7Dl5F,EAAS,CAAEpC,GAAIg6F,EAAWh6F,KAR1B2K,EAAiB,CAAE3G,QAASP,EAAK,eASnC,IAGI02F,GAAoBx/C,EAAAA,GAAAA,IAAgB,KACnC/Y,GAILx/B,EAAS,CAAEpC,GAAI4hC,EAAU5hC,IAAK,IAG1Bo6F,GAAmBz/C,EAAAA,GAAAA,IAAgB,KACvC7zC,EAAa,CACXjI,OAAQ01F,GAAwBF,EAAgBA,EAAgBx1F,EAChEC,WACA2G,UAAWma,EACXrX,eAAgBgsF,GAAwBF,OAAgBp1F,EAAYwG,EACpEpF,mBAAmB,GACnB,IAGEynF,GAAmBntC,EAAAA,GAAAA,IAAgB,KACvCo4B,EAAgB,CACdl0E,SACAC,WACAoZ,QAASzS,EACTsB,OAAQgrC,EAAckiC,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,QAC1D,IAGEomB,GAAkB1/C,EAAAA,GAAAA,IAAgB,KACtCugD,EAAgB,CAAEr8F,SAAQ4G,aAAY,IAGlC60F,GAAwB3/C,EAAAA,GAAAA,IAAiB4gD,IAC7CxoB,EAAgB,CACdl0E,SACAC,WACAoZ,QAASqjF,EACTx0F,OAAQgrC,EAAckiC,EAAAA,GAAAA,eAAmCA,EAAAA,GAAAA,OACzD,IAGEymB,GAAkB//C,EAAAA,GAAAA,IAAgB,KACtClzB,EAAiB,CAAElkB,WAAY,CAACkC,IAAa,IAGzCypF,GAAqBv0C,EAAAA,GAAAA,IAAgB,KACzCq0C,EAAqB,CAAEnwF,SAAQ4G,aAAY,IAGvCk1F,GAAiBhgD,EAAAA,GAAAA,IAAiB31B,IACtCm2E,EAAa,CAAEt8F,SAAQ4G,YAAWuf,WAAU,IAGxC41E,GAAqBjgD,EAAAA,GAAAA,IAAgB,KACzC7wC,EAAgB,CAAER,WAAYzK,EAAQwJ,aAAY,IAG9CwyF,GAAgBlgD,EAAAA,GAAAA,IAAgB,KACpC,GAAIkf,GAASA,EAAM/1D,SAAU,CAC3B,MAAMP,EAAas2D,EAAM/1D,SAASC,KAAIvF,IAAA,IAAC,GAAEwB,GAAIxB,EAAA,OAAKwB,CAAE,IACpD8J,EAAgB,CAAER,WAAYzK,EAAQ0E,cACxC,MACEuG,EAAgB,CAAER,WAAYzK,EAAQ0E,WAAY,CAACkC,IACrD,IAGIq1F,GAAcngD,EAAAA,GAAAA,IAAgB,KAClC7zC,EAAa,CACXjI,SAAQC,SAAUmB,EAAAA,GAAgBwF,aAClC,IAGEs1F,GAAuBpgD,EAAAA,GAAAA,IAAgB,KACvC7O,EACFhlC,EAAa,CACXjI,OAAQsoE,EAAa79D,WAAajB,YAAWC,cAAezJ,EAAQ4G,UAAW0hE,EAAawyB,gBAK5FpF,GAAwBF,EAC1B+G,EAAuB,CACrBv8F,OAAQw1F,EACRv1F,SAAUqhB,EACV1a,UAAW0hE,EAAawyB,gBAG1B7yF,EAAa,CACXjI,OAAQsoE,EAAa79D,WAAa7D,UAAW0hE,EAAawyB,eAE9D,IAGI6B,GAAsB7gD,EAAAA,GAAAA,IAAiBtqC,IAC3CA,EAAE4yC,kBAEFusB,EAAcn/D,EAAGhI,EAAU,IAyB7B,MAAO,CACL4xF,oBACAC,oBACAC,oBACAC,mBACAtS,mBACAuS,kBACAC,wBACAC,gBAAiBiB,EACjBhB,wBA/B6B7/C,EAAAA,GAAAA,IAAiBtqC,IAC9CA,EAAE4yC,kBAEFo4C,EAAyB,CAAEx8F,SAAQmB,GAAIyF,GAAY,IA6BnDg1F,kBA1BuB9/C,EAAAA,GAAAA,IAAgB,KACvCv4C,EAAS,CACPpC,GAAIgE,EAAQnF,OACZC,SAAUkF,EAAQhE,IAClB,IAuBF06F,kBACAxL,qBACAyL,iBACAC,qBACAC,gBACAC,cACAC,uBACAC,6BAA8BQ,EAC9BP,sBA5B2BtgD,EAAAA,GAAAA,IAAgB,KACtCy7C,GACLtvF,EAAa,CACXjI,OAAQ01F,GAAwBF,EAAgBA,EAAgBx1F,EAChEC,SAAUs3F,EAAap2F,GACvByF,aACA,IAwBN,CD+UMg2F,CACFh4F,GACA+rE,GACAxrE,EACAnF,GACAC,GACAgtC,EACAm8B,GACAl2B,GACAuiD,EACAz6B,EACAkgC,GACAC,GACAp4D,EACAw0D,KAGFx7C,EAAAA,EAAAA,KAAU,KACHy6B,GAIDykB,IAA0BzC,GAC5BjvF,IACF,GACC,CAACA,GAAkBitE,EAAcgiB,EAAiByC,KAErD,MAAM4B,IAAqBp9C,EAAAA,GAAAA,GACzB,4BACA81C,GAAkB,iBAClBzkB,GAAe,eACfooB,GAAiB,gBACjBC,GAA0B,0BAC1B7D,GAAyB,yBACzB9e,GAAgB,eAChBlN,IAAS,MACTpiE,QAAQ/B,EAAQ8mB,QAAU,YAC1B9mB,EAAQ00E,UAAY,aACpBggB,IAAY,YACZn9B,IAAqB,gBACrBgT,IAAcE,GAAoB,UAClCkmB,GAAgB,gBAChB3wF,EAAQ8b,YAAc,cACtBgsB,GAAqB,uBACrBs6B,IAAW,WACXpiE,EAAQqrC,kBAAoB,qBAC5BguB,IAAc,cACdoS,IAAkB,uBAClBylB,IAAgBhB,GAAc,gBAC9BnuF,QAAQ/B,EAAQsjE,gBAAkB,qBAClC6I,IAAY,YACZ3mB,GACAklB,GAAe,iBACd3oE,QAAQlF,KAAoBy3F,KAA2B,wBAGpD,KACJj2F,GAAI,MAAE81B,GAAK,MAAE8Z,GAAK,MAAEgnB,GAAK,MAAEvuC,GAAK,SAAE/b,GAAQ,QAAE2B,GAAO,QAAEkyE,GAAO,KAAEv9D,GAAI,QAAE2iE,GAAO,QAAE5oD,GAAO,SAAErC,GAAQ,OAAElpB,GAAM,KAAE85E,KACtGr7C,EAAAA,EAAAA,IAAkBluC,GAEhB23F,GE/kBO,SAAyBt5F,GACtC,MAAOktB,EAAUqsE,IAAev/C,EAAAA,EAAAA,MAQhC,OANAyU,EAAAA,GAAAA,IAAc,KACRzuD,GxCkBDqW,eAA8BrW,GAA6C,IAA/Bw5F,EAASv9F,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAnBlC,GAsBxB,OAFKk0E,UAAcC,GAAuBqpB,cACrBtpB,GAAQ30C,QAAQ,CAAEmQ,KAAM,iBAAkB+tD,KAAM,CAAC15F,EAAMw5F,IAE9E,CwCrBMG,CAAe35F,GAAM+S,KAAKwmF,EAC5B,GACC,CAACv5F,IAEGktB,CACT,CFqkB2B0sE,CAAgB3E,GAAyBj1F,IAAMA,UAAOpD,IAEvE4qB,UAAWqyE,GAAoB,eAAEC,IGnlB5B,SACb5F,EACA13F,EACA4G,EACA22F,GAEA,MAAM,kBAAEC,IAAsB/kF,EAAAA,EAAAA,MACxBglF,EAAqBF,EACvB7F,GAAkBgG,WAAWH,KAAyB32F,QAAaxG,GAEjE,UAAE4qB,EAAS,KAAExnB,GAASi6F,GAAsB,CAAC,EAQnD,OANA1hD,EAAAA,EAAAA,KAAU,KACHv4C,GAASwnB,IAAauyE,GACzBC,EAAkB,CAAEx9F,SAAQ0E,WAAY,CAACkC,GAAY+jB,eAAgB4yE,GACvE,GACC,CAACv9F,EAAQwD,EAAMwnB,EAAWpkB,EAAW22F,EAAuBC,IAExD,CACLxyE,YACAsyE,eAAgB95F,EAEpB,CH6jB8Dm6F,CAC1DjG,GAAkB13F,GAAQ4G,GAAWgxF,IAGjCgG,IAAyBl4B,EAAAA,GAAAA,GAAY43B,IAAgB,GAErDO,GAAcR,GAAwBO,IAA0Bp6F,GAAQ85F,GACxEQ,GAAwBR,IAAkBM,IAE1C,UAAEhjD,IAAchmC,IAAU,CAAC,EAE3BmpF,IAAiC3xE,IAAsBusE,IAAiBrmC,IAAa9uC,MACrFg3E,IACmB,WAApB71F,KACCs0F,EACA+E,GAAoB5xE,KAAsBouE,IAAgD,WAApB71F,KACtEs0F,EACAgF,IAA2BlyF,EAAAA,KAAiB6uC,KAAcg2B,IAAkB9iC,KAC5E0sD,GAEA0D,GItmBD,SACL/4F,GA0BA,IAzBA,aACE41F,EAAY,cACZf,EAAa,cACbd,EAAa,YACb9vB,EAAW,UACX2wB,EAAS,gBACThE,EAAe,YACfoI,EAAW,gBACXC,EAAe,aACfjE,EAAY,gBACZkE,EAAe,uBACfpD,GAaDx7F,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,EAEL,MAAM,KACJ+D,EAAI,MAAE81B,EAAK,MAAE8Z,EAAK,MAAEgnB,EAAK,MAAEvuC,EAAK,SAAE/b,EAAQ,KAAEsW,EAAI,QAAE2iE,EAAO,QAAEpF,EAAO,SAAE7lD,EAAQ,QAAEqC,IAC5EkT,EAAAA,EAAAA,IAAkBluC,GAEhBm5F,EAAa,CAACC,EAAAA,KACdC,EAAUllE,GAAS8Z,GAAStV,GAAYqC,GAASuX,cACjDuxB,EAAUzlE,GAA2B,UAAnBs6B,GAAUz8B,MAAoBg9F,EAChDI,EAAoBD,IAAYv1B,EAChCy1B,EAAWx3F,QAAQ/B,EAAQoP,UA4FjC,OA1FKiqF,GAAWr5F,EAAQw5F,gBACtBL,EAAWx4F,KAAK,cACZX,EAAQw5F,gBAAkBC,EAAAA,KAC5BN,EAAWx4F,KAAM,cAAaX,EAAQw5F,mBAE/B11B,GACTq1B,EAAWx4F,KAAK,QAGds4F,GACFE,EAAWx4F,KAAK,qBAGdk0F,IACFsE,EAAWx4F,KAAK,gBACZstC,GAAOyrD,SACTP,EAAWx4F,KAAK,SAGdq4F,GACFG,EAAWx4F,KAAK,iBAGhB04F,EACFF,EAAWx4F,KAAK,SACPs0D,EACTkkC,EAAWx4F,KAAK,SACP+lB,GACTyyE,EAAWx4F,KAAK,SACZm1F,GACFqD,EAAWx4F,KAAK,6BAETgK,EACTwuF,EAAWx4F,KAAK,YACP69E,EACT2a,EAAWx4F,KAAK,WACPsgB,EACTk4E,EAAWx4F,KAAK,QACPijF,IACTuV,EAAWx4F,KAAK,aAEZijF,EAAQzvD,OAASyvD,EAAQ31C,QAC3BkrD,EAAWx4F,KAAK,UAIhBq6B,IAAYA,EAAQuX,eACtB4mD,EAAWx4F,KAAK,WAGdsjE,GACFk1B,EAAWx4F,KAAK,gBAGdi1F,GACFuD,EAAWx4F,KAAK,iBAGdi0F,GACFuE,EAAWx4F,KAAK,eAGdq0F,GACFmE,EAAWx4F,KAAK,iBAGd44F,GACFJ,EAAWx4F,KAAK,cAGdiwF,GACFuI,EAAWx4F,KAAK,qBAGbk0F,IACHsE,EAAWx4F,KAAK,cAEZ04F,GAAWL,GACbG,EAAWx4F,KAAK,mBAGdi1F,GAAgB3xB,GAAes1B,IAAaD,GAAqB1I,IACnEuI,EAAWx4F,KAAK,wBAGdozF,IAAkB5/D,GAAUwE,IAAamrC,IAAaw1B,IACxDH,EAAWx4F,KAAK,iBAIbw4F,EAAWl4F,KAAK,IACzB,CJqe2B04F,CAAsB35F,EAAS,CACtD41F,gBACAf,iBACAd,gBACA9vB,eACA2wB,UAAWA,KAAcd,EACzBlD,kBACAoI,YAAa/xE,IAAqBA,GAAkBC,cAAgB,EACpE+xE,gBAAiB1D,IAAcE,GAC/BT,gBACAkE,gBAAoC,YAAnBvgE,IAAUz8B,QAAuB4qF,EAAAA,EAAAA,IAAiB9mF,GAAS2H,EAAAA,EAAAA,OAC5EmuF,4BAGI8D,GAAeb,GAAiB9zF,SAAS,gBACzC6+D,IAAU+1B,EAAAA,EAAAA,IAAe75F,GACzB85F,IAAYjhB,EAAAA,GAAAA,IAAmB74E,EAAQw5F,gBAE7C,IAAIO,GAWAC,GATFD,GADEtkD,IAEO4/C,GADM,QAGNvxB,IAAY8f,IAAYmR,GAGlB,aAFA,UAMbC,GACEH,KAAmB1gE,IAAS8Z,MAAW61B,GACzCk2B,GAAoB,UACX/1B,IACT81B,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,OAGtB,MAAMC,GAA+CpF,GAAgB,UAAY,cAEjFx2B,EAAAA,GAAAA,GACEiyB,GAAiBtwF,EAAQqwF,cAAgBrwF,EAAQqwF,cAAgBx1F,GACjE65F,GAAW10F,EAAQ4b,sBAAmB3gB,EACtC0gB,EACA3b,EAAQhE,IAGVquE,GACE3tB,GAAKj7C,EAAW5G,GAAQ0vE,EAAWC,EAAgBC,EAAkBjmE,EAAqBkmE,GAG5F,MAAMkJ,GAAazmB,IAAantD,EAAQk6F,kBACjCj2B,IAAed,IAAa+2B,sBAC9Bj/F,GKjqBQ,SACbuyD,EACAomB,IAEAllB,EAAAA,EAAAA,KAAgB,KACTklB,IAEL1I,EAAAA,EAAAA,KAAoB,KAClB,MAAMr7D,EAAQ29C,EAAaviC,QAAS6rB,cAA8B,uBAAuBqjD,YACzF,GAAKtqF,EAEL,MAAO,KACL29C,EAAaviC,QAASuvB,MAAM+hC,YAAY,2BAA6B,GAAE1sE,MAAU,CAClF,GACD,GACD,CAAC29C,EAAcomB,GACpB,CLkpBEwmB,CAAe19C,GAAKk3B,IAEpB,MAAMymB,GAAsBhpB,EAEtBipB,IAAe3jD,EAAAA,GAAAA,IAAiB4jD,IACpC,MAAMC,EAAarG,GAAiBlpE,QAE9BwvE,EAAYF,EAAMG,YAAY5qF,OAGpC,GAFAqkF,GAAiBlpE,QAAUwvE,GAEvBE,EAAAA,GAAAA,QAAwBH,GAAcC,GAAaD,EAAY,OAEnE,MAAMxiB,EAAYuiB,EAAMhtB,OAAOzC,QAAwB,gBACvD,IAAKkN,EAAW,QAEhB4iB,EAAAA,GAAAA,IA1Z8B,KA4Z9B,MAAMC,EAAaJ,EAAYD,GACzB,aAAEM,EAAY,aAAEC,EAAY,UAAEC,GAAchjB,EACtB9vE,KAAKwK,MAAMqoF,EAAeC,EAAYF,GACfD,GAjajB,GAoahCz2F,IACF,IAGI62F,IAAkBzuB,EAAAA,GAAAA,GAAqB8tB,GAAc,CAACA,IAva1C,KAuasE,IAExFY,EAAAA,GAAAA,GAAkBx+C,GAAKu+C,IAAkBZ,KAEzCzjD,EAAAA,EAAAA,KAAU,KACR,MAAMukD,EAAejH,GAAgBjpE,QACjCinE,IAAqBiJ,IAAgBC,EAAAA,GAAAA,GAAoBD,IAC3DlH,GAAsB,CAAE10F,WAAY,CAACkC,KACvC,GACC,CAACywF,GAAmBzwF,GAAWwyF,KAElC,IACIoH,GACAC,GACAC,GAHA/gD,GAAQ,GAIRghD,IAAiB,EACrB,MAAMzQ,IAAc5wC,EAAAA,EAAAA,KAAQ,IACnBioB,GACHuD,GAAqBxB,GAAOpiE,QAAQkiE,IAAcliE,QAAQmiE,GAAYrO,EAAQ/Z,SAC9E7gD,GACH,CAACmnE,GAAS+B,GAAOF,GAAaC,EAAWrO,EAAO/Z,KAE7C2/C,GAAex3B,GAAc,GAAK,EACxC,IAAK7B,KAAYjuC,IAAS8Z,IAASjT,IAASuX,eAAgB,CAC1D,IAAI1iC,EACJ,GAAIskB,GACFtkB,EAAQm0D,GAAyBhkE,EAASikE,GAAaC,EAAWpoB,IAAUjsC,WACvE,GAAIo+B,GAEPp+B,EADEo+B,GAAMyrD,QACAvN,GAAAA,GAEAnoB,GAAyBhkE,EAASikE,GAAaC,EAAWpoB,IAAUjsC,WAEzE,GAAImrB,IAASuX,eAClBvX,GAAQuX,cAAc1iC,OAASmrB,GAAQuX,cAAcziC,OACpD,CACD,MAAQD,MAAO6rF,EAAc5rF,OAAQ6rF,GAAkB3gE,GAAQuX,cAC/D1iC,GAAQ+rF,EAAAA,GAAAA,IAAmC,CACzC/rF,MAAO6rF,EACP5rF,OAAQ6rF,EACRE,eAAgB13B,GAChBF,eACAC,YACApoB,cACCjsC,KACL,CAEIA,IACEA,GAAS+oF,GAAgCp1B,GAAgCC,MAC3E83B,GAAe1rF,GAEjBwrF,GAAkBnzF,KAAKC,IAAI07D,GAAiB9hE,QAAQ22F,IAAcE,IAAgC/oF,GAC9FmrB,IAASuX,eAAiB8oD,GAAkBxrF,EA/dnB,KAge3B2rF,IAAiB,GAGvB,MAAWzQ,KACTsQ,GAAkBnzF,KAAKC,IACrB07D,GAAiB9hE,QAAQ22F,IAAcE,IAAgC7N,GAAY3gB,eAAev6D,OAEhGwrF,GAAkBtQ,GAAY3gB,eAAev6D,MAvelB,KAwe7B2rF,IAAiB,IAIrB,GAAIH,GACF7gD,GAAS,UAAS6gD,GAAkBI,OACpCH,GAAoBD,GAAkBrL,QACjC,GAAI1jF,KAAYspF,GAAc,CACnC,MAAM,MAAE/lF,IAAUymE,EAAAA,GAAAA,IAAqBhqE,GAASwvC,IAChDtB,GAAS,UAAS3qC,EAAQ4rF,OAC1BH,GAAoBzrF,EAAQmgF,EAC9B,CAoBA,SAAShvF,GAAkB86F,GACzB,OACErkD,EAAAA,GAAAA,cAACskD,GAAAA,EAAW,CACV/7F,QAASA,EACTm4F,eAAgB1F,GAA+BkG,QAAwB19F,EACvE6gG,eAAgBA,EAChBhC,UAAWA,GACXtI,UAAWA,GACX7lB,YAAaA,EACb8F,8BAA+BA,EAC/BC,8BAA+BA,EAC/BsqB,sBAAuBnH,IAG7B,CAEA,SAAS/gB,KACP,GAAKnrC,GAEL,OACE8O,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,iBAAkB0xB,KAA2BnvE,IAAmB,WAC1Fs8C,QAAS20B,GACTpxB,IAAKmvB,IAELp0B,EAAAA,GAAAA,cAAC42C,GAAAA,EAAmB,CAClBtoD,SAAU4C,GACViR,KAAMm2C,GACNhpD,mBAAoBA,GACpBkuC,oBAAqBvD,IAI7B,CAEA,SAASuqB,KACP,MAAMC,EACJzkD,EAAAA,GAAAA,cAAC0kD,GAAW,CACVn8F,QAASA,EACTgf,SAAUA,GACV+0D,UAAWA,EACX9sD,kBAAmBA,GACnB0sD,eAAgBA,EAChBC,UAAWA,GACXC,mBAA0C,WAAtBmmB,GACpBlmB,0BACEglB,IAAqD,YAA1BmB,GAAsCnmB,QAA4B74E,EAE/F8rC,mBAAoBA,GACpBitC,aAAcjyE,QAAQ0wF,GAA+BkG,QAAwB19F,GAC7Ek+C,QAASo9C,GACTtiB,mBAAoBuiB,GACpBtiB,aAAcuiB,KAIlB,MAA0B,WAAtBuD,GACKkC,EAIPzkD,EAAAA,GAAAA,cAAC2kD,GAAS,CACRv/F,gBAAiBA,GACjBmD,QAASiyF,GACTrD,aAAcsN,EACdn1D,mBAAoBA,GACpBmmD,eAAgBA,GAChBjY,oBAAqBvD,EACrBmd,iBAAkB1hC,GAClBgrB,YAAaub,IAGnB,CA4VA,MAAM2I,GAAgBhzD,IAAW46B,GAAcjkE,EAAQk6F,qBAAkBj/F,EACnEqhG,IAAeniD,EAAAA,EAAAA,KAAQ,IAAMs2C,GAAelpF,MAAMg1F,GAAMA,EAAE5wF,YAAW,CAAC8kF,IAE5E,OACEh5C,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,GACL1gD,IAAIy2E,EAAAA,EAAAA,IAAiBzyE,EAAQhE,IAC7B+uB,UAAW2sE,GACX,kBAAiBj2F,GACjBuvD,YAAaL,GACbxX,QAASuX,GACT+H,cAAehB,GACf+kC,cAAe5uB,GACfvkB,aAAcgsC,GAA2BjnB,QAAgCnzE,EACzEwhG,YAAa3D,GAA0BvsB,QAAkBtxE,EACzDquD,aAAewvC,IAA2BzD,GAA4B1sC,QAAmB1tD,GAEzFw8C,EAAAA,GAAAA,cAAA,OACEiF,IAAKw3C,GACLnpE,UAAU,gBACV,kBAAiBtpB,GACjB,uBAAsBo0D,EAAQA,EAAM/1D,SAAS+1D,EAAM/1D,SAASvF,OAAS,GAAGyB,QAAKf,EAC7E,qBAAoB46D,EAAQA,EAAMkN,YAAY/mE,QAAKf,EACnD,0BAAyB+E,EAAQqrC,uBAAoBpwC,EACrD,2BAA0Bi3F,SAAqBj3F,EAC/C,iBAAgB+jB,SAAY/jB,EAC5B,gCAA4CA,IAAlB+E,EAAQ8mB,SAElCghB,GACA2P,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,0BACZsuC,IAAc5hB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,sBAG/BolE,GACC14C,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,sCAAuCu4C,IAAmB,eACpF15C,QAAS69C,IAERnE,IACCp7C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,sBAIlBmlE,GAjeL,WACE,MAAMwM,EAAmB3G,KAAcp+D,EAAAA,EAAAA,IAASo+D,GAAW/5F,IACrDwrF,EAAcuO,IAAc2G,EAAoB3G,QAAwB96F,EACxEwsF,EAAcsO,KAAe2G,EAAoB3G,QAAwB96F,EACzE0hG,GAAe5G,IAAc5yB,GAAeA,GAAYE,oBAAiBpoE,EAE/E,OACEw8C,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CACLt2B,KAAMkC,GAAW,eAAiB,QAClC59B,KAAMspE,EACNx+E,KAAMy+E,EACNppF,KAAMs+F,EACN7oE,aAAcA,GACdqlB,QAAUquC,GAAcC,EAAcwO,QAAoBh7F,GAGhE,CAidmB2hG,GACfnlD,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,0BAA2By+C,GAAiB9zF,SAAS,SAAW,oBAE1FwyC,EAAAA,GAAAA,cAAA,OACE1sB,UAAWguE,GACXv+C,MAAOA,GACPnB,IAAI,QAEH4qB,KAAgBmxB,IACf39C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iBACZtrB,GAAK,oBACL48F,IAAiB5kD,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAAcsuB,IAAI,QAAQgjD,KAjZxE,WACE,MAAMtxE,GAAYuvB,EAAAA,GAAAA,GAChB,gBACA2pB,IAAe,oBACf2xB,IAAgB,iBAChB4F,IAAkB,oBAEd1Q,EAAoBiJ,IAAkBjwB,KAAYG,KAAgB40B,GAClEgE,GAAmBviD,EAAAA,GAAAA,GACvB,eACA,WACiB,YAAjBy/C,IAA8B,YAC9BpmB,GAAkB,sBAGpB,OACEl8B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWA,EAAWyxE,cAAe3uB,GAA0Bx0B,IAAI,QA+P5E,WAME,GAJuBw7C,KAAkBzlF,MACtC6gF,MAFW97D,IAAS8Z,IAAStV,KAEAw5D,KAAkBluB,IAAe70D,IAAYwhF,IACvEwE,IAA+BV,IAAYG,GAG/C,OAGF,IAAIthB,EACAupB,GACA9G,IAAgBnB,IAAiBzlF,GAM1B+zD,IAAaE,iBACtBkQ,EAAcpQ,GAAYE,iBAN1BkQ,GAAc3yE,EAAAA,EAAAA,IAAenB,GAAMu2F,IAE9B/xB,IAAgBE,KACnB24B,EAAe,UAAQtpB,EAAAA,EAAAA,IAAgBwiB,QAK3C,MAAM+G,EAAoB/G,IAAc,gBAAiBA,IAAcA,GAAWj+D,YAC5EilE,EAAkBhH,IAAc,cAAeA,IAAcA,GAAWlrE,UAE9E,OACE2sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBAAgBsuB,IAAI,OAChCk6B,EACC97B,EAAAA,GAAAA,cAAA,QACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,iCAAkCwiD,GAC5D3jD,QAAS+8C,GACT78C,IAAI,QAEHqY,EAAAA,GAAAA,GAAW6hB,IACVtP,IAAe84B,GACftlD,EAAAA,GAAAA,cAACgD,GAAAA,EAAW,CACV7tC,WAAYmwF,EAAkBnwF,WAC9BgwC,UAAWC,EAAAA,IACX40B,8BAA+BA,EAC/BC,8BAA+BA,KAGjCzN,KAAgB84B,GAAqBC,GAAmBvlD,EAAAA,GAAAA,cAACqF,GAAAA,EAAW,MACrEk5C,IAAYiH,UAAYxlD,EAAAA,GAAAA,cAACylD,GAAAA,EAAQ,CAACD,SAAUjH,GAAWiH,YAEvDr/D,OAED3iC,EAp5BC,IAq5BJ2iC,GACC6Z,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,OAAOtrB,GAAK,WAC5Bg4C,EAAAA,GAAAA,cAAA,QACE1sB,UAAU,cACVouB,QAASg9C,KAERzkC,EAAAA,GAAAA,GAAY,IAAG9zB,EAAUE,UAAW,GAAG1V,cAI7C+6C,IAAa+xB,oBACZz9C,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAAcsuB,IAAI,QAAQ55C,GAAK,mBAC7CO,EAAQmjE,aAAa+2B,iBAAmB7wD,IAAW46B,GACrDxsB,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAAcsuB,IAAI,QAAQr5C,EAAQmjE,aAAa+2B,iBAC7Dl6F,EAAQk6F,iBAAmB7wD,KAAY46B,GACzCxsB,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAAcsuB,IAAI,QAAQr5C,EAAQk6F,kBAChDlJ,IAAsB/sB,IAAgB70D,QAMtCnU,EALFw8C,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAAcsuB,IAAI,QAC/B23C,GAAkB7hC,aAAe1vD,GAChCuxF,GAAkBhkD,QAAU,uBAAyB,yBAMjE,CAvUOmwD,GACAvH,IACCn+C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,qBACZonE,IACC16C,EAAAA,GAAAA,cAAC2lD,GAAS,CACR18E,MAAO0xE,GACPj5C,QAAS89C,GACTlsE,UAAU,kBAGb2pE,IACCj9C,EAAAA,GAAAA,cAAC4lD,GAAe,CACdr9F,QAAS2b,EACTu3D,aAAc/O,IAAShX,GACvBwe,YAAaA,EACblrE,OAAQ2wF,EACR3f,8BAA+BA,EAC/BC,8BAA+BA,EAC/Bv4B,QAASi9C,MAKhB9pF,IACCmrC,EAAAA,GAAAA,cAAC6lD,GAAO,CACNt9F,QAASA,EACTi1E,oBAAqBxD,EACrBC,8BAA+BA,EAC/BwD,WAAYge,GACZp/D,aAAcA,GACdqhD,iBACE7oE,GAAQkpE,YACNjE,GAAqBtmD,SAAWxpB,IAAa8vE,GAAqBtmD,SAC/D5M,UACFpjB,EACLm6E,WAAYue,GACZte,aAAckf,GACdjf,aAAckf,KAGjBO,IAAoBnD,IACnBn6C,EAAAA,GAAAA,cAAC8lD,GAAmB,CAClB3kB,cAAegZ,GACfzZ,YAAawb,KAAsBh8D,EAAAA,EAAAA,IAAS98B,IAC5CspE,MAAOA,GACP8Q,oBAAqBxD,EACrB39C,aAAcA,GACd0kD,iBAAkBn6D,GAClB5c,UAAWA,GACX5G,OAAQA,GACRysC,wBAAyBA,KAG5BytD,IAAoBpD,IACnBl6C,EAAAA,GAAAA,cAAC+lD,GAAa,CACZ38F,MAAO8wF,GACPxZ,YAAawb,KAAsBh8D,EAAAA,EAAAA,IAAS98B,IAC5CspE,MAAOA,GACP8Q,oBAAqBxD,EACrB39C,aAAcA,GACd0kD,iBAAkBn6D,GAClB5c,UAAWA,GACX5G,OAAQA,GACRysC,wBAAyBA,KAG5B86B,IACC3qB,EAAAA,GAAAA,cAACgmD,GAAK,CACJ5nC,MAAOA,EACPk1B,YAAaA,GACb9V,oBAAqBxD,EACrBtN,MAAOA,GACPwH,YAAaA,EACbmf,kBAAmBA,EACnBh3D,aAAcA,GACd4vD,aAAc4S,KAGjB7gD,IACCgC,EAAAA,GAAAA,cAACimD,GAAgB,CACf19F,QAASA,EACTy1C,UAAWA,GACX56C,OAAQA,MAGVunE,IAAWjuC,IACXsjB,EAAAA,GAAAA,cAACgtC,GAAK,CACJzkF,QAASA,EACTi1E,oBAAqBxD,EACrBvN,UAAWA,EACX6V,YAAauP,GACbtP,eAAgBA,EAChBE,qBAAsB4Q,EACtB3Q,cAAeA,GACfxO,YAAaA,EACb1H,YAAaA,GACb7nC,MAAOA,EACP69C,YAAashB,GACbpiD,QAAS2qC,GACT1J,eAAgB8Q,MAGlB9oB,IAAWn0B,IAASA,GAAMyrD,SAC1BjiD,EAAAA,GAAAA,cAACkmD,GAAU,CACT39F,QAASA,EACTi1E,oBAAqBxD,EACrBsI,YAAauP,GACbx1D,aAAcA,GACdqmD,cAAeA,MAGjB/X,IAAWn0B,KAAUA,GAAMyrD,SAC3BjiD,EAAAA,GAAAA,cAACktC,GAAK,CACJ3kF,QAASA,EACTyxE,8BAA+BA,EAC/BC,8BAA+BA,EAC/BuI,YAAashB,GACbr3B,UAAWA,EACX6V,YAAauP,GACb3M,YAAaqW,GACbhZ,eAAgBA,EAChBlmD,aAAcA,GACdqmD,cAAeA,GACfxO,YAAaA,EACb1H,YAAaA,GACb9qB,QAAS2qC,GACT1J,eAAgB8Q,MAGlBj2B,IAASvuC,KACT+wB,EAAAA,GAAAA,cAACogC,GAAAA,GAAK,CACJz7C,MAAOA,EACPp8B,QAASA,EACT+C,OAAQ66F,EAAAA,GAAAA,OACR5jB,eAAgBA,EAChBlmD,aAAcA,GACd+pE,aAAc/1D,EACduxB,WAAYA,GACZ6K,UAAWA,EACX45B,OAAQzH,GACR0H,aAAar3E,IAAWy9C,KAAS1H,OAAoCxhE,EAAlBy7F,GACnDtc,eAAgB8Q,GAChB/Q,cAAeA,GACfiZ,eAAgBA,EAChBgB,sBAAuBA,GACvB4J,cAAej8F,QAAQsxF,GACvB3wE,qBAAsBA,GACtBzc,aAAc0lE,EACdsyB,oBAAqB5J,GACrB6J,cAAepzE,IAGlBngB,IACC8sC,EAAAA,GAAAA,cAAC0mD,GAAAA,EAAQ,CACPn+F,QAASA,EACTi1E,oBAAqBxD,EACrBsI,YAAauP,GACb2J,sBAAuBA,GACvBjZ,eAAgBA,EAChB6jB,aAAc/1D,EACduxB,WAAYA,GACZqqB,aAAcI,GACd1J,eAAgB8Q,GAChB/Q,cAAeA,KAGlBqE,IACC/mC,EAAAA,GAAAA,cAAC2mD,GAAO,CAAC5f,QAASA,KAEnBv9D,IACCw2B,EAAAA,GAAAA,cAAC4mD,GAAI,CAACr+F,QAASA,EAASihB,KAAMA,GAAMg/D,WAAY0W,KAEjDpN,IACC9xC,EAAAA,GAAAA,cAAC6mD,GAAI,CACHt+F,QAASA,EACTspF,iBAAkBA,GAClBx1D,aAAcA,KAGjBkH,IAASuX,eACRkF,EAAAA,GAAAA,cAAC8mD,GAAmB,CAClBv+F,QAASA,EACT8zB,aAAcA,KAIjBgiE,IACCr+C,EAAAA,GAAAA,cAAA,KACE1sB,WAAWuvB,EAAAA,GAAAA,GACT,iBACC85C,IAAyB1xE,IAAwB,uBAEpD22B,IAAI,QAEF32B,GAAuBjjB,GAAK,qBAC5B2zF,GAAkBC,EAAkB57C,EAAAA,GAAAA,cAAC+mD,GAAAA,EAAY,CAAC52F,QAASyrF,IAAsBA,IAKrF0B,IAAoBjxB,IACpBrsB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAW8xE,EAAkBxjD,IAAI,QACnCr4C,KACAk3F,IACCzgD,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,yBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBACZ/pB,IAAkB,KAIP,YAAjB+4F,IAA8BkC,MAIlCrY,IACCnsC,EAAAA,GAAAA,cAACgnD,GAAO,CACNz+F,QAASA,EACTi1E,oBAAqBxD,EACrBvN,UAAWA,EACX6V,YAAauP,GACb3M,YAAaqW,GACb/uB,YAAaA,GACbnwC,aAAcA,GACdqmD,cAAeA,GACfxO,YAAaA,EACbvvC,MAAOA,EACPsnD,aAAcI,GACdH,sBAAuBuH,KAG1BlwD,KAAYA,GAAQuX,eACnBkF,EAAAA,GAAAA,cAACinD,GAAO,CACN1+F,QAASA,EACTk6E,qBAAsB4Q,EACtBrf,eAAgBA,GAChBpS,WAAYA,GACZj9B,MAAOA,EACP69C,YAAashB,KAGhB5iE,IACC8e,EAAAA,GAAAA,cAACknD,GAAQ,CACP3+F,QAASA,EACT8zB,aAAcA,GACd23C,eAAgBA,GAChBpS,WAAYA,GACZj9B,MAAOA,EACPnc,KAAMxf,IAKhB,CAuISusD,IACCqoC,IAA6C,eAAjB0E,IAAiCkC,KAC9D3G,IAAuBC,GACtB99C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,UAAU,wBACVyuB,MAAM,oBACN9mC,OAAK,EACLknC,KAAK,OACL0F,UAAW7/C,GAAK,2BAChB05C,QAASg3C,EAAwByG,GAAqBC,IAEtDp/C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,4BAEbuqE,IAAuBG,GACzBh+C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,UAAU,wBACVyuB,MAAM,oBACN9mC,OAAK,EACLknC,KAAK,OACL0F,UAAU,gBACVnG,QAAS45C,GAAe+D,GAAcC,IAEtCt/C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,gCAEb9vB,EACH49F,IAAqBphD,EAAAA,GAAAA,cAACmnD,GAAa,CAACrsE,WAAYtL,GAAoB6xC,SAAUg7B,IAC9E8F,IACCniD,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eAAeu9D,wBAAyBnkB,GAAQ0rB,GAAeC,KAE/EgJ,IAAqD,eAA1BmB,IAA0CnmB,MAEvE9zE,EAAQsjE,eACP7rB,EAAAA,GAAAA,cAAConD,GAAa,CAAC7+F,QAASA,EAASm5C,QAASoW,KAErB,YAAtByqC,IACCviD,EAAAA,GAAAA,cAAC2kD,GAAS,CACRp8F,QAASiyF,GACTtD,WAAS,EACTvoB,SAAUk1B,GACVz+F,gBAAiBA,GACjBkqC,mBAAoBA,GACpBmmD,eAAgBA,GAChBjY,oBAAqBvD,EACrBmd,iBAAkB1hC,GAClBgrB,YAAaub,MAIlBlhB,IACC/6B,EAAAA,GAAAA,cAACq3B,GAAoB,CACnBpyE,OAAQ66D,GACRyb,OAAQR,GACRssB,WAAYrK,IAAmB9mB,QAAQ,WAAc8mB,GAAwC3pF,UAAO7P,EACpG+E,QAASA,EACT61D,MAAOA,EACPymC,aAAcA,IAAcl0E,SAC5B5oB,gBAAiBA,GACjBy9C,QAASya,GACTzN,oBAAqB0N,GACrB1wC,kBAAmBA,GACnB8sD,UAAWA,EACX4jB,iBAAkBA,KAGlB,KM5yCV,IAAevgD,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,OAAE36C,GAAW26C,EACb0nD,GAAgBxnD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB96C,GAGvE,OAAOqiG,EAAgBtnD,EAAAA,GAAAA,cAACsnD,EAAkB1nD,QAAYp8C,CAAS,ICKjE,IAAem8C,EAAAA,EAAAA,KAVkDC,IAC/D,MAAM,OAAE36C,GAAW26C,EACb2nD,GAAuCznD,EAAAA,GAAAA,GAC3CC,GAAAA,GAAAA,MAAe,wCAAyC96C,GAI1D,OAAOsiG,EAAuCvnD,EAAAA,GAAAA,cAACunD,EAAyC3nD,QAAYp8C,CAAS,ICuJ/G,IAAem8C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAA6B,IAA3B,OAAEvN,GAAQuN,EACjB,MAAMpI,GAAUqjB,EAAAA,EAAAA,IAAuBjpB,EAAQS,IACvCA,OAAQyK,EAAU,MAAE25F,GAAUj/F,GAAW,CAAC,EAElD,MAAO,CACLA,UACAm5B,IAAK7zB,GAAc25F,GAAQ9gF,EAAAA,EAAAA,IAAW/jB,EAAQkL,QAAcrK,EAC5DikG,SAAUD,GAAS35F,GAAanI,EAAAA,EAAAA,IAAW/C,EAAQkL,QAAcrK,EAClE,GATe8/C,EA5HgCvgD,IAM9C,IAN+C,OACnDK,EAAM,QACNmF,EAAO,aACPwtD,EAAY,IACZr0B,EAAG,QACH+lE,GACD1kG,EACC,MAAM,qBACJ2kG,EAAoB,SACpB/gG,EAAQ,iBACRghG,EAAgB,SAChBC,EAAQ,aACRv8F,IACEwQ,EAAAA,EAAAA,MACE7T,GAAO25C,EAAAA,GAAAA,KAEPsD,GAAMvB,EAAAA,EAAAA,IAAuB,MAE7BmkD,GAAankD,EAAAA,EAAAA,IAAuB,MACpCokD,EAAgBx9F,QAAQ/B,IAE5Bw/F,QAASvqB,IACPwqB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlyC,EACTmyC,WA1B6B,IA2B7B9H,UAAW,KAEP,kBACJtgC,EAAiB,oBAAEib,EAAmB,wBACtChb,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlb,EAAK91C,EAAAA,IAAc,EAAMsxB,EAAAA,KAC7C0nE,EAAqBC,EAAmBC,IAAsBvkD,EAAAA,GAAAA,IAAQ,IAE7E3E,EAAAA,EAAAA,KAAU,IACD2oD,EAAgBtqB,EAAoBqqB,EAAWr0E,SAAWsiD,IAC3DA,EAAO6F,gBACT+rB,EAAqB,CAAEtkG,UACzB,SACGI,GACJ,CAACJ,EAAQ0kG,EAAetqB,EAAqBkqB,IAEhD,MAKMzuC,GAAc/Z,EAAAA,GAAAA,IAAgB,KAC7B32C,IACDA,EAAQ+/F,eACVX,EAAiB,CAAE3yF,KAAMzM,EAAQ+/F,iBACxB//F,EAAQs3F,cACjBx0F,EAAa,CAAEjI,OAAQmF,EAAQnF,OAAS4G,UAAWzB,EAAQs3F,iBAE3Dl5F,EAAS,CAAEpC,GAAIgE,EAAQnF,SAEnBmF,EAAQq+B,YACVghE,EAAS,CACPlwF,MAAOnP,EAAQnF,OACfsjC,MAAOn+B,EAAQq+B,cAGrB,IAGF,GAAKr+B,EAIL,OACEy3C,EAAAA,GAAAA,cAAA,OACEiF,IAAKA,EACLzI,IAAI,oBACJlpB,UAAU,gCACVimC,YAhCqB3kD,KACvBihE,EAAAA,GAAAA,GAAwBjhE,GACxBmrD,EAAwBnrD,EAAE,EA+BxBosD,cAAehB,GAEfhgB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kDAAkDsuB,IAAI,QACnE5B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBAAgBsuB,IAAI,QACjC5B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBAAgBsuB,IAAI,OAChClgB,IAAOu4B,EAAAA,GAAAA,IAAWtsC,EAAAA,EAAAA,IAAgB+T,IAAQ,IAC1C+lE,IAAWxtC,EAAAA,GAAAA,GAAW1xD,EAAQggG,kBAAmBhtF,EAAAA,EAAAA,GAAavT,EAAMy/F,IAAY,KAGnFznD,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,yBAAyBsuB,IAAI,OAAOqD,IAAK4iD,GACtD7nD,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,qBAAqBsuB,IAAI,SACtCwpC,EAAAA,GAAAA,GAAuB,CACtBxkF,KAAM2B,EAAQ3B,KAAKA,KACnBye,SAAU9c,EAAQ3B,KAAKye,YAI3B26B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,cAAcsuB,IAAI,OAChC5B,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,qBACb/qB,EAAQigG,cAAgBxgG,EAAK,4BAA8BA,EAAK,uBAKvEg4C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CAACH,MAAM,YAAYI,KAAK,OAAO+C,QAAM,EAACxD,QAASuX,EAAa3lC,UAAU,4BAC1EtrB,EAAKO,EAAQi/F,MACV,uBACCj/F,EAAQs3F,cAAgB,wBAA0B,+BAI5D9kB,GACC/6B,EAAAA,GAAAA,cAACunD,GAAoC,CACnCtiG,OAAQ66D,EACRyb,OAAQR,EACRxyE,QAASA,EACTkgG,WAAYL,EACZ5iD,QAASya,EACTzN,oBAAqB0N,IAGzBlgB,EAAAA,GAAAA,cAACsnD,GAAa,CACZriG,OAAQkjG,EACR3iD,QAAS6iD,IAEP,KCwIV,IAAe1oD,EAAAA,EAAAA,KA9O0B58C,IA0BnC,IA1BoC,qBACxC+mB,EAAoB,OACpB1mB,EAAM,SACNC,EAAQ,WACRyE,EAAU,cACV4gG,EAAa,mBACbC,EAAkB,iBAClBC,EAAgB,SAChB53F,EAAQ,WACRw0D,EAAU,UACVqjC,EAAS,cACTC,EAAa,UACbr8B,EAAS,aACT1W,EAAY,YACZgzC,EAAW,6BACXC,EAA4B,qBAC5BlvB,EAAoB,KACpBr1E,EAAI,QACJihE,EAAO,mBACP8zB,EAAkB,cAClBuC,EAAa,WACbkN,EAAU,sBACV1uB,EAAqB,YACrB2uB,EAAW,cACXC,EAAa,2BACbjvB,GACDn3E,EACC,MAAM,oBAAEqmG,IAAwBvtF,EAAAA,EAAAA,OAE1B,8BACJk+D,EAA6B,8BAC7BC,EAA6B,8BAC7BC,GpD7EW,SACbx1E,EACAsxD,EACA+jB,EACAI,EACA92E,GAEA,MAAM,oBACJ01C,EAAmB,iBAAEuwD,EAAgB,sBAAE7M,EAAqB,0BAC5D8M,IACEztF,EAAAA,EAAAA,OAEE,SAAEwoC,IAAaC,EAAAA,EAAAA,MACfilD,EAAkCllD,EAAW,IAAM,KAGvD0jD,QAAShuB,EAA+ByvB,OAAQC,EAAkBC,SAAUC,IAC1E3B,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlyC,EACT6zC,WAtBsC,MAuBpCj/E,IACF,GAAa,WAATlmB,EACF,OAGF,IAAI+L,EAAQ,EACZ,MAAMq5F,EAAuB,GACvBC,EAAwB,GACxBC,EAAmC,GACnC1vB,EAAsC,GACtC2vB,EAAmC,GACzC,IAAIv6D,GAAa,EAEjB9kB,EAAQlc,SAASq0F,IACf,MAAM,eACJnnB,EAAc,OAAE7F,EAAM,mBAAEm0B,EAAkB,WAAEC,GAC1CpH,GAEE,QAAEqH,GAAYr0B,EACd9rE,EAAYgB,OAAOm/F,EAAQh/F,eAAiBg/F,EAAQngG,WACpDogG,EAAkD,SAA9BD,EAAQC,kBAC5BC,EAAcF,EAAQE,YAAcr/F,OAAOm/F,EAAQE,kBAAe7mG,EAEnEm4E,GAUD3xE,EAAYwG,IACdA,EAAQxG,GAGNmgG,EAAQv2D,kBACVi2D,EAAW3gG,KAAKc,GAGdmgG,EAAQ1P,mBACVqP,EAAY5gG,KAAKc,GAGfmgG,EAAQ5iF,UACVwiF,EAAuB7gG,KAAKmhG,GAAergG,GAGzCogG,GACFJ,EAAuB9gG,KAAKmhG,GAAergG,IA1BvCmgG,EAAQ5iF,WACN2iF,GAAcD,EAAmBK,OAASJ,EAAWhyF,MACvDu3B,GAAa,GAEf4qC,EAA0BnxE,KAAKmhG,GAAergG,GAuBlD,IAGE8vE,EAAqBtmD,SAAWhjB,GAASspE,EAAqBtmD,SAChEslB,EAAoB,CAAEtoC,UAGpBq5F,EAAW/mG,QACbumG,EAAiB,CAAEvhG,WAAY+hG,IAG7BC,EAAYhnG,QACd05F,EAAsB,CAAE10F,WAAYgiG,KAGlCC,EAAuBjnG,QAAUu3E,EAA0Bv3E,SAC7Do3E,EAA2B,CAAE6vB,yBAAwB1vB,4BAA2B5qC,eAG9Eu6D,EAAuBlnG,QACzBwmG,EAA0B,CAAElmG,SAAQ4J,IAAKg9F,GAC3C,KAGFO,EAAAA,GAAAA,GAAkBd,EAAkBE,GAEpC,MACE5B,QAAS/tB,IACPguB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlyC,EACT6zC,WAAY99B,GACZ0+B,OAAQjB,KAGFxB,QAAS9tB,IAAkC+tB,EAAAA,GAAAA,IAAwB,CACzEC,QAASlyC,EACT6zC,WAAY99B,KAGd,MAAO,CACLiO,gCACAC,gCACAC,gCAEJ,CoDrCMwwB,CAAoBhmG,EAAMsxD,EAAc+jB,EAAsBI,EAA4B92E,IAExF,oBACJsnG,EAAmB,oBACnBC,EAAmB,mBACnBC,EAAkB,cAClBC,GC1EW,SACbpmG,EACAsxD,EACAjuD,EACA6gG,EACAC,EACA53F,EACAk4F,EACAC,EACAzjC,GAEA,MAAM,qBAAE/3D,IAAyBkO,EAAAA,EAAAA,OAE1BivF,EAAmBC,IAAoBroD,EAAAA,EAAAA,KAC5C,IAAgB,WAATj+C,EAAoB,EACzBkP,EAAAA,EAAAA,KAAS,IAAMhG,EAAqB,CAAED,UAAWuS,EAAAA,GAAAA,aAAgC,KAAM,GAAM,IAC7FtM,EAAAA,EAAAA,KAAS,IAAMhG,EAAqB,CAAED,UAAWuS,EAAAA,GAAAA,YAA+B,KAAM,GAAM,IAC1F,IAEJ,CAACtS,EAAsB7F,IAInB6iG,GAAsBjnD,EAAAA,EAAAA,IAAuB,MAE7CknD,GAAqBlnD,EAAAA,EAAAA,IAAuB,MAE5CmnD,GAAgBnnD,EAAAA,EAAAA,IAAuB,MAEvCsnD,GAAoB9rD,EAAAA,GAAAA,IAAgB,KACxC,IAAKwmB,EAAS,OAEd,IAAK59D,GAAYhF,OAGf,OAFAomG,GAAY,QACZC,GAAc,GAIhB,IAAKP,EAGH,OAFAM,GAAY,QACZC,GAAc,GAIhB,MAAM5oB,EAAYxqB,EAAaviC,QAC/B,IAAK+sD,EACH,OAGF,MAAM,aAAE8iB,EAAY,aAAEC,EAAY,UAAEC,GAAchjB,EAC5C0qB,EAAex6F,KAAKwK,MAAMqoF,EAAeC,EAAYF,GAErD6H,EAAaD,GAxDC,EA0DC,IAAjB3H,IAEJ4F,EAAYl4F,GAAYk6F,IALHD,GAxDH,KA8DlB9B,GAAe+B,GAAW,KAI1BnD,QAASoD,IACPnD,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlyC,EACTy0C,OAAQY,EAAAA,KACNzgF,IACGogF,GAAqBD,KAKEO,EAAAA,EAAAA,IAAiBvjG,EAAW,KAKxD6iB,EAAQlc,SAAQ1L,IAAgC,IAA/B,eAAE44E,EAAc,OAAE7F,GAAQ/yE,EACpC44E,IAEoB,sBAArB7F,EAAOxiD,WACTw3E,IAGuB,qBAArBh1B,EAAOxiD,WACTy3E,IACF,IACA,IAGEL,EAAsB5iG,GAAcA,EAAWhF,OAAS,GAE9Ds3E,EAAAA,GAAAA,IAAeuwB,EAAqBD,EAAsBS,OAAgC3nG,IAC1F42E,EAAAA,GAAAA,IAAewwB,EAAoBF,EAAsBS,OAAgC3nG,GAEzF,MACEukG,QAASuD,EACT9B,OAAQ+B,EACR7B,SAAU8B,IACRxD,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlyC,EACTy0C,OAAQiB,IACRC,kBAAmBh4B,EAAAA,IAClBs3B,IAEH5wB,EAAAA,GAAAA,IAAeywB,EAAeS,GAE9B,MACEvD,QAAS4D,EACTnC,OAAQoC,EACRlC,SAAUmC,IACR7D,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlyC,EACTy0C,OApHoB,EAqHpBkB,kBAAmBh4B,EAAAA,IAClBs3B,IAEH5wB,EAAAA,GAAAA,IAAeywB,EAAec,IAE9BxsD,EAAAA,EAAAA,KAAU,KACJumB,GACFslC,GACF,GACC,CAACtlC,EAASslC,IAEb,MAAMc,GAAgB5sD,EAAAA,GAAAA,IAAgB,KACpCqsD,IACAK,IAEAz/F,YAAW,KACT0/F,IACAL,GAAgB,GApIO,IAqID,KAI1Bn2C,EAAAA,GAAAA,GAAcy2C,EAAe,CAACA,EAAehkG,IAG7C,MAAMikG,GAA8BC,EAAAA,GAAAA,IAAmBrD,EA7IvB,KAgJhC,OAFAsD,EAAAA,GAAAA,GAAgBH,EAAe,CAACA,EAAeC,IAExC,CACLrB,sBACAC,sBACAC,qBACAC,gBAEJ,CDxEMqB,CACFznG,EACAsxD,EACAjuD,EACA6gG,EACAC,EACA53F,EACAk4F,EACAC,EACAzjC,GAGI19D,GAAO25C,EAAAA,GAAAA,KAEPwqD,EACJnsD,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAzDS,iBAyD4B,wBAAyBrG,IAAI,mBAChFwD,EAAAA,GAAAA,cAAA,YAAOh4C,EAAK,oBAGVokG,EAAwB7xB,EAAwB,EAAImuB,EAAc5/F,QAAO,CAACC,EAAKsjG,IAC5EtjG,EAAMsjG,EAAajhC,aAAakhC,OAAOxpG,QAC7C,GACH,IAAIypG,EAAkB,EAEtB,MAAMC,GAAiB1jC,EAAAA,GAAAA,GAAYhhE,GAC7B2kG,EAAeniG,QACnBxC,GAAc0kG,GAAkB1kG,EAAWA,EAAWhF,OAAS,KAAO0pG,EAAeA,EAAe1pG,OAAS,IAGzGuoE,EAAaq9B,EAAcpgG,KAAI,CACnCokG,EACAC,EACAC,KAEA,MAAMxhC,EAAeshC,EAAUthC,aAAa9iE,KAAI,CAC9CukG,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAY/pG,SACR6nE,GAAQkiC,EAAY,MACrBv1D,EAAAA,EAAAA,IAAgBu1D,EAAY,MAC3BA,EAAY,GAAG18F,QAAQ6H,QAAQgmC,UACnC,CACA,MAAMz1C,EAAUskG,EAAY,GACtBjzB,EACJkzB,IAAqBC,EAAkBjqG,OAAS,GAC7C6pG,IAAmBC,EAAgB9pG,OAAS,EAGjD,OAAOoK,EAAAA,EAAAA,IAAQ,CACb3E,EAAQhE,KAAOykG,EAA6Bx1E,SAAW24E,EACvDnsD,EAAAA,GAAAA,cAACi8B,GAAa,CACZz/B,IAAKj0C,EAAQhE,GACbgE,QAASA,EACTlF,SAAUA,EACV0E,gBAAiBtD,EACjBo1E,cAAevvE,QAAQjH,GAAYA,IAAamB,EAAAA,IAChDu1E,8BAA+BA,EAC/BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/BH,qBAAsBA,EACtBH,gBAAiByyB,IAA0BG,EAC3Ct5B,YAAa2G,GAAgB6yB,EAC7B7yB,aAAcA,EACdM,2BAA4BA,KAGlC,CAEA,IAAI8yB,EAEJ,OAAOH,EAAYvkG,KAAI,CACrBsiE,EACAqiC,KAEA,MAAM1kG,EAAUoiE,GAAQC,GAAkBA,EAAeU,YAAcV,EACjExM,EAAQuM,GAAQC,GAAkBA,OAAiBpnE,EACnDkpE,GAAQC,EAAAA,EAAAA,IAAapkE,GACrB2kG,EAAiBviC,GAAQC,GACzBY,EAAcqhC,EAAYI,EAAe,GAE3C1kG,EAAQuI,iBAAmBi4F,EAAYv1E,WAAYwnD,EAAAA,EAAAA,IAAiBzyE,EAAQuI,mBAC9Ei4F,EAAYv1E,SAAUwnD,EAAAA,EAAAA,IAAiBzyE,EAAQhE,KAGjD,MAAM4oG,GAAmBD,GAAkB3kG,EAAQqE,UAAYrE,EAAQqE,eAAYpJ,EAC7E4pG,EAAsB5hC,IAAgBb,GAAQa,GAAeA,EAAY5+D,eAAYpJ,EAErF4D,EAAW,CACfuxF,eAAiC,IAAjBsU,EAChB3Q,cAAe2Q,IAAiBJ,EAAY/pG,OAAS,EACrDy5F,uBAAwBjyF,QAAQ6iG,GAAmBA,IAAoBH,GACvEtU,sBAAuBpuF,QAAQ6iG,GAAmBA,IAAoBC,GACtExzB,aACEqzB,IAAiBJ,EAAY/pG,OAAS,GACnCgqG,IAAqBC,EAAkBjqG,OAAS,GAChD6pG,IAAmBC,EAAgB9pG,OAAS,GAInDkqG,EAAyBG,EAEzB,MAAME,GAAahnF,EAAAA,EAAAA,IAAqB9d,GAElCi0C,GAAMlyB,EAAAA,EAAAA,IAA6B/hB,GAAY,GAAEA,EAAQ0H,QAAQo9F,IAAeA,EAEhFhR,GAA+B,IAAlBN,IAA4B+M,EAEzCwE,EAAoB/kG,EAAQhE,KAAOi1F,EAEzC,OAAOtsF,EAAAA,EAAAA,IAAQ,CACb3E,EAAQhE,KAAOykG,EAA6Bx1E,SAAW24E,EACvDnsD,EAAAA,GAAAA,cAACutD,GAAO,CACN/wD,IAAKA,EACLj0C,QAASA,EACT6zF,6BAA8BriB,EAC9BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/B7b,MAAOA,EACPqO,UAAWA,EACXgsB,WAAYrxF,EAASk1F,eAAiBuM,IAAcn8B,KAAW4gC,IAAsB9nC,GACrFgzB,eAAgBpxF,EAASuxF,gBAAkBkQ,IAAcn8B,EACzDrpE,SAAUA,EACV0E,gBAAiBtD,EACjB43F,WAAYA,EACZ/f,WAAY+f,GAAch5F,IAAamB,EAAAA,IAA2B,cAATC,EACzDk1E,gBAAiByyB,IAA0BG,EAC3Ct5B,YAAa7rE,EAASwyE,cAAgB6yB,EACtC9T,eAAgBvxF,EAASuxF,eACzB2D,cAAel1F,EAASk1F,cACxBC,uBAAwBn1F,EAASm1F,uBACjC7D,sBAAuBtxF,EAASsxF,sBAChC9e,aAAcxyE,EAASwyE,aACvBE,qBAAsBA,EACtBI,2BAA4BA,IAE9B3xE,EAAQhE,KAAOi1F,GACbx5C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,uBAAuBkpB,IAAI,sBACxCwD,EAAAA,GAAAA,cAAA,YAAOh4C,EAAK,wBAGhB,IACDskG,MAAM,IAGX,OACEtsD,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,qBACVkpB,IAAKkwD,EAAUxhC,SACf3R,YAAasc,GAAAA,EACb23B,eAAa,GAEbxtD,EAAAA,GAAAA,cAAA,OACE1sB,WAAWuvB,EAAAA,GAAAA,GAAe,eAAgBomD,GAAc,eACxDzsD,IAAI,cACJ+c,YAAasc,GAAAA,EACbn0B,QAAUunD,OAA6EzlG,EAAhE,IAAM4lG,EAAoB,CAAE7xF,WAAYm1F,EAAUxhC,YAEzElrB,EAAAA,GAAAA,cAAA,QAAM4B,IAAI,QACPqnD,GAAcyD,EAAUzhC,eAAiBwiC,EAAAA,KACxCzlG,EAAK,+BAENihG,GAAcyD,EAAUzhC,eAAiBwiC,EAAAA,KACxCzlG,EAAK,sBAAsB0lG,EAAAA,GAAAA,IAAgB1lG,EAAM0kG,EAAUxhC,cAAU1nE,GAAW,KAEhFylG,IAAcyE,EAAAA,GAAAA,IAAgB1lG,EAAM0kG,EAAUxhC,YAGnDE,EAAakhC,OACV,IAIV,OACEtsD,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,qBAAqBk6E,eAAa,GAC9C9C,GAAuB1qD,EAAAA,GAAAA,cAAA,OAAKiF,IAAK0lD,EAAqBnuD,IAAI,oBAAoBlpB,UAAU,sBACxF+3C,EAAWihC,QACVxiF,GAAwB8+E,GACxB5oD,EAAAA,GAAAA,cAAC2tD,GAAgB,CAACnxD,IAAKp5C,EAAQA,OAAQA,EAAQ2yD,aAAcA,IAE9D20C,GACC1qD,EAAAA,GAAAA,cAAA,OACEiF,IAAK2lD,EACLpuD,IAAI,mBACJlpB,UAAU,qBAGd0sB,EAAAA,GAAAA,cAAA,OACEiF,IAAK4lD,EACLruD,IAAI,cACJlpB,UAAU,gBAER,I,gBExQV,MA0EA,IAAeqsB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAA6B,IAA3B,OAAEiC,GAAQjC,EACjB,MAAM,SAAEoE,GAAapS,EAAOoS,SAASid,SAC/B47E,GAAWC,EAAAA,EAAAA,IAAkBj7F,IAAUi7F,EAAAA,EAAAA,IAAkBlrG,EAAOmY,eAChEjG,EAAUE,GAAUjS,OAASiS,EAAS64F,EAAW74F,EAASjS,aAAUU,EACpE+N,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQiQ,GAChC,OAAKrB,EAIE,CACLsD,UACAi5F,oBAAqBv8F,EAAKtG,aAAesG,EAAKtG,YAAY1G,KAAOgN,EAAK4X,uBAClE5X,EAAKtG,YAAY1G,QACjBf,EACJ+4B,gBAAiB55B,EAAO45B,gBACxB13B,oBAAoBvB,EAAAA,EAAAA,IAAyBX,IATtC,CAAC,CAUT,GAjBe2gD,EAxE+BvgD,IAK7C,IAL8C,QAClD8R,EAAO,gBACP0nB,EAAe,oBACfuxE,EAAmB,mBACnBjpG,GACD9B,EACC,MAAM,qBACJgrG,EAAoB,YACpBvrF,EAAW,oBACXs2B,IACEj9B,EAAAA,EAAAA,MAEE7T,GAAO25C,EAAAA,GAAAA,KAEPoU,GAAerS,EAAAA,EAAAA,IAAuB,OAE1CqkD,QAASvqB,IACPwqB,EAAAA,GAAAA,IAAwB,CAC1BC,QAASlyC,EACTmyC,WArB6B,OAuB/B/oD,EAAAA,EAAAA,KAAU,KACJtqC,GAA+B,yBAApB0nB,GAIfwxE,GAAsB,GACrB,CAACxxE,EAAiBwxE,EAAsBl5F,KAE3CsqC,EAAAA,EAAAA,KAAU,KACgB,yBAApB5iB,GAA8CuxE,GAChDh1D,EAAoB,CAAEtoC,MAAOs9F,GAC/B,GACC,CAACvxE,EAAiBuc,EAAqBg1D,IAE1C,MAAME,GAAsB9uD,EAAAA,GAAAA,IAAiB+uD,IACtCppG,IAILopG,EAAkB,IACbA,EACHr3D,qBAAqB,GAEvBp0B,EAAY,CAAE3N,QAASo5F,EAAiB9yF,YAAatW,IAAqB,IAG5E,OACEm7C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kBAAkB2xB,IAAK8Q,GACpC/V,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,QAAQsuB,IAAI,QAAQ55C,EAAK,kCACtCg4C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,cAAcsuB,IAAI,QAAQ55C,EAAK,8BAE5Cg4C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WACZze,GACCmrC,EAAAA,GAAAA,cAACkuD,GAAAA,EAAa,CACZr5F,QAASA,EACT6sC,QAASssD,EACTzjD,SAAU11C,EACV2oE,oBAAqBA,EACrBr7B,KAAM,IACN7uB,UAAU,QACV66E,eAAa,EACbrkF,sBAAoB,MAKxB,KCpFJskF,GAAY,EAAIhhE,GAAAA,GA+FtB,IAAeuS,EAAAA,EAAAA,KArFkB58C,IAK3B,IAL4B,eAChCiiE,EAAc,KACdvgE,EAAI,uBACJ4pG,EAAsB,MACtBplF,GACDlmB,EACC,MAAMiF,GAAO25C,EAAAA,GAAAA,KAEb,MAAa,cAATl9C,EAqCN,SAAyBuD,GACvB,OACEg4C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,SAAQ0sB,EAAAA,GAAAA,cAAA,YAAOh4C,EAAK,uCAEvC,CAxCWsmG,CAAgBtmG,GAGrBg9D,EAuCN,SAA6Bh9D,GAC3B,OACEg4C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,cACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,8CACb0sB,EAAAA,GAAAA,cAAA,MAAI1sB,UAAU,SAAStrB,EAAK,wCAC5Bg4C,EAAAA,GAAAA,cAAA,MAAI1sB,UAAU,eACZ0sB,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,+CACVg4C,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,+CACVg4C,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,+CACVg4C,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,iDAKpB,CArDWumG,CAAoBvmG,GAGzBqmG,EAoDN,SAAqBrmG,GACnB,OACEg4C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,cACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,UAAUsuB,IAAK55C,EAAK65C,MAAQ,WAAQr+C,GACjDw8C,EAAAA,GAAAA,cAAA,MAAI1sB,UAAU,SAAStrB,EAAK,yBAC5Bg4C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,eAAetrB,EAAK,4BACjCg4C,EAAAA,GAAAA,cAAA,MAAI1sB,UAAU,mBACZ0sB,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,yBACVg4C,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,yBACVg4C,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,yBACVg4C,EAAAA,GAAAA,cAAA,UAAKh4C,EAAK,2BAKpB,CAlEWwmG,CAAYxmG,GAGjBihB,EASN,SAAqBjhB,EAAcihB,GACjC,OACE+2B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,cACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WACb0sB,EAAAA,GAAAA,cAACk4C,GAAAA,EAAS,CACRjvE,MAAOA,EACPk5B,KAAMisD,GACN96E,UAAU,gCAEZ0sB,EAAAA,GAAAA,cAAA,MAAI1sB,UAAU,SAAStrB,EAAK,qCAC5Bg4C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,kCAAiC2mC,EAAAA,GAAAA,GAAWjyD,EAAK,mCAAoC,CAAC,SAI3G,CAtBWymG,CAAYzmG,EAAMihB,GAIzB+2B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,SAAQ0sB,EAAAA,GAAAA,cAAA,YAAOh4C,EAAK,eAA2B,ICgG5D0mG,IAAwB/6F,EAAAA,EAAAA,KAAU4L,GAAOA,KANvB,KAM8C,GA+gBtE,IAAeogC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAM2d,KAA6C,IAA3C,OAAEld,EAAM,SAAEC,EAAQ,KAAEoB,GAAM6b,EACjC,MAAM/O,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAChC,IAAKmO,EACH,MAAO,CAAC,EAGV,MAAMzJ,GAAa6mG,EAAAA,EAAAA,IAAwBhsG,EAAQS,EAAQC,EAAUoB,GAC/D80C,EAAwB,cAAT90C,GACjB0D,EAAAA,EAAAA,IAA4BxF,EAAQS,IACpCgF,EAAAA,EAAAA,IAAmBzF,EAAQS,GACzBo2F,GAAqBl2E,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,GAC9Dy3B,GAAa5vB,EAAAA,EAAAA,IAAiBvI,EAAQS,EAAQC,GAEpD,KACEA,IAAamB,EAAAA,IAAmB+M,GAAM5L,SACjC4zC,GAAgBigD,GAAsBjgD,EAAaigD,IAExD,MAAO,CAAC,EAGV,MAAM,aAAE/1E,EAAY,kBAAEmrF,EAAiB,YAAE3jG,GAAgBsG,EACnDs9F,GAAajrF,EAAAA,EAAAA,IAAuBjhB,EAAQS,GAE5C0rG,EACJzrG,IAAamB,EAAAA,KACTsD,IAAeyJ,EAAKsX,cAAgBgmF,GAAc5jG,IAAgBA,EAAY2B,UAG9EmiG,GAAU5pE,EAAAA,EAAAA,IAAUxiC,EAAQS,GAClC,IACIu4C,EADAqzD,GAAmB,EAEvB,IAAIzqC,EAAAA,EAAAA,IAA0B5hE,EAAQS,GAAS,CAC7C,MAAM6rG,GAAkB1hF,EAAAA,EAAAA,IAAmB5qB,EAAQosG,EAAQxqG,IACvD0qG,EACFtzD,EAAUszD,EAAgBtzD,QAE1BqzD,GAAmB,CAEvB,CAEA,MAAM/lF,EAAQ1X,EAAKiK,SAASnY,GACtB41F,GAAgB/4D,EAAAA,EAAAA,IAAS98B,QAA+CI,GAArCquC,EAAAA,EAAAA,IAAmBlvC,EAAQS,GAEpE,MAAO,CACL0mB,sBAAsBC,EAAAA,EAAAA,IAA2BpnB,GACjDusG,cAAc,EACdzrF,eACAmrF,oBACA9F,eAAerkC,EAAAA,EAAAA,IAAclzD,GAC7B49F,aAAapW,EAAAA,EAAAA,IAAYxnF,GACzB69F,UAAW79F,EAAK69F,UAChBpqC,gBAAgBC,EAAAA,EAAAA,IAAqBtiE,EAAQS,GAC7Cy1F,eAAeC,EAAAA,EAAAA,IAAqB11F,GACpCokG,MAAOl9F,QAAQykG,GACfjnG,aACAyxC,eACAisB,WAAYl7D,QAAQwwB,GAAYhQ,iBAChCysB,eAAe3uB,EAAAA,EAAAA,IAAoBjmB,EAAQS,EAAQC,GACnDulG,iBAA2B,WAATnkG,IAAqBiG,EAAAA,EAAAA,IAAuB/H,EAAQS,EAAQC,GAC9EwrG,aACA/pC,oBAAoBC,EAAAA,EAAAA,IAAqBpiE,GACzCqsG,mBACArzD,UACA69C,qBACAuC,cAAe9C,EAAe3uF,QAAQ2uF,EAAa+C,mBAAgBx4F,EACnE64B,aAAc15B,EAAO05B,aACrBpT,QACAomF,4BAA4Bv+D,EAAAA,EAAAA,IAA+BnuC,EAAQ,4BACnE2sG,2BAA4BlsG,IAAW4M,EAAAA,OACnC8+F,GAAiC,CAAE7jG,eACxC,GAvEeq4C,EA7gB2BvgD,IAuCzC,IAvC0C,OAC9CK,EAAM,SACNC,EAAQ,KACRoB,EAAI,SACJ8qG,EAAQ,YACRrG,EAAW,cACXC,EAAa,qBACbr/E,EAAoB,aACpBolF,EAAY,cACZpG,EAAa,YACbqG,EAAW,QACXK,EAAO,QACP9pC,EAAO,eACPV,EAAc,cACd6zB,EAAa,UACbuW,EAAS,MACT5H,EAAK,WACL1/F,EAAU,aACVyxC,EAAY,cACZhC,EAAa,WACbiuB,EAAU,iBACVojC,EAAgB,aAChBnlF,EAAY,kBACZmrF,EAAiB,WACjBC,EAAU,mBACV/pC,EAAkB,YAClB75D,EAAW,iBACX+jG,EAAgB,QAChBrzD,EAAO,mBACP69C,EAAkB,cAClBuC,EAAa,aACb1/D,EAAY,gBACZozE,EAAe,cACfC,EAAa,MACbzmF,EAAK,0BACLomF,EAAyB,2BACzBC,EAA0B,2BAC1Bp1B,EAA0B,2BAC1By1B,GACD5sG,EACC,MAAM,qBACJ4K,EAAoB,gBAAEiiG,EAAe,sBAAEC,EAAqB,qBAAEC,GAAoB,kBAAEC,GAAiB,iBACrGvhF,KACE3S,EAAAA,EAAAA,MAGEk6C,IAAerS,EAAAA,EAAAA,IAAuB,MAItCssD,IAAkBtsD,EAAAA,EAAAA,IACZ,WAATj/C,IAAqBwrG,EAAAA,EAAAA,KAAmB7jG,EAAAA,EAAAA,MAAahJ,EAAQC,KAC3D6sG,EAAAA,EAAAA,KAAuB9jG,EAAAA,EAAAA,MAAahJ,EAAQC,IAC5C,GAGC0lG,IAAcrlD,EAAAA,EAAAA,MACdysD,IAAezsD,EAAAA,EAAAA,MACf0sD,IAAsB1sD,EAAAA,EAAAA,MACtBo2B,IAAuBp2B,EAAAA,EAAAA,MACvBslD,IAA+BtlD,EAAAA,EAAAA,MAC/B2sD,IAAoB3sD,EAAAA,EAAAA,MACpB4sD,IAA4B5sD,EAAAA,EAAAA,KAAO,GACnC6sD,IAA6B7sD,EAAAA,EAAAA,IAAOp5C,QAAQW,IAE5CulG,IAAkBhuD,EAAAA,GAAAA,GAAS7G,GAASjf,OAAQ+zE,EAAAA,EAAAA,IAAqB90D,EAAQjf,YAASl5B,GAClFktG,IAAgBluD,EAAAA,GAAAA,GAAS7G,GAAS3oB,KAAMqc,EAAAA,EAAAA,IAAqBsM,EAAQ3oB,UAAOxvB,GAC5EmtG,GAAoBh1D,GAASjf,OAAQk0E,EAAAA,EAAAA,IAAuBj1D,EAAQjf,OAASif,GAAS3oB,KACxF69E,EAAAA,EAAAA,IAAmBl1D,EAAQ3oB,UAAOxvB,EAChCstG,GAAwBH,IAAqB,CACjDv4F,MAAOu4F,GAAkBv4F,MAAQ24F,EAAAA,GACjC14F,OAAQs4F,GAAkBt4F,OAAS04F,EAAAA,IAG/B12E,GAAoB/vB,QAAQxC,IAElCutD,EAAAA,GAAAA,IAAc,KAERh7B,KACF3W,EAAAA,EAAAA,KAAU,KACR6sF,GAA2B/8E,SAAU,CAAK,GAE9C,GACC,CAAC6G,MAGJg7B,EAAAA,GAAAA,IAAc,KACZykB,GAAqBtmD,QAAU+jB,CAAa,GAC3C,CAACA,KAEJ4H,EAAAA,EAAAA,KAAU,MACHr1B,GAAwBg/E,GAAiBpjC,GAAWrpC,GACvDwzE,EAAsB,CAAEzsG,UAC1B,GACC,CAAC0mB,EAAsB1mB,EAAQsiE,EAASojC,EAAezsE,EAAcwzE,KAGxEx6C,EAAAA,GAAAA,IAAc,KACRh7B,KACF2uE,GAA6Bx1E,QAAUsmD,GAAqBtmD,QAC9D,GACC,CAAC6G,MAEJg7B,EAAAA,GAAAA,IAAc,KACZg7C,GAAkB78E,QAAUq7E,CAAU,GACrC,CAACA,IC1PiCkB,MAUrCtoD,EAAAA,GAAAA,GAAW,CAAE,QATb,SAAoB7yC,GAClB,MAAM9M,GAAakpG,EAAAA,GAAAA,KAEflpG,GAAcA,EAAWhF,OAAS,IACpC8R,EAAE8qC,iBACFqwD,EAAkB,CAAEjoG,eAExB,GAEmC,EDkPnCmpG,CAA8BlB,IAE9B,MAAMrH,IAAgBhmD,EAAAA,EAAAA,KAAQ,KAC5B,IAAK56C,GAAYhF,SAAWy2C,EAC1B,OAGF,MAAM23D,EAAiBppG,EAAWQ,KAAK/D,GAAOg1C,EAAah1C,KAAKuC,OAAOwD,SAGjE6mG,EAA2C,cAAT1sG,GAAwB6qG,EAC5D,CAAC,OAAQ,MACT,CAAC,MAEL,OAAO4B,EAAepuG,OAClB+nE,IAAcumC,EAAAA,EAAAA,IAAQF,EAAgBC,GAAYnI,GAA6Bx1E,cAC/EhwB,CAAS,GACZ,CAACsE,EAAYyxC,EAAc90C,EAAM6qG,KAEpC1hB,EAAAA,GAAAA,IAAY,KACV,IAAK9lF,IAAeyxC,GAAyB,cAAT90C,EAClC,OAEF,MAAMuI,EAAMlF,EAAWhB,QAAQvC,GAAOg1C,EAAah1C,IAAK4pC,YAEnDnhC,EAAIlK,QAETgtG,GAAqB,CAAE1sG,SAAQ4J,OAAM,GAnJE,OAsJzC4gF,EAAAA,GAAAA,IAAY,KACV,IAAK9lF,IAAeyxC,GAAgBl2C,IAAamB,EAAAA,IAA2B,cAATC,EACjE,OAEF,MAAMuI,EAAMlF,EAAWhB,QAAQvC,GAAOg1C,EAAah1C,IAAKirB,mBAAmBg2C,iBAC1ChiE,IAA5B+1C,EAAah1C,IAAK8qB,QAElBriB,EAAIlK,QAET0rB,GAAiB,CAAEprB,SAAQ4J,OAAM,GA9JK,MAiKxC,MAAMqkG,IAAiB3uD,EAAAA,EAAAA,KAAQ,KAC7B,GAAa,WAATj+C,EAIJ,OAAOkP,EAAAA,EAAAA,KAAS,IAAMhG,EAAqB,CAAED,UAAWuS,EAAAA,GAAAA,UAA6B,KAAM,GAAM,EAAM,GAEtG,CAACtS,EAAsB7F,KAEpB,WAAEwpG,GAAU,kBAAEC,IExSP,WAGb,MAAOD,EAAYE,IAAkB1tD,EAAAA,GAAAA,IAAQ,GAEvC2tD,GAAeC,EAAAA,GAAAA,GATN,KASgC,GA8B/C,MAAO,CACLJ,aACAC,mBA9BwBryD,EAAAA,GAAAA,IAAgB,CAACqhC,EAA2BgvB,KACpEiC,IAEKt+F,SAAS43B,KAAKm+B,UAAU8M,SAAS,2BACpC7M,EAAAA,EAAAA,KAAgB,KACdh2D,SAAS43B,KAAKm+B,UAAU95C,IAAI,wBAAwB,IAIxDsiF,GAAa,KACX,MAAME,EAwBZ,SAAuBpxB,EAAwBgvB,GAC7C,MAAMqC,EAAcrxB,EAAUptE,iBAAiC,gBACzD0+F,EAAetxB,EAAUgjB,UAE/B,OAAOvgG,MAAMof,KAAKwvF,GAAa9hG,MAAMotB,IACnC,MAAM,UAAE40E,EAAS,aAAEzO,GAAiBnmE,EAC9BhlB,EAAM45F,EAAYD,EACxB,OAAQxO,GAAgBnrF,GAAOA,IAAQq3F,EAlDb,GADX,GAmDsE,GAEzF,CAjC0BwC,CAAcxxB,EAAWgvB,GACzCoC,IACFzoC,EAAAA,EAAAA,KAAgB,KACdyoC,EAAY1oC,UAAU95C,IAAI,QAAQ,KAItC+5C,EAAAA,EAAAA,KAAgB,KACd,MAAM8oC,EAAe9+F,SAASmsC,cAAc,UACxC2yD,GACFA,EAAa/oC,UAAUE,OAAO,SAGhCj2D,SAAS43B,KAAKm+B,UAAUE,OAAO,wBAAwB,GACvD,GACF,IAON,CFiQ4C8oC,GAEpCC,IAAehzD,EAAAA,GAAAA,IAAgB,KACnC,GAAIoxD,GAA0B98E,QAE5B,YADA88E,GAA0B98E,SAAU,GAItC,MAAM+sD,EAAYxqB,GAAaviC,QAC1B+sD,IAIA8vB,GAAkB78E,SACrB+9E,GAAkBhxB,EAAWgvB,GAG/Bb,IAAsB,KACpB,MAAM/rG,GAASyJ,EAAAA,EAAAA,MACiBujG,OAAiC1rG,EAAAA,EAAAA,IAAetB,GAAQw2E,gBAAgB/1E,QAEtG82E,EAA2B,CAAEi4B,aAAa,IAGvC5xB,EAAU6xB,gBAIfpC,GAAgBx8E,QAAU+sD,EAAU+iB,aAAe/iB,EAAUgjB,UAEhD,WAAT9+F,GACFmrG,EAAgB,CAAExsG,SAAQC,WAAUyG,aAAckmG,GAAgBx8E,UACpE,IACA,KAGGm1E,GAAoB0J,IG/Ud,SAA4Bt8C,EAAyCu8C,GAClF,MAAO3J,EAAoB4J,IAAsBle,EAAAA,GAAAA,KAG3CwO,GAAe3jD,EAAAA,GAAAA,IAAiB4jD,IACpCyP,EAAmBzP,EAAMG,YAAY5qF,OAAO,KAG9CorF,EAAAA,GAAAA,GAAkB1tC,EAAc8sC,IAEhC1jD,EAAAA,EAAAA,KAAU,KACR,MAAMqzD,EAAsBxnG,OAAO+qD,EAAaviC,QAAS22E,QAAQsI,eAAiB,EAC5E9e,EAAkBgV,IAEpBhV,GAAmBA,EAAkB6e,GAAuBF,IAC9Dv8C,EAAaviC,QAAS22E,QAAQsI,aAAeC,OAAO/e,GACtD,GACC,CAAC2e,EAAmBv8C,EAAc4yC,IAErC,MAAMgK,GAAsBjvD,EAAAA,EAAAA,MAE5B,MAAO,CAACilD,EAAoBgK,EAC9B,CHyTuDC,CAAmB78C,GAAcy5C,IAAY1qC,IAGlG3lB,EAAAA,EAAAA,KAAU,KACR,IAAKkyD,KAAmBnC,GAAgBzrF,GAAgBorF,EACtD,OAKF,GAD2B/mG,IAAcujG,EAAAA,EAAAA,IAAiBvjG,EAAWA,EAAWhF,OAAS,IAEvF,OAGF,MAAMy9E,EAAYxqB,GAAaviC,UAE1B1rB,GACHA,EAAWhF,OAASkd,EAAAA,IAAqB,GACrCugE,EAAUppB,kBAAqC07C,cAAgBtyB,EAAU8iB,eAE7EgO,IACF,GACC,CAACnC,EAAcpnG,EAAYupG,GAAgBxC,EAAYprF,IAE1D,MAAMqvF,IAA4BC,EAAAA,GAAAA,IAAY,KAC5C,IAAKjrG,IAAesoG,GAAoB58E,QACtC,OAGF,MAAMw/E,EAAwB5C,GAAoB58E,QAC/C1sB,QAAQ+vE,GAAY/uE,EAAW0F,SAASxC,OAAO6rE,EAAQszB,QAAQngG,cAI5DuxE,EAASy3B,EAAsB,IAAMA,EAAsB,GAC5Dz3B,IAILwtB,GAAYv1E,QAAU+nD,EAAOh3E,GAC7B4rG,GAAa38E,QAAU+nD,EAAOhG,wBAAwBr9D,IAAG,KAG3Dm9C,EAAAA,GAAAA,IACE,KAAM49C,EAAAA,EAAAA,KAAa,IAAMH,GAA0Bt/E,aAEnD,CAAC1rB,EAAY8gG,EAAkB2G,EAAUuD,MAE3C3zD,EAAAA,EAAAA,KACE,IAAM2zD,GAA0Bt/E,WAEhC,CAACm1E,GAAoBmK,MAIvBtuB,EAAAA,GAAAA,IAA4B7zE,IAA4C,IAA1C67F,EAAgB0G,GAAqBviG,EAMjE,MAAMgjF,EAAkBgV,KAClBgK,EAAsBN,GAAuB7+E,QAInD,GAHA6+E,GAAuB7+E,QAAUmgE,EAI/B7rF,IAAe0kG,GACZ5D,IAAqBsK,GACrBvf,IAAoBgf,QACInvG,IAAxBmvG,EAEH,OAGF,MAAMpyB,EAAYxqB,GAAaviC,QAC/B48E,GAAoB58E,QAAUxwB,MAAMof,KAAKm+D,EAAUptE,iBAAiC,uBACpF,MAAMggG,EAAkB/C,GAAoB58E,QAAQ48E,GAAoB58E,QAAQ1wB,OAAS,GAEnFswG,EACJtrG,GAAc0kG,GAAkB1kG,EAAWA,EAAWhF,OAAS,KAAO0pG,EAAeA,EAAe1pG,OAAS,GAEzGuwG,EACJvrG,IAAa,KAAO0kG,IAAiB,IAAM1kG,GAAYhF,SAAYkd,EAAAA,IAAqB,EAAI,EAExFszF,EAAkBF,IAA0BC,EAIhDzK,GACG0K,GACCxrG,GAAcA,EAAWhF,OAASkd,EAAAA,IAAqB,IACvDugE,EAAU6xB,cAAenpC,UAAU8M,SAAS,2BAC7Ck9B,EAAAA,EAAAA,KAAa,IACb1yB,EAAUppB,kBAAsC07C,cAAyC,EAAzBtyB,EAAU8iB,kBAG7EkQ,EAAAA,EAAAA,IAAchzB,EAAU6xB,cAAgB,yBACxC7xB,EAAU6xB,cAAenpC,UAAU95C,IAAI,yBAEvChjB,YAAW,KACLo0E,EAAU6xB,gBACZoB,EAAAA,EAAAA,IAAiBjzB,EAAU6xB,cAAgB,wBAC7C,GAhT2B,OAoT/B3+B,EAAAA,EAAAA,KAAoB,KAClB,MAAM,UAAE8vB,EAAS,aAAED,EAAY,aAAED,GAAiB9iB,EAC5Cz2E,EAAekmG,GAAgBx8E,QAErC,IAAIigF,EAAe3pG,GAAgB6oG,GAAuBtP,GACtDiQ,IAKFG,GADuBN,EAAkBA,EAAgB9P,aAAe,GAG1E,MAAM6H,EAAatC,GAAoBsK,GAAwBO,GApU5C,GAqUbC,EAAoB5rG,GAAcuoG,GAAkB78E,UAAY1rB,EAAWA,EAAWhF,OAAS,GAGjGwwG,GAAmBpI,IAAewI,IAEpChgC,EAAAA,EAAAA,KAAe,MACbF,EAAAA,GAAAA,IACE+M,EACA4yB,EACA,MAzUgB,QA2UhB3vG,OACAA,EACA6rG,EAA4B,OAAI7rG,EACjC,IAIL,MAAMmwG,OAAoCnwG,IAAxBmvG,GAAqCA,IAAwBhf,EAC/E,GAAIggB,IAAazQ,EAAAA,GAAAA,MACf,OAGF,MAAM3nB,EAASwtB,GAAYv1E,SAAW+sD,EAAUlhC,cAAe,IAAG0pD,GAAYv1E,WACxE24E,GACH5wB,GACEytB,GAA6Bx1E,SAC7B+sD,EAAUlhC,cAA+B,mBAG9C,IAAIu0D,EACJ,GAAI1I,GAAcyI,EAChBC,EAAetQ,EAAeD,OACzB,GAAI9nB,EAAQ,CACjB,MAAMs4B,EAAet4B,EAAOhG,wBAAwBr9D,IACpD07F,EAAerQ,GAAasQ,GAAgB1D,GAAa38E,SAAW,GACtE,MACEogF,EADSzH,EACM17F,KAAKq9B,IAClBq+D,EAAc2F,WAAavC,EAzWC,GADX,IA2WjBjM,EAAex5F,GAGFw5F,EAAex5F,EAGhC,MAAO,MACLgqG,EAAAA,GAAAA,GAAYvzB,EAAW9vE,KAAKsjG,KAAKH,KACjCI,EAAAA,GAAAA,MAEAhE,GAAgBx8E,QAAU/iB,KAAKC,IAAID,KAAKsjG,KAAKzQ,EAAesQ,GAAevQ,GAEtEgN,GAAkB78E,UACrB88E,GAA0B98E,SAAU,GAEpCkgD,EAAAA,EAAAA,KAAe,KACb48B,GAA0B98E,SAAU,CAAK,IAIR,CAItC,GACD,GAED,CAAC1rB,EAAY8gG,EAAkB2G,EAAU5G,GAAoB0J,GAAwBhD,KAExF1qD,EAAAA,GAAAA,IAAsB/kC,IAA8B,IAA5Bq0F,GAAuBr0F,OACdpc,IAA3BywG,IACF9Q,EAAAA,GAAAA,IArYiC,IAqY4Bx7F,EAAAA,IAC/D,GACC,CAACm9D,IAEJ,MAAM98D,IAAO25C,EAAAA,GAAAA,KAEP1hB,GAAY31B,QAAQlH,IAAU88B,EAAAA,EAAAA,IAAS98B,IACvCylG,GAAYv+F,SAAU21B,KAAc6oE,GAAkB9jC,GAAkB6zB,GACxEpsB,GAAYniE,SAASu+F,IAAaC,GAClCoL,IAAuBh0E,EAAAA,EAAAA,IAAS98B,KAAY4hE,IAAmBwiC,KAG9DkB,KAAkBz9F,GAAenD,KAE7BsoG,GAAoB58E,SAAkD,IAAvC48E,GAAoB58E,QAAQ1wB,SAEvC,IAAvBgF,GAAYhF,QAAwE,kBAAxDy2C,IAAezxC,EAAW,KAAKqI,QAAQ6H,QAAQvT,MACpC,kBAAvCwG,GAAakF,SAAS6H,QAAQvT,MAGhC4pG,GAAyBc,GAAeC,GAClB,IAAvBtnG,GAAYhF,QAAwE,eAAxDy2C,IAAezxC,EAAW,KAAKqI,QAAQ6H,QAAQvT,KAC1E0vG,GAAsC,IAAvBrsG,GAAYhF,QAC4B,gBAAxDy2C,IAAezxC,EAAW,KAAKqI,QAAQ6H,QAAQvT,KAE9C2vG,GAAiBz4D,IAAYA,EAAQpzB,cAAgBozB,EAAQ3oB,MAAQ2oB,EAAQjf,MAE7EpJ,IAAYuvB,EAAAA,GAAAA,GAChB,4BACA4pB,IAAa,cACZ+iC,GAAW,cACH,WAAT/qG,GAAqB,cACrBgrG,GAAmB,oBACnBC,GAAiB,kBACjB5qC,GAAsB,qBACtBwsC,IAAc,YACb5rC,GAAW,gBAGd,OACE1lB,EAAAA,GAAAA,cAAA,OACEiF,IAAK8Q,GACLziC,UAAWA,GACX+gF,SAAUnC,GACV34C,YAAasc,GAAAA,GAEZpyD,EACCu8B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,SACb0sB,EAAAA,GAAAA,cAAA,YACG4uD,EAAoBA,EAAkBhoG,KAAQ,sBAAoBkiG,EAAgB,UAAY,UAGjGntD,EACFqE,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,SACZ07E,GAAoBhvD,EAAAA,GAAAA,cAAA,YAAOh4C,GAAK,YAChCosG,KAAmBpF,GAAoBhvD,EAAAA,GAAAA,cAAA,YAAOh4C,GAAK,eACnD2zC,GACCqE,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,WACVyvB,MAAO+tD,IACJ,UAASA,GAAsB14F,WAGjCo4F,IACCxwD,EAAAA,GAAAA,cAAA,OACEmD,IAAKqtD,GACLp4F,MAAO04F,IAAuB14F,MAC9BC,OAAQy4F,IAAuBz4F,OAC/B+qC,IAAI,aAGPstD,IACC1wD,EAAAA,GAAAA,cAACumC,GAAAA,EAAc,CACbpI,SAAO,EACPh7B,IAAKutD,GACLjqB,MAAI,EACJ6L,yBAAuB,EACvB9L,OAAK,EACLE,aAAW,IAGdiqB,KAAsBH,KAAoBE,IACzC1wD,EAAAA,GAAAA,cAACwtC,GAAAA,EAAQ,CACPp1E,MAAO04F,IAAuB14F,MAC9BC,OAAQy4F,IAAuBz4F,SAGlCsjC,EAAQpzB,aACPy3B,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wBACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,kBAAkBtrB,GAAK,kBACnCiyD,EAAAA,GAAAA,GAAWte,EAAQpzB,YAAa,CAAC,KAAM,QAAS,aAMzD2rF,GACFl0D,EAAAA,GAAAA,cAACs0D,GAAe,CAAC1hG,OAAQxP,IACvB0E,KAAgB4gG,IAAiB2F,IAA0B8F,IAC7Dn0D,EAAAA,GAAAA,cAACu0D,GAAU,CACTnxG,OAAQA,EACR6lB,MAAOA,EACPxkB,KAAMA,EACNugE,eAAgBA,EAChBqpC,uBAAwBA,KAEtBvmG,GAAc4gG,IAAkBz9F,EACpC+0C,EAAAA,GAAAA,cAACw0D,GAAkB,CACjB1qF,qBAAsBA,EACtB1mB,OAAQA,EACRoiE,WAAYA,EACZsjC,cAAeA,EACfhhG,WAAYA,GAAc,CAACmD,EAAa1G,IACxCmkG,cAAeA,IAAiB79B,GAAc,CAAC5/D,IAC/C09F,mBAAoBA,GACpBC,iBAAkBt+F,QAAQs+F,GAC1B53F,SAAU1G,QAAQitC,GAClBsxD,UAAWA,GACXp8B,UAAWA,GACX1W,aAAcA,GACdgzC,YAAaA,GACbC,6BAA8BA,GAC9BlvB,qBAAsBA,GACtBz2E,SAAUA,EACVoB,KAAMA,EACNihE,QAASA,EACT8zB,mBAAoBA,EACpBuC,cAAeA,EACfkN,aAAYP,IAAyB,cAATjkG,EAC5B81E,uBAAwBmuB,KAAkB6H,GAA2B/8E,QACrE01E,YAAaA,EACbC,cAAeA,EACfjvB,2BAA4BA,IAG9Bl6B,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,CAAClN,MAAM,QAAQ0yD,gBAAgB,SAErC,KItlBV,IAAe90D,EAAAA,EAAAA,KAhDwB58C,IAOjC,IAPkC,KACtCmmD,EAAI,cACJwrD,EAAa,YACb7rF,EAAW,QACX64B,EAAO,UACPizD,EAAS,UACTrhF,GACDvwB,EACC,MAAMiF,GAAO25C,EAAAA,GAAAA,KAGPsD,GAAMvB,EAAAA,EAAAA,IAAuB,OAC7B,kBACJoc,EAAiB,kBACjBE,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBlb,GAAM0vD,GAEjC,OACE30D,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GC1CG,uBD0CyBvvB,GAAY2xB,IAAKA,GAC3DjF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLH,MAAM,YACN9mC,OAAK,EACLqY,UC9C+C,uBD+C/CouB,QAASA,EACTsf,cAAehB,EACfnY,UAAW7/C,EAAK0sG,IAEhB10D,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GCnD+D,uBDmDnC,OAAS,QAAOqG,QAE3D5+C,QAAQue,IAAgBm3B,EAAAA,GAAAA,cAAA,OAAK1sB,UCrD4H,yBDqD5F+sB,EAAAA,GAAAA,IAAqBx3B,IAClF8rF,GACC30D,EAAAA,GAAAA,cAAC6P,GAAAA,EAAI,CACH5qD,OAAQ66D,EACRta,QAASya,EACTzN,oBAAqB0N,EACrBnQ,WAAS,EACTxG,UAAU,QACVuG,UAAU,UAEV9P,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,YAAYxH,QAASizD,GAAY3sG,EAAK,mBAGrD,IElEV,GAAuD,uBC+HvD,IAAe23C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IACC,MAAMkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,GACpD,IAAKkC,EACH,MAAO,CAAC,EAGV,MAAM,OAAEzB,EAAM,SAAEC,EAAUoB,KAAMsD,GAAoBlD,EAC9C0M,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAE1BwxG,EAAkBrjG,GAAQlO,IAAamB,EAAAA,IAAsC,WAApBuD,EAE/D,MAAO,CACLA,kBACA3E,SACAyxG,eAAgBD,EAAkBrjG,EAAK+/B,0BAAuB9tC,EAC9DsxG,cAAeF,EAAkBrjG,EAAK0a,yBAAsBzoB,EAC5DqlB,YAAa+rF,EAAkBrjG,EAAKsX,iBAAcrlB,EACnD,GAlBe8/C,EA/FqCvgD,IASnD,IAToD,QACxDosD,EAAO,QACPqgD,EAAO,gBACPznG,EAAe,OACf3E,EAAM,YACNylB,EAAW,eACXgsF,EAAc,cACdC,EAAa,eACbC,GACDhyG,EACC,MAAM,eACJiyG,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAE1jE,EAAoB,gBACzE2jE,EAAe,iBAAEC,EAAgB,oBAAEC,IACjCx5F,EAAAA,EAAAA,MAGEg3D,GAAanvB,EAAAA,EAAAA,IAAuB,MAEpC4xD,EAAqBhrG,QAAQuqG,GAC7BU,EAAoBjrG,QAAQwqG,IAElC31D,EAAAA,EAAAA,KAAU,KACJm2D,GAAsBlyG,GACxBouC,EAAqB,CAAEpuC,UACzB,GACC,CAACA,EAAQouC,EAAsB8jE,KAElCn2D,EAAAA,EAAAA,KAAU,KACJo2D,GAAqBnyG,GACvBiyG,EAAoB,CAAEjyG,UACxB,GACC,CAACA,EAAQiyG,EAAqBE,IAEjC,MAAMt8C,GAAc/Z,EAAAA,GAAAA,IAAgB,KAClC,GAAKiQ,EAIL,GAAwB,WAApBpnD,EACFitG,QACK,CACL,MAAM5hC,EAAoBP,EAAWr/C,QAAS4+E,cAAe/yD,cAA8B,gBACrFm2D,EAAkBpiC,EAAkBjgE,iBAAiC,sBACrEsiG,EAAqBD,EAAgBA,EAAgB1yG,OAAS,GACpE,IAAK2yG,EACH,QAGFjiC,EAAAA,GAAAA,IAAcJ,EAAmBqiC,EAAoB,MAlDtC,GAmDjB,KAGIhmD,GAAe5M,EAAAA,GAAAA,GDpFA,wBCsFlBsM,GAAW7kD,QAAQuqG,IAAmBvqG,QAAQwqG,KDtFwL,wBCuFtOxqG,QAAQuqG,IAAmBvqG,QAAQwqG,MAAoB3lD,GDvFqZ,wBCwF5cqgD,GDxF+S,wBCyF/SuF,GDzF6X,wBC4FhY,OACE/0D,EAAAA,GAAAA,cAAA,OAAKiF,IAAK4tB,EAAYv/C,UAAWm8B,GAC/BzP,EAAAA,GAAAA,cAAC01D,GAAgB,CACfxsD,KAAK,gBACLwrD,cAAc,8BACdhzD,QAASuzD,EACTN,UAAWS,EACXvsF,YAAagsF,EACbvhF,WAAWuvB,EAAAA,GAAAA,GDpGuE,wBCsG/EyyD,GAAsBryD,IACtBsyD,GDvG8J,0BC2GnKv1D,EAAAA,GAAAA,cAAC01D,GAAgB,CACfxsD,KAAK,UACLwrD,cAAc,sBACdhzD,QAASwzD,EACTP,UAAWQ,EACXtsF,YAAaisF,EACbxhF,WAAYiiF,GAAqBtyD,KAGnCjD,EAAAA,GAAAA,cAAC01D,GAAgB,CACfxsD,KAAK,aACLwrD,cAAc,mBACdhzD,QAASuX,EACTpwC,YAAaA,EACbyK,UDzHiM,yBC2H/L,K,gBC7GV,MAEMqiF,GAAiB,YAER14F,eAAe24F,GAC5BC,EAAkB36C,EAAY3xC,GAE9B,MAAMmtB,EAAU9pB,IAAIguC,gBAAgBM,IAC5Bz2D,KAAMmqB,EAAQ,KAAEuzB,GAAS+Y,EACjC,IAAI46C,EACAt4C,EACA3mB,EACAloB,EAEJ,GAAIG,EAAAA,IAAAA,IAAkCF,GAAW,CAC/C,MAAMisC,QAAYk7C,EAAAA,GAAAA,IAAar/D,IACzB,MAAEt+B,EAAK,OAAEC,GAAWwiD,EAC1BlsC,GAAoBqnF,GAAoB59F,EAAOC,GAE/C,MAAM49F,EAAexlG,KAAKC,IAAI0H,EAAOC,GAnBd,KAoBjBwuE,EAAQj4D,IAAaC,EAAAA,IAE3B,IAAKF,EAAkB,CACrB,IAAKpF,GAAS2sF,oBAAsBrvB,IAAUovB,GAA6B,eAAbrnF,GAA4B,CACxF,MAAMunF,QAAmB57C,GACvB7jB,EAASu/D,EAzBQ,KAyB4BxlG,KAAKC,IAAI0H,EAAOC,GAAU,EAAG,cAG5E,OADAuU,IAAIyuC,gBAAgB3kB,GACbk/D,GAAgBC,EAAU36C,EAAM,CACrCg7C,kBAAmBC,GAEvB,CAEiB,eAAbvnF,IACFinF,EAAWA,EAASviG,QAAQqiG,GAAgB,SAG9CG,EAAQ,CAAE19F,QAAOC,SACnB,CAEAw+B,EAAiBH,CACnB,MAAO,GAAI3nB,EAAAA,IAAAA,IAAkCH,GAAW,CACtD,MAAQwnF,WAAYh+F,EAAOi+F,YAAah+F,EAAM,SAAEslD,SAAmB24C,EAAAA,GAAAA,IAAa5/D,GAChF/nB,GAAoBqnF,GAAoB59F,EAAOC,GAE1CsW,IACHmnF,EAAQ,CAAE19F,QAAOC,SAAQslD,aAG3B9mB,QAAuB0/D,EAAAA,GAAAA,IAAqB7/D,EAC9C,MAAO,GAAI1nB,EAAAA,IAAAA,IAAkCJ,GAAW,CACtD,MAAM,SACJ+uC,EAAQ,MAAElqD,EAAK,UAAE0qD,EAAS,SAAEq4C,SC5D3Bv5F,eAAkC5F,GACvC,MAAM,aAAEo/F,EAAY,YAAEC,SAAsB,qCACtCC,QAAiBF,EAAap/F,IAC5Bu/F,QAAQ,MAAEnjG,EAAK,OAAEyqD,EAAM,QAAE24C,GAAWC,QAAQ,SAAEn5C,IAAeg5C,EAE/DI,EAAQL,EAAYG,GAG1B,MAAO,CACLpjG,QACA0qD,UAAWD,EACXP,WACA64C,SANeO,EAAS,QAAOA,EAAMD,iBAAiBC,EAAMngG,KAAK7L,SAAS,iBAAcvH,EAQ5F,CD+CcwzG,CAAmBtgE,GAC7B8mB,EAAQ,CACNG,SAAUA,GAAY,EACtBlqD,QACA0qD,aAEFtnB,EAAiB2/D,CACnB,CAEA,MAAO,CACL9/D,UACAm/D,WACAjnF,WACAuzB,OACA2zD,QACAt4C,QACA3mB,iBACAloB,iBAAkBA,QAAoBnrB,EACtCyzG,SAAW,GAAE1nG,KAAKC,SAASiB,KAAKob,cAC7BtC,EAEP,CAEO,SAAS2tF,GACdjyF,EAA8BkyF,GAE9B,OAAOlyF,EAAY3c,KAAK8uG,GAClBD,EACEC,EAAOlB,kBACF,IACFkB,EACH1gE,QAAS0gE,EAAOlB,mBAGbkB,EAGF,IACFA,EACHzoF,kBAAmByoF,EAAOnoF,YAAezrB,EACzC6zG,yBAAqB7zG,IAG3B,CAEA,SAASwyG,GAAoB59F,EAAeC,GAE1C,OADuB5H,KAAKC,IAAI0H,EAAOC,GAAU5H,KAAKq9B,IAAI11B,EAAOC,IAlG1C,EAoGzB,C,gBEpHe,SAASi/F,GAAoCC,GAC1D,MAAMC,EAAYtkG,SAASgpD,cAAc,OACzCs7C,EAAUC,gBAAkB,OAC5BD,EAAUz0D,MAAM37C,SAAW,WAC3BowG,EAAUz0D,MAAM5qC,KAAO,WACvBq/F,EAAUz0D,MAAM7qC,IAAM,WACtBs/F,EAAU//C,UAAY8/C,EACtBrkG,SAAS43B,KAAK4sE,YAAYF,GAC1B,IAAI3gC,EAAU2gC,EAAUG,UAExB,GAAI9gC,EAAQ8gC,UAEV,KAAO9gC,EAAQ8gC,WACb9gC,EAAUA,EAAQ8gC,UAKtB,MAAMC,EAAa/gC,EAAQ4T,YAAa3nF,OAClC+0G,EAAQ3kG,SAAS4kG,cACjBC,EAAY3xG,OAAO4xG,eAGzBH,EAAMI,SAASphC,EAAS+gC,GACxBC,EAAMK,OAAOrhC,EAAS+gC,GACtBG,EAAUI,kBACVJ,EAAUK,SAASP,GACnB3kG,SAASmlG,YAAY,UAAU,GAE/B,MAAMxvG,EAAS2uG,EAAU//C,UAGzB,OAFAvkD,SAAS43B,KAAKwtE,YAAYd,GAEnB3uG,CACT,C,gBC/BA,IAAI0vG,GASW,SAASC,GAA8BC,GACpDF,GAAWp3E,QACXs3E,EAAQt3E,OACV,CAVIhe,EAAAA,KACFo1F,GAAarlG,SAASgpD,cAAc,SACpCq8C,GAAWtvC,UAAU95C,IAAI,kCACzBjc,SAAS43B,KAAK4sE,YAAYa,K,gECS5B,MACMG,GAAiC,IAAIC,OAAQ,IAAGC,EAAAA,IAAAA,UAA2B,K,gBCZjF,MAEMC,GAAmB,CAAEC,YAFP,IAAIlsF,IAAI,cAAyDvZ,KAE7C0lG,aAAa,GAC/CC,GAAc,CAAEv0G,KAAM,aAI5B,IAAIw0G,GACAC,GACAC,GAEGl8F,eAAe2B,KAOpB,OANKq6F,KACHA,GAAsB,oCACtBC,UAAsBD,IAAqBG,QAC3CD,GAAgB,IAAID,GAAaL,KAG5BI,EACT,CAEOh8F,eAAeo8F,GAAMC,SA6C5Br8F,uBACQ2B,WACAu6F,GAAcE,OACtB,CA/CQE,GAEN,MAAM7jC,EAAYnmE,KAAKC,MACvB,IAAIgqG,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BP,GAAcQ,gBAAmBC,IAC/BH,EAAOvwG,KAAK0wG,EAAW,EAGzB,MAAMC,EAsCR,SAA6BC,EAAyBv6F,GACpD,MAAMw6F,EAASD,EAASE,WAClBC,EAAWF,EAAOG,QAAQC,iBAChCF,EAASG,QAtEM,GAuEfL,EAAOM,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEMjvG,EAFMivG,EAAU1xG,QAAO,CAACC,EAAKyqB,IAAYzqB,EAAMyqB,GAAS,GAC1C8mF,EACE,IAzDoC/uG,KAC1DmuG,EAASxwG,KAAc,IAATqC,GACd+tG,EAAiB/tG,EAAO,EAyDxBgU,CAAGhU,EAvFY,GAuFU,EAAIA,IAE7BmoE,EAAAA,EAAAA,IAAeinC,EACjB,CAEAA,GAEO,KACLD,GAAc,CAAI,CAEtB,CArE0BG,CAAoB1B,IAK5C,MAAO,CACLh6C,KAAMA,IAAM,IAAInuC,SAAgB,CAAC+pC,EAAS+/C,KACxC3B,GAAc4B,OAAS,KACrBhgD,EAAQ,CACNG,KAAM,IAAIP,KAAK8+C,EAAQT,IACvBr7C,SAAUltD,KAAKwK,QAAQu+F,GAAYjqG,KAAKC,OAASkmE,GAAa,KAC9DgkC,YACA,EAEJP,GAAc6B,QAAUF,EAExB,MAAMG,EAAYxqG,KAAKC,IAAI,EAAGglE,EAhDT,IAgD0CnmE,KAAKC,OACpErD,YAAW,KACTgtG,GAAch6C,OACd06C,GAAiB,GAChBoB,EAAU,IAEftpF,MAAOA,KACL,MAAMspF,EAAYxqG,KAAKC,IAAI,EAAGglE,EAvDT,IAuD0CnmE,KAAKC,OACpErD,YAAW,KACTgtG,GAAcxnF,QACd6nF,EAAWjqG,KAAKC,MAChBqqG,GAAiB,GAChBoB,EAAU,EAGnB,C,gBCjEA,MAAMC,GAA0B,0BAqB1BnxE,GAAU,CACd,KACA,KACA,KACA,KACA,KACA,MAGF,SAASoxE,GAAU5D,GAIjB,OAHe,IAAI6D,WACAC,gBAAgB9D,EAAM,aAE9BzsE,IACb,CAEA,SAASwwE,GAAeC,EAAYloG,GAClC,MAAMkoE,EAASroE,SAASgpD,cA1BhB,KA8BR,OAHAqf,EAAOloE,KAAOA,EACdkoE,EAAOm8B,YAAY6D,EAAKC,WAAU,IAE3BjgC,CACT,CAEA,SAASkgC,GAAeF,EAAYx4D,GAClC,MAAM7lB,EAAKhqB,SAASgpD,cAAcnZ,GAGlC,OAFA7lB,EAAGw6E,YAAY6D,EAAKC,WAAU,IAEvBt+E,CACT,CAEA,SAASw+E,GAASC,EAAoB9yG,GACpC,IAAI+yG,EAAU/yG,EAAO2yG,WAAU,GAC/B,OAAKG,GAGDA,EAAM54D,OAtDJ,QAsDa44D,EAAM54D,MAAM84D,aAC7BD,EAAUH,GAAeG,EA7CrB,WA+CFD,EAAM54D,OAxDF,WAwDW44D,EAAM54D,MAAM+4D,YAC7BF,EAAUH,GAAeG,EA/CnB,OAiDJD,EAAM54D,OA1DC,cA0DQ44D,EAAM54D,MAAMg5D,iBAC7BH,EAAUH,GAAeG,EAjDhB,MAmDPD,EAAM54D,OA5DK,iBA4DI44D,EAAM54D,MAAMg5D,iBAC7BH,EAAUH,GAAeG,EAnDZ,QAqDXD,EAAM54D,OA9DG,UA8DM44D,EAAM54D,MAAMi5D,gBAC7BJ,EAAUH,GAAeG,EArDd,QAuDTD,EAAM54D,OAhEC,QAgEQ44D,EAAM54D,MAAMi5D,gBAC7BJ,EAAUH,GAAeG,EAvDhB,QA0DJA,GArBEA,CAsBX,CAiBA,SAASK,GAAkBC,GACzB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAU1oG,SAASipG,eAAeZ,EAAK9wB,aAAe,IACtD2xB,EAAab,EAQjB,MAPsB,MAAlBA,EAAKc,WACPT,EAAUN,GAAeM,EAAUL,EAA2BloG,MAC1D,UAAWkoG,EAAKe,WAAW,IAAMhyG,QAAQixG,EAAKe,WAAW,GAAGv5D,SAC9Dq5D,EAAab,EAAKe,WAAW,KAGjCV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAEA,SAASW,GAAahB,GACpB,GAAIA,EAAKe,aAAef,EAAKe,WAAWx5G,QAAU,GAAuB,OAAlBy4G,EAAKc,UAAuC,OAAlBd,EAAKc,UAAoB,CACxG,IAAIG,EACAZ,EAAU1oG,SAASipG,eAAeZ,EAAK9wB,aAAe,IAC1D,GAAsB,OAAlB8wB,EAAKc,UAAuC,OAAlBd,EAAKc,UAAuC,OAAlBd,EAAKc,SAAmB,CAC9EG,EAAatpG,SAASgpD,cAAcq/C,EAAKc,UACzCT,EAAU1oG,SAASupG,yBACnB,MAAMC,EAAQ,GACd,IAAK,IAAIz6F,EAAI,EAAGA,EAAIs5F,EAAKe,WAAWx5G,OAAQmf,IAC1Cy6F,EAAMxzG,QAAQqzG,GAAahB,EAAKe,WAAWr6F,KAE7Cy6F,EAAMp0G,KAAK2Z,GAAkB25F,EAAQlE,YAAYz1F,IACnD,MAA+C,IAApC8nB,GAAQ1iC,QAAQk0G,EAAKc,WAC9BG,EAAatpG,SAASgpD,cAAcq/C,EAAKc,UACzCT,EAAUK,GAAkBV,EAAKe,WAAW,KACjB,MAAlBf,EAAKc,UACdG,EAAatpG,SAASgpD,cAAc,KACpC0/C,EA9CN,SAA0BM,GACxB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAU1oG,SAASipG,eAAeZ,EAAK9wB,aAAe,IACtD2xB,EAAalpG,SAASipG,eAAe,IASzC,MARI,UAAWZ,EAAKe,WAAW,IAAMhyG,QAAQixG,EAAKe,WAAW,GAAGv5D,SAC9Dq5D,EAAab,EAAKe,WAAW,IAE3Bf,EAAKe,WAAW,IAAsC,MAAhCf,EAAKe,WAAW,GAAGD,WAC3CT,EAAUN,GAAeM,EAAQJ,WAAU,GAAQD,EAAKe,WAAW,GAAyBjpG,MAC5F+oG,EAAab,EAAKe,WAAW,GAAGA,WAAW,IAE7CV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAiCgBe,CAAiBpB,IACA,OAAlBA,EAAKc,SACdT,EAAUL,GAEViB,EAAatpG,SAASgpD,cAAc,QACpC0/C,EAAUK,GAAkBV,IAE9B,OAAIiB,GACFA,EAAW9E,YAAYkE,GAChB,CAACY,IAGH,CAACjB,EAAKC,WAAU,GACzB,CAEA,GAAID,EAAKe,WAAY,CACnB,MAAMM,EAAQ,GACd,IAAK,IAAI36F,EAAI,EAAGA,EAAIs5F,EAAKe,WAAWx5G,OAAQmf,IAC1C26F,EAAM1zG,QAAQqzG,GAAahB,EAAKe,WAAWr6F,KAE7C,OAAO26F,CACT,CAEA,MAAO,CAACrB,EACV,CAEA,SAASsB,GAAWtB,GAClB,OAAyB,IAAlBA,EAAKuB,QACd,C,gBChJA,MAEMC,GAAkB,0BAwHxB,GAtE0BC,CACxB9oG,EACA+oG,EACAC,EACAC,EACAC,EACAC,MAEAl+D,EAAAA,EAAAA,KAAU,KACR,GAAKjrC,EAqDL,OAFAhB,SAAS8tC,iBAAiB,QAASs8D,GAAa,GAEzC,KACLpqG,SAAS+tC,oBAAoB,QAASq8D,GAAa,EAAM,EAlD3DrgG,eAAeqgG,EAAY1oG,GACzB,IAAKA,EAAE2oG,cACL,OAGF,MAAMC,EAAQtqG,SAASuqG,cACvB,GAAID,IAAU,CAACE,EAAAA,IAAmBC,EAAAA,KAAyBnwG,SAASgwG,EAAMj5G,IACxE,OAGF,MAAMq5G,EAAahpG,EAAE2oG,cAAcM,QAAQ,QAAQC,UAAU,EA3ExC,MA4EfvG,EAAO3iG,EAAE2oG,cAAcM,QAAQ,aACrC,IAAIE,EAAsBxG,GAAOnnG,EAAAA,EAAAA,IAzEvC,SAA2BmnG,GACzB,IAAIyG,EAAW9qG,SAASgpD,cAAc,OACtC,IACEq7C,GD4JkC0G,EC5Jb1G,GD6JDlrF,MAAM6uF,IAlB9B,SAA0BgB,GACxB,MAAMpxE,EAAO53B,SAASgpD,cAAc,QAC9B0gD,EAAQV,EAAMI,WACd4B,EAAgBl7G,MAAMof,KAAKw6F,GAAO91G,OAAO+1G,IACzCsB,EAAa,GAEnB,IAAK,MAAM5C,KAAQ2C,EACjBC,EAAWj1G,QAAQqzG,GAAahB,IAGlC,IAAK,IAAIt5F,EAAI,EAAGA,EAAIk8F,EAAWr7G,OAAQmf,IACrC6oB,EAAK4sE,YAAYyG,EAAWl8F,GAAGu5F,WAAU,IAG3C,OAAO1wE,CACT,CAOSszE,CAAiBjD,GAAU8C,EAAiB3qG,QAAQ,eAAgB,MAAMmkD,UAHxE0jD,GAAU8C,EAAiB3qG,QAAQ,eAAgB,KAAKmkD,SCxJjE,CALE,MAAOtgD,GACH8C,EAAAA,KAEFC,QAAQC,MAAMhD,EAElB,CDsJa,IAAuB8mG,ECrJpCD,EAASvmD,UAAY8/C,EAAKjkG,QAAQ,UAAW,KAAKA,QAAQypG,GAAiB,IAE3E,MAAMsB,EAAeL,EAAS7qG,iBAAiC,iBAiC/D,OAhCIkrG,EAAav7G,SACfk7G,EAAWK,EAAaA,EAAav7G,OAAS,IAGhDE,MAAMof,KAAK47F,EAASM,qBAAqB,MAAM7vG,SAAS8sG,IACtD,GAAMA,aAAgBgD,YAiBtB,OAhBAhD,EAAK9kC,gBAAgB,SAGA,OAAjB8kC,EAAKiD,SAAkBjD,EAAKkD,YAAY,MACvB,MAAjBlD,EAAKiD,SAAiBjD,EAAK7D,YAAYxkG,SAASipG,eAAe,OAC9C,QAAjBZ,EAAKiD,SAAsBjD,EAAKpR,QAAQuU,YAAYnD,EAAKkD,YAAYlD,EAAKh8D,aAAa,QAAU,IAEjGg8D,EAAKpR,QAAQwU,eAAepD,EAAKpyC,SAEjCy1C,EAAAA,GAA0BrD,EAAKiD,UACjCjD,EAAK3kC,aAAa,mBAAoBgoC,EAAAA,GAA0BrD,EAAKiD,UAGlEjD,EAAKpR,QAAQuU,YAAcnD,EAAK9wB,cAAgB8wB,EAAKsD,WAAWtD,EAAKkD,YAAYlD,EAAK9wB,aAEvF8wB,EAAKpR,QAAQ/mD,KAAKm4D,EAAK3kC,aAAa,MAAO2kC,EAAKpR,QAAQ/mD,KACpDm4D,EAAKpR,QAAQuU,YACnB,KAAKI,EAAAA,GAAAA,YACHvD,EAAKkD,YAAYlD,EAAK9wB,aAAe,IACrC,MACF,KAAKq0B,EAAAA,GAAAA,YACHvD,EAAK9wB,YAAc8wB,EAAKpR,QAAQ/mD,KAAO,GACjC,IAIL46D,EAASvmD,UAAUsnD,SAC5B,CA4BQC,CAAkBzH,QAAO/zG,GAAW,QAClCA,EAEAu6G,IAAuBkB,EAAAA,GAAAA,IAAoBlB,IAAwBX,IACrEW,GAAsBmB,EAAAA,GAAAA,IAAiBnB,GACvCV,OAGF,MAAM,MAAEX,GAAU9nG,EAAE2oG,cACpB,IAAI12G,EAA4B,GAOhC,GALA+N,EAAE8qC,iBACEg9D,EAAM55G,OAAS,IACjB+D,QAAcs4G,EAAAA,GAAAA,GAA8BzC,KAGzC71G,GAAO/D,SAAW86G,EACrB,OAGF,GAAI/2G,GAAO/D,SAAWq6G,EAAe,CACnC,MAAMiC,QAAuBpuF,QAAQC,IAAIpqB,EAAMyB,KAAKmxB,GAC3Cm8E,GAAgBn8E,EAAK8Y,KAAM9Y,MAEpCyjF,GAAgBj4F,GAAgBA,EAAYvE,OAAO0+F,IACrD,CAEA,MAAMC,EAActB,GAAqB14F,UAAUviB,OAASi7G,EAAsB,CAAEn3G,KAAMg3G,GAEtFyB,GACFpC,EAA0BoC,EAAa7B,GAAOj5G,GAElD,CAMC,GACA,CACD04G,EAA2BE,EAAeD,EAAgBhpG,EAAUkpG,EAAwBC,GAC5F,EC9GEiC,GAAe,IAAIpwF,IAAY,CAAC4vF,EAAAA,GAAAA,QAA+BA,EAAAA,GAAAA,M,wCCRrE,MACMS,GAA0B,0CAC1BC,GAAe,4CACfC,GAAiB,CACrB9uF,SAAU,GACV9sB,MAAO,GACP67G,aAAa,EACbC,gBAAiB,IAGbC,GAAS1sG,SAASgpD,cAAc,OA2EtC,MAAM2jD,IAAsBC,EAAAA,GAAAA,IAAS,CAACnvF,EAAkB9sB,EAAe67G,KAAyB,CAC9F/uF,WACA9sB,QACA67G,cACAC,gBAAiBhvF,EAAS2wB,kBC7FtBy+D,GAAa,sB,4BCkGnB,SAASt6F,GAAkB9C,GACzB,OAAIA,EAAWgM,iBAAyB,OAEpCG,EAAAA,IAAAA,IAAkCnM,EAAWiM,UACxC,QAGLG,EAAAA,IAAAA,IAAkCpM,EAAWiM,UACxC,QAGLI,EAAAA,IAAAA,IAAkCrM,EAAWiM,UACxC,QAGF,MACT,C,gBCtGA,IAAIoxF,IAAW,EAUf,MCjBA,IAAergE,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAE36C,GAAW26C,EACbqgE,GAAqBngE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuB96C,GAGjF,OAAOg7G,EAAqBjgE,EAAAA,GAAAA,cAACigE,EAAuBrgE,QAAYp8C,CAAS,I,oDCX3E,SAAwD,uBCqBlD08G,GAAwB,SA6B9B,IAAevgE,EAAAA,EAAAA,KA3BqB58C,IAE9B,IAF+B,KACnCmmD,EAAI,MAAEvkB,GACP5hC,EACC,MAAM,cAAEo9G,IAAkB77D,EAAAA,EAAAA,MACpBwZ,GAAYtb,EAAAA,GAAAA,IAASnT,EAAAA,EAAAA,IAAqB6Z,IAAO,EAAOja,EAAAA,GAAAA,MAExDmxE,GAAU19D,EAAAA,EAAAA,KAAQ,KACtB,IAAKob,EAAW,MAAO,GACvB,MAAM/b,EAAkB,SAAVpd,EAZO,qBACC,qBAahB07E,EAA8BviD,EAAUxqD,QAAQ4sG,GAAuBn+D,GACvEu+D,GAAM,IAAIlF,WAAYC,gBAAgBgF,EAA6B,iBAMzE,OALAC,EAAIntG,iBAAiB,QAAQ1E,SAASq0C,IACpCA,EAAKC,MAAMw9D,OAASx+D,EACpBe,EAAKC,MAAMy9D,YAnBe,OAmBsB,IAG1C,2BAA0BF,EAAIG,gBAAgBC,WAAW,GAChE,CAAC5iD,EAAWn5B,IAEf,OACEqb,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GD5CK,uBC4CuB,QAASs9D,GAAiBl9D,KAClEjD,EAAAA,GAAAA,cAAA,OAAKmD,IAAKi9D,EAASh9D,IAAI,GAAG9vB,WAAWuvB,EAAAA,GAAAA,GD7C4C,wBC6Cds9D,GAAiBl9D,MAClF,ICyDR,IAAetD,EAAAA,EAAAA,KA7EqB58C,IAO9B,IAP+B,IACnC2+B,EAAG,MACHiD,EAAK,OACLvhC,EAAM,SACNC,EAAQ,aACRs9G,EAAY,aACZC,GACD79G,EACC,MAAM,cAAEklC,EAAa,gBAAExG,IAAoB5lB,EAAAA,EAAAA,MAErC7T,GAAO25C,EAAAA,GAAAA,KAEPuH,GAAOxG,EAAAA,EAAAA,KAAQ,IACZhhB,EAAIm/E,MAAM/wG,MAAKa,IAAA,IAAC,KAAE4hC,GAAM5hC,EAAA,MAAc,mBAAT4hC,CAAyB,KAAGr/B,UAC/D,CAACwuB,EAAIm/E,SAEDtxD,EAAYuxD,EAAUC,IAAaj9D,EAAAA,GAAAA,MACnCk9D,EAAcC,IAAmBrgE,EAAAA,EAAAA,SAAsCp9C,GAExEw8D,GAAoB9gB,EAAAA,GAAAA,IAAiBtqC,IACzCA,EAAE8qC,iBACF,MAAMwhE,EAAOtsG,EAAE4hE,cAAcjB,wBAC7B0rC,EAAgB,CAAEvzE,EAAGwzE,EAAKC,MAAO5xE,EAAG2xE,EAAK5W,SACzCqW,IACAG,GAAU,IAGNM,GAAkBliE,EAAAA,GAAAA,IAAgB,KACtC6hE,IACAH,GAAc,IAGVS,GAA0BniE,EAAAA,GAAAA,IAAgB,KAC9C+hE,OAAgBz9G,EAAU,IAGtB89G,GAAkBpiE,EAAAA,GAAAA,IAAgB,KACtCzd,EAAgB,CACd/pB,MAAOgqB,EAAIn9B,GACXo9B,WAAW,GACX,IAGJ,OACEqe,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPzM,IAAK9a,EAAIn9B,GACTs9D,WAAY3Y,GAAQlJ,EAAAA,GAAAA,cAACuhE,GAAa,CAACr4D,KAAMA,EAAMvkB,MAAOA,IACtDukB,KAAOA,OAAgB1lD,EAAT,OAEdk+C,QAASA,IAAMzZ,EAAc,CAC3BvG,MACAt+B,SACAC,aAEF29D,cAAehB,GAEdt+B,EAAIvR,UACJ6wF,GACChhE,EAAAA,GAAAA,cAACwhE,GAAAA,EAAM,KACLxhE,EAAAA,GAAAA,cAAC6P,GAAAA,EAAI,CACH5qD,OAAQsqD,EACRhG,UAAU,QACVxG,MAAQ,SAAQi+D,EAAatzE,YAAYszE,EAAazxE,OACtDjc,UAAU,0BACVy8B,WAAS,EACTvK,QAAS47D,EACT5uD,oBAAqB6uD,GAErBrhE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,OAAOyD,aAAW,EAACjL,QAAS4/D,GAAkBt5G,EAAK,uBAK/D,ICuHf,IAAe23C,EAAAA,EAAAA,KAzKkB58C,IAkB3B,IAlB4B,OAChCK,EAAM,SACNC,EAAQ,gBACRo+G,EAAe,eACfC,EAAc,eACdC,EAAc,cACd9rG,EAAa,cACbC,EAAa,iBACbC,EAAgB,cAChBC,EAAa,WACb4rG,EAAU,SACVhlE,EAAQ,YACRtG,EAAW,cACX4tB,EAAa,aACb29C,EAAY,aACZC,EAAY,iBACZC,EAAgB,MAChBp9E,GACD5hC,EACC,MAAOi/G,EAAkBC,EAAgBC,IAAmBp+D,EAAAA,GAAAA,MACrDmN,EAAkBC,EAAkBixD,IAAmBC,EAAAA,GAAAA,GAAeJ,EAAkBE,GAEzFG,EAAuBxsG,GAAiBC,EACxCwsG,EAAsBzsG,GAAiBC,GAEtCysG,EAAyBC,EAA2BC,IAA+B3+D,EAAAA,GAAAA,MAC1F3E,EAAAA,EAAAA,KAAU,KACJ6iE,GACFG,GACF,GACC,CAACH,EAAkBG,IAEtB,MAAMO,GAAyBxjE,EAAAA,GAAAA,IAAgB,KACzC8iE,EACFE,IAEAD,GACF,IAGIU,GAAmBzjE,EAAAA,GAAAA,IAAgB,CAACtqC,EAAUguG,KAClD,MAAM,MAAE/7G,GAAU+N,EAAEkhE,OACd+sC,GAAiBC,EAAAA,GAAAA,IAAcj8G,GAEjCg8G,GAAgB//G,QAClB++G,EAAagB,EAAgBD,EAC/B,IAGIG,GAAoB7jE,EAAAA,GAAAA,IAAgB,MACxC8jE,EAAAA,GAAAA,GACEhgH,MAAMof,KAAKigG,EAAuBY,EAAAA,IAChCptG,EAAgBiZ,EAAAA,IAAgCC,EAAAA,KAC/CvlB,KAAK,MACPoL,GAAM+tG,EAAiB/tG,GAAG,IAC5B,IAUGmtB,IAPuBmd,EAAAA,GAAAA,IAAgB,MAC3C8jE,EAAAA,GAAAA,IAAuBjtG,GAAoBC,EACvChT,MAAMof,KAAK4M,EAAAA,KAA+BxlB,KAAK,KAC/C,KACEoL,GAAM+tG,EAAiB/tG,GAAG,IAAO,KAG5B8tC,EAAAA,EAAAA,KAAQ,IACZ93C,OAAOoR,OAAO4lG,GAAY96G,QAAQ46B,KAClCkb,MACY,SAAbA,GAAuBlb,EAAIn9B,KAAOnB,IAAUs+B,EAAIqG,UAAUv6B,SAAS,UAGhEk0B,EAAIqG,UAAUv6B,SAASovC,OAE/B,CAACglE,EAAYx+G,EAAQw5C,KAElB50C,GAAO25C,EAAAA,GAAAA,KAEb,GAAK8/D,EAIL,OACEzhE,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,cACb0sB,EAAAA,GAAAA,cAACkjE,GAAAA,EAAqB,CACpB3+G,GAAG,qBACH+uB,UAAW0uF,EAAmB,+BAAiC,qBAC/D/mG,OAAK,EACL8mC,MAAM,cACNohE,WAAYT,EACZ76D,UAAU,oBACVu7D,aAAa,uBACbC,UAAQ,GAERrjE,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,sBAEf0sB,EAAAA,GAAAA,cAAC6P,GAAAA,EAAI,CACHtrD,GAAG,uBACHU,OAAQ+8G,GAAoBO,EAC5BxyD,WAAS,EACTxG,UAAU,QACVuG,UAAU,SACVtK,QAAS08D,EACT5uF,UAAU,yBACVk/B,oBAAqB0vD,EACrBtwD,aAAeziD,EAAAA,QAAkC3L,EAAnBytD,EAC9BY,aAAe1iD,EAAAA,QAAkC3L,EAAnB0tD,EAC9BoyD,mBAAoBn0G,EAAAA,GACpBo0G,eAAe,uBAMb7B,GACA1hE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAAC31B,UAAU,iBAAiB+tC,UAAQ,GAAC,uDAE/CqgD,GACC1hE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACGsiE,GACCtiE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,QAAQxH,QAASqhE,GAC7B/6G,EAAKq6G,EAAuB,8BACxBxsG,EAAgB,4BAA8B,+BAW1D8rG,GACC3hE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,OAAOxH,QAASogE,GAAe95G,EAAK,UAQnDk8D,GAAiBl5D,OAAO5H,IAAW,GACnC48C,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAK,OACL51B,UAAU,kBACVuuC,WACE7hB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,OAAO6vB,IAAI,oBAAoBC,IAAI,KAEpD1B,QAASqgE,GAER/5G,EAAK,gBAIT05G,IAAmBprE,GAAevU,EAAKz5B,KAAKo5B,GAC3Cse,EAAAA,GAAAA,cAACwjE,GAAa,CACZ9hF,IAAKA,EACLt+B,OAAQA,EACRC,SAAUA,EACVshC,MAAOA,EACPg8E,aAAc6B,EACd5B,aAAc6B,OAIhB,ICxMV,IAAe9iE,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE36C,GAAW26C,EACb6jE,GAAmB3jE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB96C,GAG7E,OAAOw+G,EAAmBzjE,EAAAA,GAAAA,cAACyjE,EAAqB7jE,QAAYp8C,CAAS,ICGvE,IAAem8C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE36C,GAAW26C,EACb8jE,GAAiB5jE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmB96C,GAGzE,OAAOy+G,EAAiB1jE,EAAAA,GAAAA,cAAC0jE,EAAmB9jE,QAAYp8C,CAAS,I,gBCLnE,MAQA,IAAem8C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE36C,GAAW26C,EACb+jE,GAAiB7jE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmB96C,GAGzE,OAAO0+G,EAAiB3jE,EAAAA,GAAAA,cAAC2jE,EAAmB/jE,QAAYp8C,CAAS,I,4BCLnE,MAQA,IAAem8C,EAAAA,EAAAA,KAR+BC,IAC5C,MAAM,OAAE36C,GAAW26C,EACbgkE,GAAoB9jE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAAsB96C,GAG/E,OAAO2+G,EAAoB5jE,EAAAA,GAAAA,cAAC4jE,EAAsBhkE,QAAYp8C,CAAS,IC0DzE,IAAem8C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAAgC,IAA9B,UAAE3G,GAAW2G,EACpB,MAAM,OAAEvN,IAAWE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EACxD,OAAKS,EAIE,CAAEmF,SAASkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4G,IAH3C,CAAC,CAGsD,GAPhDs5C,EA7C+BvgD,IAE7C,IAF8C,OAClDkC,EAAM,QAAEsD,EAAO,QAAEi9C,GAClBziD,EACC,MAAM,qBAAE+0D,IAAyBj8C,EAAAA,EAAAA,OAE1Bo1C,EAAkBC,IAAoBkxD,EAAAA,GAAAA,GAAen9G,EAAQugD,IAC9D,oBAAEq+D,GAAwBt7G,GAAW,CAAC,EAE5C,GAAKA,GAAYA,EAAQu7G,gBAIzB,OACE9jE,EAAAA,GAAAA,cAAC6P,GAAAA,EAAI,CACH5qD,OAAQA,EACR8qD,UAAW8zD,EACXt6D,UAAU,QACVuG,UAAU,SACVtK,QAASA,EACTlyB,UAAU,kBACVk/B,oBAAqBhN,EACrBoM,aAAeziD,EAAAA,QAAkC3L,EAAnBytD,EAC9BY,aAAe1iD,EAAAA,QAAkC3L,EAAnB0tD,EAC9B6yD,WAAS,GAET/jE,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,WACZ/qB,EAAQu7G,gBAAgBx7G,KAAKqoE,GAC5B3wB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,OACZq9C,EAAIroE,KAAK67B,GACR6b,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLgD,QAAM,EACNmc,SAA0B,gBAAhBl9B,EAAO1/B,KAEjBi9C,QAASA,IAAMoW,EAAqB,CAAE9tD,UAAWzB,EAAQhE,GAAI4/B,YAE5DA,EAAOv9B,YAMb,K,wCCLX,MA0NA,IAAe+4C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAA6C,IAA3C,uBAAEqzG,GAAwBrzG,EACjC,MAAM,OAAEvN,EAAM,SAAEC,EAAUoB,KAAMsD,IAAoBzE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EACzF,IAAKS,IAAWC,IAAa0E,EAC3B,MAAO,CAAC,EAGV,MACEvC,iBAAiB,WACfqI,EAAU,SAAEpI,EAAUqC,WAAYm8G,EAAiB,UAAE/1G,EAAS,WAAEC,KAEhElK,EAAAA,EAAAA,IAAetB,GAEb6H,GAAeC,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GAClDokB,EAAgC,cAApB1f,GACd4f,EAAAA,EAAAA,IAAyBhlB,EAAQS,IACjCskB,EAAAA,EAAAA,IAAgB/kB,EAAQS,EAAQC,GAC9BukF,GAAgBtvE,EAAAA,EAAAA,IAA0B3V,GAC1Cu2F,EAAezzF,IAAarC,EAC5B8gH,EAAoBD,GAAmB37G,KAAK/D,IAAOkT,EAAAA,EAAAA,IAAkB9U,EAAQkL,EAAatJ,KAEhG,IAAIgE,EASAS,EACJ,GATIwB,IAAiBw5G,EACnBz7G,GAAUkP,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQoH,GACnCid,EACTlf,GAAU2d,EAAAA,EAAAA,IAAqBvjB,EAAQS,EAAQC,EAAU0E,GAChDmxF,GAA8C,IAA9B+qB,EAAmBnhH,SAC5CyF,EAAU27G,IAAoB,IAI5B15G,GAAgBjC,IAAYy7G,EAAwB,CACtD,MAAM,YAAEt4C,GAAgBnjE,EAClBy8D,GAAiBC,EAAAA,EAAAA,IAAqBtiE,EAAQS,GAChDsoE,IAAgBA,EAAYuyB,eAAiBj5B,KAC/Ch8D,GAASs8D,EAAAA,EAAAA,IAAsB3iE,EAAQ4F,IAGpCS,GAAW0iE,GAAaE,iBAC3B5iE,GAASC,EAAAA,EAAAA,IAAatG,EAAQ4F,GAElC,MAAW2wF,IACL3wF,IACFS,GAASs8D,EAAAA,EAAAA,IAAsB3iE,EAAQ4F,GAClCS,IACHA,GAASC,EAAAA,EAAAA,IAAatG,EAAQ4F,KAG7BS,IACHA,GAASk3B,EAAAA,EAAAA,IAASryB,IAAe6Y,EAAAA,EAAAA,IAAW/jB,EAAQkL,IAAenI,EAAAA,EAAAA,IAAW/C,EAAQkL,KAI1F,MAAMs2G,EAAuBD,GAAmBxzE,MAAM0zE,GACpDA,GAASj0G,QAAQvJ,MAAQgE,OAAOC,KAAKu5G,EAAQj0G,SAASrN,OAAS,IAGjE,MAAO,CACL0H,eACAid,YACAlf,UACAS,SACA4+E,gBACAy8B,uBAAwBnrB,EAAe+qB,EAAmBnhH,YAASU,EACnE0K,YACAC,aACAg2G,uBACAr6F,sBAAsBC,EAAAA,EAAAA,IAA2BpnB,GAClD,GApEe2gD,EAxNuCvgD,IAarD,IAbsD,aAC1DyH,EAAY,UACZid,EAAS,QACTlf,EAAO,OACPS,EAAM,cACN4+E,EAAa,uBACby8B,EAAsB,UACtBn2G,EAAS,WACTC,EAAU,qBACVg2G,EAAoB,uBACpBH,EAAsB,qBACtBl6F,EAAoB,QACpBw6F,GACDvhH,EACC,MAAM,gBACJqI,EAAe,aACf+a,EAAY,aACZ9a,EAAY,uBACZk5G,EAAsB,oBACtBC,EAAmB,qBACnBC,EAAoB,gBACpBC,IACE7oG,EAAAA,EAAAA,MAEEopC,GAAMvB,EAAAA,EAAAA,IAAuB,MAC7B17C,GAAO25C,EAAAA,GAAAA,KAEPu3C,EAAe5uF,QAAQ+5G,GACvBl1D,EAAU7kD,SACZE,GAAgBid,IAAclf,GAC5BS,GAAUq7G,GAEVM,GAAarsD,EAAAA,GAAAA,GACjB,CAAC+rD,GACDA,EApC4B,SAoCuB7gH,IAG/C,aACJqqD,EAAY,qBAAEE,IACZC,EAAAA,GAAAA,GAAkB22D,GAAcx1D,OAAS3rD,GAAYokF,OAAepkF,GAAYokF,GAE9Eg9B,GAAgB1lE,EAAAA,GAAAA,IAAgB,KAChC10C,IAAiBw5G,EACnB54G,EAAgB,CAAEpB,eAAWxG,IACpBikB,EACTtB,EAAa,CAAEnc,eAAWxG,IACjB6gH,GACTK,IAEFJ,KAAW,KAGbnlE,EAAAA,EAAAA,KAAU,IAAOgQ,GAAU/G,EAAAA,GAAAA,GAAsBw8D,QAAiBphH,GAAY,CAAC2rD,EAASy1D,IAExF,MAAMC,GAAqB3lE,EAAAA,GAAAA,IAAgB,KACrCg6C,GACJ7tF,EAAa,CAAEjI,OAAQmF,EAASnF,OAAQ4G,UAAWzB,EAAShE,GAAIK,mBAAmB,GAAO,IAGtFkgH,GAAmB5lE,EAAAA,GAAAA,IAAiBtqC,IACxCA,EAAE4yC,kBACFo9D,GAAe,IAGXG,GAA6B7lE,EAAAA,GAAAA,IAAgB,KACjDqlE,GAAwB,KAGpB,kBACJzkD,EAAiB,oBAAEib,EAAmB,kBAAE/a,EAAiB,uBACzDC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlb,GAErB+/D,GAAoB9lE,EAAAA,GAAAA,IAAgB,IAAM+F,EAAIzxB,UAC9CyxF,GAAiB/lE,EAAAA,GAAAA,IAAgB,IAAM+F,EAAIzxB,UAC3C0xF,GAAiBhmE,EAAAA,GAAAA,IAAgB,IAAM+F,EAAIzxB,QAAS6rB,cAAc,oCAElE,UACJkK,EAAS,UAAEuG,EAAS,iBAAEtG,EAAgB,iBAAE27D,EAAkBpiE,MAAOqiE,IAC/DC,EAAAA,GAAAA,GACFtqC,EACAiqC,EACAC,EACAC,GAGI5xF,GAAYuvB,EAAAA,GAAAA,GAAe,0BAA2BkL,GAEtDu3D,GAAW5iE,EAAAA,EAAAA,KAAQ,IACnBl4C,IAAiBw5G,EACZ,aAELv8F,EACK,YAELyxE,EACK,oBADT,GAKC,CAACzxE,EAAWyxE,EAAc1uF,EAAcw5G,IAErCxoC,EAAa6oC,GAA0BA,EAAyB,EAClEr8G,EAAK,wBAAyBq8G,QAC9B7gH,EAEE+hH,GAAkB7iE,EAAAA,EAAAA,KAAQ,KAC9B,IAAKn6C,IAAY2wF,IAAiB3wF,EAAQ4H,QAAQvJ,OAASsH,GAAa4b,EAAsB,OAAOvhB,EAErG,MAAMi9G,GAAetG,EAAAA,EAAAA,IAAiB32G,EAAQ4H,QAAQvJ,MACtD,MAAO,IACF2B,EACH4H,QAAS,IACJ5H,EAAQ4H,QACXvJ,KAAM4+G,GAET,GACA,CAAC17F,EAAsBovE,EAAc3wF,EAAS2F,IAEjD,GAAK2/C,EAIL,OACE7N,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWA,EAAW2xB,IAAKA,EAAK+b,cAAehB,EAAmBte,QAASse,GAC9EhgB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,iCACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,sBACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,OAAQyiE,MAEvCtlE,EAAAA,GAAAA,cAAC4lD,GAAe,CACdtyE,UAAU,eACV/qB,QAASg9G,EACTv8G,OAASkF,OAAqB1K,EAATwF,EACrBwyE,WAAYA,EACZ/nE,MAAOgU,EAAYzf,EAAK,eAAiBkG,EAAYlG,EAAK,qCAAkCxE,EAC5Fk+C,QAASmjE,EACTnpC,eAAgBwd,IAElBl5C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,UAAU,kBACVrY,OAAK,EACLwqG,OAAK,EACL1jE,MAAM,cACN8F,UAAW7/C,EAAK,UAChB05C,QAASojE,GAET9kE,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAEd4lE,GACCl5C,EAAAA,GAAAA,cAAC6P,GAAAA,EAAI,CACH5qD,OAAQ66D,EACRtW,iBAAkBA,EAClB27D,iBAAkBA,EAClB57D,UAAWA,EACXuG,UAAWA,EACX/M,MAAOqiE,EACP9xF,UAAU,uBACVkyB,QAASya,EACTzN,oBAAqB0N,GAErBlgB,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAOh7C,OAAkC1K,EAAtB,oBACnBq+D,WAAY3zD,EAAY8xC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,+BAA6B9vB,EAElEk+C,QAASA,IAAM8iE,EAAoB,CACjCt2G,WAAW,KAGZlG,EAAKq8G,EAAyB,EAAI,kBAAoB,oBAEzDrkE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAMh7C,EAAY,yBAAsB1K,EACxCq+D,WAAa3zD,OAAsD1K,EAA1Cw8C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,0BAEtCouB,QAASA,IAAM8iE,EAAoB,CACjCt2G,WAAW,KAGZlG,EAAKq8G,EAAyB,EAAI,kBAAoB,oBAExDF,GACCnkE,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC0lE,GAAAA,EAAa,MACd1lE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAO/6C,OAAmC3K,EAAtB,oBACpBq+D,WAAY1zD,EAAa6xC,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,+BAA6B9vB,EAEnEk+C,QAASA,IAAM+iE,EAAqB,CAClCt2G,YAAY,KAGbnG,EAAKq8G,EAAyB,EAAI,0CAA4C,gBAEjFrkE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CACPC,KAAM/6C,EAAa,yBAAsB3K,EACzCq+D,WAAa1zD,OAAuD3K,EAA1Cw8C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,0BAEvCouB,QAASA,IAAM+iE,EAAqB,CAClCt2G,YAAY,KAGbnG,EAAKq8G,EAAyB,EAAI,0CAA4C,iBAIrFrkE,EAAAA,GAAAA,cAAC0lE,GAAAA,EAAa,MACd1lE,EAAAA,GAAAA,cAACiJ,GAAAA,EAAQ,CAACC,KAAK,UAAUxH,QAASqjE,GAC/B/8G,EAAK,sBAKV,KCpQV,IAAe23C,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,YAAE36B,GAAgB26B,EAClB+lE,GAAkB7lE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB96B,EAAYniB,QAGvF,OAAO6iH,EAAkB3lE,EAAAA,GAAAA,cAAC2lE,EAAoB/lE,QAAYp8C,CAAS,ICGrE,IAAem8C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE36C,GAAW26C,EACbgmE,GAAiB9lE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmB96C,GAGzE,OAAO2gH,EAAiB5lE,EAAAA,GAAAA,cAAC4lE,EAAmBhmE,QAAYp8C,CAAS,ICGnE,IAAem8C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,OAAE36C,GAAW26C,EACbimE,GAAY/lE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAc96C,GAG/D,OAAO4gH,EAAY7lE,EAAAA,GAAAA,cAAC6lE,EAAcjmE,QAAYp8C,CAAS,ICGzD,IAAem8C,EAAAA,EAAAA,KARsBC,IACnC,MAAM,OAAE36C,GAAW26C,EACbkmE,GAAWhmE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAAa96C,GAG7D,OAAO6gH,EAAW9lE,EAAAA,GAAAA,cAAC8lE,EAAalmE,QAAYp8C,CAAS,IC+BjDuiH,GAAU,IAAIpN,OAAOqN,EAAAA,IAAkB,KA8F7C,IAAermE,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAAuC,IAArC,OAAEvN,EAAM,SAAEC,GAAUsN,EAC3B,MAAMgU,GAAYC,EAAAA,EAAAA,IAAgBjiB,EAAQS,EAAQC,GAClD,MAAO,CACLshC,OAAOmhB,EAAAA,EAAAA,IAAYnjD,GACnB2mB,gBAAgBrlB,EAAAA,EAAAA,IAAetB,GAAQ2mB,eACvC3E,YACD,GAPe2+B,EA5F8BvgD,IAQ5C,IAR6C,OACjDK,EAAM,SACNC,EAAQ,QACR4iH,EAAO,WACPxlE,EAAU,eACVn3B,EAAc,UACd3E,EAAS,MACTggB,GACD5hC,EACC,MAAM,mBACJmjH,EAAkB,oBAClBnhG,EAAmB,qBACnBohG,IACEtqG,EAAAA,EAAAA,MAEEuqG,GAA2B1iE,EAAAA,EAAAA,MAE3B2iE,GAAsBC,EAAAA,GAAAA,KAAqB,KAC/C,MAAM3wE,GAAgBvlC,EAAAA,EAAAA,IAAkB61G,KAClCM,EAAa5wE,EAActwB,UAAUvV,MAAM02G,GAC/CA,EAAO/hH,OAASq6G,EAAAA,GAAAA,UAKlB,OAFAsH,EAAyB5yF,QAAUmiB,EAE5B4wE,GAAYlvG,KAAOs+B,EAAc/uC,KAAKylB,MAAM05F,MAAW,EAAE,GAC/D,CAACE,GA7Bc,KA6BS,GAErBQ,GAAUC,EAAAA,GAAAA,GAAiBL,EAAqB,CAACA,EAAqBJ,IAAU,IAEtF9mE,EAAAA,EAAAA,KAAU,KACR,MAAM/rC,EAAOqzG,IACP9wE,EAAgBywE,EAAyB5yF,QAE3CpgB,EACF8yG,EAAmB,CAAEt/G,KAAM+uC,KAE3B5wB,IACAohG,EAAqB,CAAE/iH,SAAQC,aACjC,GACC,CAACojH,EAASrjH,EAAQC,KAErBgyD,EAAAA,GAAAA,IAAc,KACZtwC,IACAohG,EAAqB,CAAE/iH,SAAQC,YAAW,GACzC,CAACD,EAAQ2hB,EAAqB1hB,EAAU8iH,IAE3C,MAAMh3D,GAAUkX,EAAAA,GAAAA,IAAgB,IACvB/7D,QAAQgf,GAAkB28F,MAActhG,IAAc87B,IAC5D,CAACA,EAAYwlE,EAASthG,EAAW2E,KAC9B,aAAEukC,EAAY,qBAAEE,IAAyBC,EAAAA,GAAAA,GAAkBmB,GAE3Dw3D,GAAmBx+C,EAAAA,GAAAA,GAAiB7+C,GAAgB,GAEpDs9F,GAA4B1nE,EAAAA,GAAAA,IAAgB,KAChDinE,EAAqB,CAAE/iH,SAAQC,WAAUshB,WAAW,GAAO,IAG7D,IAAKkpC,IAAiB84D,EACpB,OAIF,MAAM,MAAEjqF,KAAUmqF,GAAwBF,EACpCG,EAAc,CAClB32G,QAAS,CACPg8E,QAAS06B,IAIb,OACE7mE,EAAAA,GAAAA,cAAA,OAAK1sB,WAAWuvB,EAAAA,GAAAA,GAAe,iBAAkBkL,IAC/C/N,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,4BACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,oBAEf0sB,EAAAA,GAAAA,cAACgnD,GAAO,CAACz+F,QAASu+G,EAAa96B,WAAS,EAACrnD,MAAOA,IAChDqb,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,UAAU,uBACVrY,OAAK,EACLwqG,OAAK,EACL1jE,MAAM,cACN8F,UAAU,wBACVnG,QAASklE,GAET5mE,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,sBAGb,KCtHV,IAAeqsB,EAAAA,EAAAA,KARwBC,IACrC,MAAM,OAAE36C,GAAW26C,EACbmnE,GAAajnE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAe96C,GAGjE,OAAO8hH,EAAa/mE,EAAAA,GAAAA,cAAC+mE,EAAennE,QAAYp8C,CAAS,IC+C3D,IAAem8C,EAAAA,EAAAA,KA7CqB58C,IAK9B,IAL+B,OACnCkC,EAAM,QACNy8C,EAAO,KACP96C,EAAI,WACJ65C,GACD19C,EAEC,MAAMikH,GAAUtjE,EAAAA,EAAAA,IAAwB,MAuBxC,OArBAvE,EAAAA,EAAAA,KAAU,KACR,MAAM8nE,EAASD,EAAQxzF,QACvB,IAAKyzF,EAAQ,OAEb,MAAM7uG,EAAQ6uG,EAAOC,YAAc,EAEhBD,EAAO5zC,QAAQ,aACvBtwB,MAAM+hC,YAAY,wBAA0B,GAAE1sE,MAAU,GAClE,CAACnT,EAAQ2B,KAEZu4C,EAAAA,EAAAA,KAAU,KACR,MAAM8nE,EAASD,EAAQxzF,QACvB,IAAKyzF,EAAQ,OAEb,MAAME,EAAaF,EAAO5zC,QAAQ,aAElC,MAAO,KACL8zC,EAAWpkE,MAAMqkE,eAAe,wBAAwB,CACzD,GACA,IAGDpnE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,WAAWuvB,EAAAA,GAAAA,GAAe,WAAY59C,GAAU,QAChDgW,OAAK,EACL8mC,MAAM,cACNsf,SAAU5gB,EACViB,QAASA,EACTmG,UAAU,6BAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,WAAWuvB,EAAAA,GAAAA,GAAe,gBAAiB,OAAQ,cAAe59C,GAAU,UAC/E+6C,EAAAA,GAAAA,cAAA,QAAMiF,IAAK+hE,EAAS1zF,UAAU,iBAAiB1sB,GACxC,I,gBC6JRygH,GAAe,SAAfA,GAAe,OAAfA,EAAe,YAAfA,EAAe,gBAAfA,EAAe,YAAfA,EAAe,oBAAfA,CAAe,EAAfA,IAAe,IAWpB,MAAMC,GAA2B,8BAu1CjC,IAAe3nE,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAM6d,KAEW,IAAAiO,EAAA,IAFT,OACPrrB,EAAM,SAAEC,EAAQ,gBAAE0E,EAAe,SAAEs8C,GACpC7jC,EACC,MAAMjP,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B2rG,EAAU3rG,IAAWmkH,EAAAA,KAAkBpiF,EAAAA,EAAAA,IAAUxiC,EAAQS,QAAUI,EACnE0gE,EAAgB55D,QAAQykG,GACxB/pC,GAAiBC,EAAAA,EAAAA,IAAqBtiE,EAAQS,GAC9CokH,GAAiBtnF,EAAAA,EAAAA,IAAS98B,GAC1B6rG,EAAkB/qC,GAAgB32C,EAAAA,EAAAA,IAAmB5qB,EAAQosG,EAAQxqG,SAAMf,EAC3Ey1F,EAAgBuuB,OAAsDhkH,GAArCquC,EAAAA,EAAAA,IAAmBlvC,EAAQS,GAC5DqkH,GAAgCvjD,IAAkBsjD,KACnDE,EAAAA,EAAAA,IAA0C/kH,EAAQS,EAAQC,GACzDunB,GAAe8tB,EAAAA,EAAAA,IAAmB/1C,EAAQS,EAAQC,IAClD,SACJywB,EAAQ,sBAAE6zF,EAAqB,yBAAEC,EAAwB,4BAAEC,GACzDllH,EAAOiY,SAASC,MACditG,EAAoBnlH,EAAOqxB,cAAc+zF,EAAAA,KACzC/zF,EAAgBF,IAAai0F,EAAAA,IAA0BplH,EAAOqxB,cAAcF,QAAYtwB,EACxFwkH,EAAuBP,EAA+BA,EAA6BljH,QAAKf,EACxFykH,EAAkBD,GAAuBvwG,EAAAA,EAAAA,IAAkB9U,EAAQS,EAAQ4kH,QAAwBxkH,GACnG,cAAEsX,GAAkBnY,EACpBulH,EAAkBjvB,EAAeA,GAAc1tE,UAAYzQ,OAAgBtX,EAC3E+nB,EAAWha,GAAMma,eAAiBw8F,IACtC32G,EAAKma,cAAcglB,MAAMloB,GAASA,EAAKjkB,KAAO2jH,IAC1CA,EACC32G,GAAM42G,aAAaC,UAAY72G,GAAMhN,QAAKf,GAE3C6kH,EAAa98F,GAAW7E,EAAAA,EAAAA,IAAW/jB,EAAQ4oB,QAAY/nB,EACvDgoB,GAAc68F,GAAc98F,GAAW7lB,EAAAA,EAAAA,IAAW/C,EAAQ4oB,QAAY/nB,EACtE8kH,GAAqBC,EAAAA,EAAAA,IAAyB5lH,EAAQS,GACtDolH,GAAsBC,EAAAA,EAAAA,IAA0B9lH,EAAQS,GACxDyB,GAAqBvB,EAAAA,EAAAA,IAAyBX,GAC9C+lH,EAA0BtlH,IAAWyB,GAAoBzB,QAC1DC,IAAawB,GAAoBxB,UACjC0E,IAAoBlD,GAAoBJ,KACvCgiB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQS,GAC1BulH,EAAsF,QAAjEl6F,EAAIhI,KAAS8G,EAAAA,EAAAA,IAAmB5qB,EAAQ8jB,EAAKliB,KAAKkpB,uBAAe,IAAAgB,GAAAA,EACtFm6F,EAAW3vB,GAAc2vB,SAEzBluF,EAAmC,cAApB3yB,GACjB8gH,EAAAA,EAAAA,IAA4BlmH,EAAQS,IACpCu3B,EAAAA,EAAAA,GAAmBh4B,EAAQS,EAAQC,GAEjCmH,GAAeC,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GAElDyB,GAAWb,EAAAA,EAAAA,IAAetB,GAEhC,MAAO,CACLmmH,eAAgBhkH,EAASwV,UACzByuG,gBAAgB7iG,EAAAA,EAAAA,IAAqBvjB,EAAQS,EAAQC,EAAU0E,GAC/Dw0B,gBAAiB55B,EAAO45B,gBACxB/xB,eACA+b,OAAOU,EAAAA,EAAAA,IAAYtkB,EAAQS,EAAQC,GACnCkO,OACA2yD,gBACAc,iBACA0jD,0BACAM,wBAAwBC,EAAAA,EAAAA,IAA6BtmH,EAAQS,GAC7DsyD,UAAWnkD,GAAOkzD,EAAAA,EAAAA,IAAclzD,QAAQ/N,EACxCqhE,oBAAoB94D,EAAAA,EAAAA,IAAyBpJ,EAAQ0hD,GACrDygB,oBAAoBC,EAAAA,EAAAA,IAAqBpiE,GACzCumH,oBACsB,WAApBnhH,GACGuC,QAAQsgB,GAAc9nB,QAE3BqmH,eAAoC,cAApBphH,EAChBigH,uBACAoB,uBAAwBnB,GAAiBoB,oBACzCnwB,aAAc91F,IAAW0B,EAASU,gBAAgBC,SAClD4J,UAAWvK,EAASuK,UACpBi6G,iBAAkB3mH,EAAOoS,SAASwb,SAASxb,SAC3Cw0G,oBAAqB5mH,EAAO8S,aAAa8a,SAASxb,SAClDy0G,iBAAkBvwB,GAAc7jD,QAChCq0E,gBAAiB9mH,EAAO0iC,eAAetO,QACvCjc,gBACAuhB,aAAc15B,EAAO05B,aACrB92B,qBAAsBT,EAASS,qBAC/BoiH,wBACAC,2BACAC,8BACAnzG,aAAc/R,EAAO+R,aACrBozG,kBAAmBA,GAAmB5zF,SACtCF,cAAeA,GAAeE,SAC9B4J,WAAYh5B,EAASg5B,WAAWC,WAChC2rF,mBAAoB5kH,EAASg5B,WAAW3gB,UACxCwsG,gBAAiB1wB,GAAc2wB,YAC/BA,YAAa3a,EAAmBA,EAAgBtzD,SAASkuE,WAAY,OAASrmH,EAC9EsmH,cAAe7a,GAAiBtzD,SAASC,WACzCysE,aACA78F,aACAD,WACAmP,eACA4tF,qBACAE,sBACA5G,WAAYj/G,EAAOm/B,WAAWC,KAC9BgoF,oBAAoBC,EAAAA,EAAAA,GAAernH,EAAQS,GAC3CuhC,OAAOmhB,EAAAA,EAAAA,IAAYnjD,GACnBsnH,eAAe/2F,EAAAA,GAAAA,GAAmBvwB,EAAQ,sBAAwBunH,EAAAA,IAClEC,cAAcj3F,EAAAA,GAAAA,GAAmBvwB,EAAQ,iBACzCmnB,sBAAsBC,EAAAA,EAAAA,IAA2BpnB,GACjDgmH,wBACAhwG,mBAAoBhW,EAAOgW,mBAC3BiwG,WACA/jH,qBACD,GAzGey+C,EA30CwBvgD,IA6DtC,IA7DuC,cAC3C+lH,EAAa,cACbsB,EAAa,eACbjB,EAAc,uBACdH,EAAsB,QACtBtjD,EAAO,SACPrhB,EAAQ,WACRgmE,EAAU,eACVtB,EAAc,OACd3lH,EAAM,SACNC,EAAQ,mBACRwB,EAAkB,gBAClBkD,EAAe,MACfwe,EAAK,KACLhV,EAAI,wBACJm3G,EAAuB,qBACvB5+F,EAAoB,sBACpB6+F,EAAqB,gBACrBpsF,EAAe,cACf2nC,EAAa,eACbc,EAAc,UACdtP,EAAS,cACTu0D,EAAa,mBACbplD,EAAkB,mBAClBC,EAAkB,aAClBo0B,EAAY,UACZ7pF,EAAS,qBACT24G,EAAoB,uBACpBoB,EAAsB,oBACtBF,EAAmB,iBACnBI,EAAgB,oBAChBC,EAAmB,iBACnBC,EAAgB,gBAChBC,EAAe,cACf3uG,EAAa,aACbqvG,EAAY,aACZ9tF,EAAY,qBACZ92B,EAAoB,sBACpBoiH,EAAqB,yBACrBC,EAAwB,kBACxBE,EAAiB,cACjB9zF,EAAa,aACbtf,EAAY,WACZopB,EAAU,mBACV4rF,GAAkB,YAClBE,GAAW,gBACXD,GAAe,WACftB,GAAU,WACV78F,GAAU,SACVD,GAAQ,aACRmP,GAAY,aACZlwB,GAAY,mBACZ89G,GAAkB,oBAClBE,GAAmB,cACnBsB,GAAa,WACblI,GAAU,mBACVmI,GAAkB,mBAClBpxG,GAAkB,MAClBgsB,GAAK,SACLikF,GAAQ,4BACRf,IACD9kH,EACC,MAAM,YACJyf,GAAW,WACX8nG,GAAU,WACV58F,GAAU,gBACVloB,GAAe,cACf4+B,GAAa,eACbmmF,GAAc,qBACdC,GAAoB,SACpB7jH,GAAQ,eACR8jH,GAAc,oBACdC,GAAmB,WACnBC,GAAU,uBACVC,GAAsB,cACtB3iF,GAAa,qBACb4iF,GAAoB,iBACpB37G,GAAgB,oCAChB4e,KACEjS,EAAAA,EAAAA,MAEE7T,IAAO25C,EAAAA,GAAAA,KAGPmpE,IAAcpnE,EAAAA,EAAAA,IAAuB,MAErCqnE,IAAWrnE,EAAAA,EAAAA,IAAuB,OAEjCuiE,GAAS+E,KAAW32B,EAAAA,GAAAA,GAAU,KAC9B42B,GAAWC,KAAgBtqE,EAAAA,EAAAA,KAAS,GACrCuqE,IAAoBC,EAAAA,GAAAA,GAAqB3jD,EAAAA,KACzC4jD,IAA6B3nE,EAAAA,EAAAA,MAC7B4nE,IAAoBxiD,EAAAA,GAAAA,GAAYshD,IAC9BhyG,MAAOu1B,IAAgBC,GAAAA,EAAAA,MACzBliB,GAAgBna,GAAMma,cACtB6/F,GAAgB7/F,KAChBA,GAAc5oB,OAAS,IAAM4oB,GAAcglB,MAAMloB,GAASA,EAAKjkB,KAAOuW,MAErE0wG,GAAoBC,GAAqBC,KAA6B5nE,EAAAA,GAAAA,KACvE6nE,IAAoBC,EAAAA,GAAAA,GAAqBxoH,EAAQC,IAEvD87C,EAAAA,EAAAA,IAAU0sE,GAAAA,GAAmC,CAAC5F,KAE9C,MAAM6F,IAAgCpoE,EAAAA,EAAAA,IAAO,IAEtCqoE,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYjD,EAAwB0C,KAExEhnE,EAAAA,GAAAA,IAAW,KACTwmE,IAAa,EAAK,GAhHW,MAmH/B/rE,EAAAA,EAAAA,KAAU,KACRksE,GAA2B73F,aAAUhwB,CAAS,GAC7C,CAACJ,KAEJ+7C,EAAAA,EAAAA,KAAU,KACJ/7C,GAAUi5B,GAAgBqpC,GAC5B8kD,GAAqB,CAAEpnH,UACzB,GACC,CAACsiE,EAAStiE,EAAQonH,GAAsBnuF,EAAch5B,KAEzD87C,EAAAA,EAAAA,KAAU,KACJ/7C,GAAUmO,GAAQ8qB,IAAiB3Q,IAAiBg6C,IAAWhB,EAAAA,EAAAA,IAAiBnzD,IAClFo5G,GAAW,CAAEvnH,UACf,GACC,CAACmO,EAAMnO,EAAQsiE,EAASrpC,EAAcsuF,GAAYj/F,KAErD,MAAMwgG,IAA+BxoE,EAAAA,EAAAA,KAAO,IAC5C2R,EAAAA,GAAAA,IAAc1kD,IAAqC,IAAnCw7G,EAAYC,GAAkBz7G,EAE5Cu7G,GAA6B14F,QAAUlpB,QAAQlH,IAAW+oH,GAAczgG,KAAkB0gG,EAAkB,GAC3G,CAAChpH,EAAQsoB,MAEZurC,EAAAA,EAAAA,KAAgB,KACT6zD,GAAYt3F,UAEjBs3F,GAAYt3F,QAAQikC,UA1IP,8uBA0I2B,GACvC,IAEH,MAAOxyC,GAAai4F,KAAkBt8D,EAAAA,EAAAA,IAA0B,IAC1DyrE,GAAiB/hH,QAAQ2a,GAAYniB,SAErC,gBACJmT,GAAe,YAAEq2G,GAAW,eAAE5K,GAAc,eAAEC,GAAc,oBAAE4K,GAAmB,cACjFp2G,GAAa,iBAAEP,GAAgB,cAAEI,GAAa,cAAEF,GAAa,cAAED,GAAa,iBAAEE,KAC5E2sC,EAAAA,EAAAA,KAAQ,KAAMtsC,EAAAA,EAAAA,IAA4B7E,EAAM2yD,IAAgB,CAAC3yD,EAAM2yD,IAErEsoD,IAAqB52G,KAAqBmzG,GAE1C,yBACJnG,GAAwB,uBACxB6J,GAAsB,kBACtBC,GAAiB,kBACjBC,GAAiB,iBACjBhK,GAAgB,gBAChBiK,GAAe,uBACfC,GAAsB,qBACtBC,IpBzXW,SAA2B/pH,GAoBvC,IApBwC,YACzCkiB,EAAW,cACXglG,EAAa,QACbe,EAAO,eACP9N,EAAc,OACd95G,EAAM,cACN4S,EAAa,cACbF,EAAa,cACbD,EAAa,iBACbE,GAWDhT,EACC,MAAM,sBAAE60B,EAAqB,oCAAE9J,IAAwCjS,EAAAA,EAAAA,OAChE6wG,EAAmBK,IAAwBnsE,EAAAA,EAAAA,KAAkB,IAC7D6rE,EAAwBO,IAA6BpsE,EAAAA,EAAAA,KAAkB,IACvEgiE,EAA0BqK,IAA+BrsE,EAAAA,EAAAA,SAA8Bp9C,GAExFqpH,GAAyB3tE,EAAAA,GAAAA,IAAgB,KAC7Cg+D,EAAe94G,EAAAA,EAAiB,IAG5B0oH,GAAuB5tE,EAAAA,GAAAA,IAC1BguE,IACC,MAAM9N,EAAqC,mBAAb8N,EAA0BA,EAASjoG,GAAeioG,EAChF,GAAK9N,EAAet8G,OAKpB,GAAIs8G,EAAe1uE,MAAM/tB,IACvB,MAAMle,EAAOghB,GAAkB9C,GAE/B,MAAiB,UAATle,IAAqBuR,IAAkBD,GAChC,UAATtR,IAAqBqR,IAAkBC,GAC9B,UAATtR,IAAqBoR,IAAkBE,GAC9B,SAATtR,IAAoBsR,CAAiB,IAE3C+X,EAAoC,CAAE1qB,gBACjC,GAAIg8G,EAAe1uE,MAAK//B,IAAA,IAAC,KAAEwxC,GAAMxxC,EAAA,OAAKwxC,EAAO8nE,CAAa,IAC/DryF,EAAsB,CACpBhf,MAAO,2BAEJ,CACLskG,EAAekC,GACf,MAAM54F,EAAc44F,EAAe1uE,MAAM/tB,IACvC,MAAMle,EAAOghB,GAAkB9C,GAE/B,MAAiB,UAATle,IAAqBuR,GACd,UAATvR,IAAqBqR,GACZ,UAATrR,IAAqBoR,CAAc,IAG3Ck3G,EAAqBziH,QAAQkc,GAAezQ,IAC5Ci3G,GAA2Bj3G,EAC7B,MA7BE82G,GA6BF,IAkBJ,MAAO,CACLjK,2BACA+J,mBAhBwBztE,EAAAA,GAAAA,IAAgBjiC,MAAOpW,EAAesxD,KAC9D20D,EAAqB,IAChB7nG,WACM+L,QAAQC,IAAIpqB,EAAMyB,KAAKmxB,GAC9Bm8E,GAAgBn8E,EAAK8Y,KAAM9Y,EAAM,CAAE49E,oBAAqBl/C,QAAa30D,QAEvE,IAWFm/G,kBARuBzjE,EAAAA,GAAAA,IAAgBjiC,MAAOpW,EAAesmH,KAC7DL,QAA2B97F,QAAQC,IAAIpqB,EAAMyB,KAAKmxB,GAASm8E,GAAgBn8E,EAAK8Y,KAAM9Y,OACtFwzF,EAA4BE,EAAmB,IAO/CP,gBAAiB5B,EACjB6B,yBACAC,uBACAL,yBACAC,oBAEJ,CoB+RMU,CAAmB,CACrBnoG,eACA+lG,WACA9N,kBACA+M,gBACA7mH,SACA4S,iBACAF,iBACAD,iBACAE,uBAGKs3G,GAAmBC,GAAiBC,KAAoBzpE,EAAAA,GAAAA,MACxD0pE,GAAsBC,GAAoBC,KAAuB5pE,EAAAA,GAAAA,MACjE6pE,GAAkBC,GAAgBC,KAAmB/pE,EAAAA,GAAAA,MACrDgqE,GAAkBC,GAAgBC,KAAmBlqE,EAAAA,GAAAA,MACrDmqE,GAAmBC,GAAiBC,KAAoBrqE,EAAAA,GAAAA,MACxDsqE,GAAiBC,GAAcC,KAAexqE,EAAAA,GAAAA,MAE/C,oBACJyqE,GAAmB,mBACnBC,GAAkB,oBAClBC,GAAmB,qBACnBC,GAAoB,kBACpBC,GACAC,gBAAiBC,GAAa,mBAC9BC,ICtZsBC,MAExB,MAAMH,GAAkBlrE,EAAAA,EAAAA,IAA0B,OAC3CgrE,EAAsBM,IAA2BpuE,EAAAA,EAAAA,MAClDkuE,GAAqBprE,EAAAA,EAAAA,OACpBirE,EAAmBM,IAAwBruE,EAAAA,EAAAA,OAElDzB,EAAAA,EAAAA,KAAU,KAEJ+vE,EAAAA,IAAaC,EAAAA,IACVC,IACP,GACC,IAEH,MAAMb,GAAsBrvE,EAAAA,GAAAA,IAAgBjiC,UAC1C,IACE,MAAM,KAAEkiD,EAAI,MAAExtC,SAAgBy9F,IAAsBC,IAC9CT,EAAgBp7F,UACds7F,EAAmBt7F,SAAWjkB,KAAKC,MAAQ,GAAM,IACnD05D,EAAAA,EAAAA,KAAgB,KACd0lD,EAAgBp7F,QAASuvB,MAAMusE,UAAa,SAA4B,IAAnBD,GAAc,sBAA2B,IAGlGJ,EAAqB1/G,KAAKC,OAC5B,IAEFs/G,EAAmBt7F,QAAUjkB,KAAKC,MAClCy/G,EAAqB1/G,KAAKC,OAE1Bw/G,EAAwB,CAAE7vD,OAAMxtC,SAIlC,CAHE,MAAOxa,GAEP+C,QAAQC,MAAMhD,EAChB,KAGIs3G,GAAsBvvE,EAAAA,GAAAA,IAAgB,KAC1C,GAAKwvE,EAAL,EAIAxlD,EAAAA,EAAAA,KAAgB,KACV0lD,EAAgBp7F,UAClBo7F,EAAgBp7F,QAASuvB,MAAMusE,UAAY,OAC7C,IAGF,IACE,OAAOZ,EAAsB/8F,OAK/B,CAJE,MAAOxa,GAGP,YADA+C,QAAQC,MAAMhD,EAEhB,CAdA,CAcA,IAGIq3G,GAAqBtvE,EAAAA,GAAAA,IAAgB,KACzC,GAAKwvE,EAAL,CAIAM,OAAwBxrH,GACxBsrH,EAAmBt7F,aAAUhwB,EAC7ByrH,OAAqBzrH,IAErB0lE,EAAAA,EAAAA,KAAgB,KACV0lD,EAAgBp7F,UAClBo7F,EAAgBp7F,QAASuvB,MAAMusE,UAAY,OAC7C,IAGF,IACE,OAAOZ,EAAsBvvD,MAK/B,CAJE,MAAOhoD,GAGP,YADA+C,QAAQC,MAAMhD,EAEhB,CAlBA,CAkBA,IAOF,OAJAgoC,EAAAA,EAAAA,KAAU,IACDuvE,GAAuBtmE,EAAAA,GAAAA,GAAsBomE,QAAsBhrH,GACzE,CAACkrH,EAAsBF,IAEnB,CACLD,sBACAE,sBACAD,qBACAE,uBACAC,oBACAC,kBACAE,qBACD,ED2TGC,IAEJnhC,EAAAA,GAAAA,IAAY,KACV+9B,GAAkB,CAAElnH,KAAM,eAAgB,GACzCiqH,IAAwBa,EAAAA,MAE3BpwE,EAAAA,EAAAA,KAAU,KACHuvE,IACH/C,GAAkB,CAAElnH,KAAM,UAC5B,GACC,CAACiqH,GAAsB/C,KAE1B,MAAM6D,IAAezc,EAAAA,GAAAA,GAAYzoG,QAAQy+G,KACzC5pE,EAAAA,EAAAA,KAAU,KACJ8mE,OAAcuJ,GAAah8F,SAC7Bm4F,GAAkB,CAAElnH,KAAM,UAC5B,GACC,CAACwhH,GAASuJ,GAAc7D,KAE3B,MAAMn2E,GAAUjkC,IAAQk+G,EAAAA,EAAAA,IAAYl+G,IAE9B,mBACJm+G,GAAkB,kBAClBC,GAAiB,eACjBC,GAAc,qBACdC,GAAoB,YACpBC,KACEC,EAAAA,GAAAA,GACFzlH,QAAQo7D,GAAWojD,GAAiBJ,GAA2Bf,IAA0B0E,IACzFpG,GACA+E,QACAxnH,EACAkR,EACAozG,EACA9zF,IAGI,yBACJg8F,GAAwB,wBACxBC,GAAuB,kBACvBC,KACEC,EAAAA,GAAAA,GACF7lH,QAAQo7D,GAAWojD,GAAiBJ,GAA2Bd,IAA6ByE,IAC5FpG,GACA+E,GACAG,GACAJ,GACAxB,IAGI,qBACJ6G,GAAoB,oBACpBC,I3BrcW,SACb1uF,EACAskF,EACAlxG,GAEA,MAAM,qBAAEu7G,EAAoB,sBAAEC,IAA0B10G,EAAAA,EAAAA,OAEjD20G,EAAkBC,EAAoBC,IAAwB5sE,EAAAA,GAAAA,IAAQ,GAEvE6sE,GAAiBjK,EAAAA,GAAAA,IAAiB,KACtC,MAAMnP,EAAO0O,IACb,IAAKtkF,IAAc41E,GAASqZ,EAAAA,IAAsBrZ,EAAKz0G,OAdxC,EAc8D,OAG7E,IADiBy0G,EAAKlrF,MAAMukG,EAAAA,GAAqBC,GAAAA,EAAejY,EAAAA,KACjD,OAEf,MAAMkY,GAAYC,EAAAA,GAAAA,GAAiBxZ,GAMnC,OALsBuZ,IACnBF,EAAAA,IAA0D,KAApCI,EAAAA,GAAAA,GAAqBF,KACvCF,EAAAA,IAAsBtmH,QAAQitG,EAAKlrF,MAAMqsF,MAI3CkY,EAAAA,GAAqBE,EAAYA,EAAUzkG,MAAM,gBAAgB,QAClE7oB,CAAS,GACZ,CAACyiH,EAAStkF,IAEPztB,GAAWmyD,EAAAA,GAAAA,IAAgB,IAAM/7D,QAAQqmH,MAAmB,CAACA,IAC7DM,EAAc3mH,QAAQyK,GAAUjS,QAiBtC,OAfAq8C,EAAAA,EAAAA,KAAU,KACR,IAAKxd,EAAW,OAEhB,MAAMq4D,EAAc22B,IAChB32B,EACGi3B,GACHX,EAAqB,CAAElnH,MAAO4wF,IAGhCu2B,GACF,GACC,CAAC5uF,EAAWgvF,EAAgBM,EAAaX,EAAsBC,KAElEpxE,EAAAA,EAAAA,IAAUuxE,EAAsB,CAACA,EAAsBzK,IAEhD,CACLmK,qBAAsB9lH,QAAQ4J,GAAY+8G,IAAgBT,GAC1DH,oBAAqBI,EAEzB,C2BqZMS,CACF5mH,QAAQo7D,GACHojD,GACAJ,GACAf,GACA1xG,KACCo2G,IACNpG,GACAqD,IAGI,qBACJ6H,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACFjnH,QAAQo7D,GAAWgjD,IAA4B2D,IAC/CpG,GACA+E,GACAG,GACAJ,GACAvB,EACAC,EACA3uG,IAIA7V,OAAQusH,GACR95G,MAAO+5G,GACPzrF,UAAW0rF,GACXlsF,SAAUmsF,GACV1rF,cAAe2rF,GACfp/G,QAASq/G,GACTC,aAAcC,GACdhsF,KAAMisF,GACNC,SAAUC,ItBneC,SACbvwF,EACAv+B,EACA6iH,EACAnoF,GAEA,MAAM,eAAEq0F,EAAc,eAAE1rF,EAAc,mBAAE2rF,IAAuBv2G,EAAAA,EAAAA,OAExD20G,EAAkBC,EAAoBC,IAAwB5sE,EAAAA,GAAAA,IAAQ,GAEvEuuE,GAA2BC,EAAAA,GAAAA,KAAqB,KACpD,MAAM/a,EAAO0O,IACb,OAAOtkF,GAAa41E,EAAK5pD,WAAW,KAoExC,SAAuB4pD,GACrB,IAAKA,EAAK5pD,WAAW,KACnB,OAAO8xD,GAGT,MAAM74G,EASR,SAAsB2wG,GASpB,OARAqI,GAAOnoD,UAAY8/C,EAAKjkG,QAAQ,QAAS,MAEzCssG,GAAOzsG,iBAA8B,SAAS1E,SAASyuB,IAChDA,EAAG2hF,YACN3hF,EAAG2hF,UAAY3hF,EAAGqiB,aAAa,OACjC,IAGKqgE,GAAOf,SAChB,CAnBe0T,CAAahb,GACpB1uG,EAASjC,EAAKylB,MAAMkzF,IAC1B,OAAK12G,EAIEg3G,GAAoBh3G,EAAO,GAAIA,EAAO,GAAkB,KAAdA,EAAO,KAAcjC,EAAKylB,MAAMmzF,KAHxEC,EAIX,CAhF+C+S,CAAcjb,GAAQkI,EAAc,GAC9E,CAACwG,EAAStkF,GAzBE,MA0BT,SACJhR,EAAQ,MAAE9sB,EAAK,YAAE67G,EAAW,gBAAEC,IAC5Bt5C,EAAAA,GAAAA,GAAgBgsD,EAA0B,CAACA,EAA0BpM,IAAU,IAEnF5wD,EAAAA,GAAAA,IAActyD,IAAoB,IAAlB0vH,GAAa1vH,EACvB0vH,GACFhsF,EAAe,CAAE9V,SAAU8hG,GAC7B,GACC,CAAC9hG,EAAU8V,KAEd0Y,EAAAA,EAAAA,KAAU,KACHwgE,GAELwS,EAAe,CACb/uH,SAAQutB,SAAUgvF,EAAiB97G,SACnC,GACD,CAACT,EAAQS,EAAOsuH,EAAgBxS,KAEnCxgE,EAAAA,EAAAA,IAAUuxE,EAAsB,CAACA,EAAsBzK,IAEvD,MACE1hH,GAAImT,EAAK,SACT8tB,EAAQ,cACRS,EAAa,OACb1zB,EAAM,QACNC,EAAO,UACPwzB,EAAS,KACTD,GACG45E,GAAmB7hF,IAAa6hF,IAAqB,CAAC,EAErD16G,EAASqF,SAASkI,GAAS1P,QAAU0iC,KAAcgrF,IAEzDrxE,EAAAA,EAAAA,KAAU,KACHl6C,GAAW0rB,GACdyhG,GACF,GACC,CAACntH,EAAQmtH,EAAoBzhG,IAEhC,MAAMshG,GAAW/yE,EAAAA,GAAAA,IAAgB,KAC1BygE,GAELwS,EAAe,CACb/uH,SAAQutB,SAAUgvF,EAAiB97G,QAAO0O,UAC1C,IAGJ,MAAO,CACLtN,SACAyS,QACAsuB,YACAR,WACAS,gBACAzzB,UACAs/G,aAAcrB,EACd1qF,KAAM25E,GAAe35E,EAAQ,IAAGpV,KAAYoV,SAASviC,EACrDyuH,WAEJ,CsB6ZMS,CACFpoH,QAAQo7D,GAAWgjD,IAA4B2D,IAAkBhwF,GACjEj5B,EACA6iH,GACAnoF,IAIA74B,OAAQ0tH,GACRrxF,MAAOsxF,GACPC,oBAAqBC,IrB1fV,SACbnxF,EACAskF,EACA2D,EACAD,GAEA,MAAOkJ,EAAqBE,IAA0BnyE,EAAAA,EAAAA,OAC/C4vE,EAAkBC,EAAoBC,IAAwB5sE,EAAAA,GAAAA,IAAQ,GAEvEkvE,GAAyBV,EAAAA,GAAAA,KAAqB,KAClD,MAAM/a,EAAO0O,IACb,OAAOtkF,GAAa41E,EAAK5pD,WAAW,MAAOojE,EAAAA,GAAAA,GAAiBxZ,GAAMlrF,MAAM0zF,MAAc,GAAGlmG,YAASrW,CAAS,GAC1G,CAACyiH,EAAStkF,GAdE,KAgBTsxF,GAAavM,EAAAA,GAAAA,GACjBsM,EAAwB,CAACA,EAAwB/M,IAAU,GAqB7D,OAlBA9mE,EAAAA,EAAAA,KAAU,KACR,MAAM3c,EAAUywF,IACVpJ,EAAWD,GAAeD,EAChC,IAAKnnF,IAAYqnF,EAEf,YADAkJ,OAAuBvvH,GAIzB,MAAMsD,EAAS07B,EAAQs7E,UAAU,GAC3BoV,EAA0BrJ,EAAS/iH,QAAQg+F,IAAOh+F,GAAUg+F,EAAEtiE,QAAQmrB,WAAW7mD,KAEvFisH,EACEG,GAAyBpwH,OAASowH,OAA0B1vH,EAC7D,GACA,CAACyvH,EAAYrJ,EAAaD,KAE7BxqE,EAAAA,EAAAA,IAAUuxE,EAAsB,CAACA,EAAsBzK,IAEhD,CACLhhH,OAAQqF,QAAQuoH,GAAqB/vH,SAAW0tH,GAChDlvF,MAAOmvF,EACPoC,sBAEJ,CqBkdMM,CACF7oH,QAAQo7D,GAAWgjD,IAA6BkB,IAAeA,IAAa9mH,QAAW6mH,IAAiB7mH,SACxGmjH,GACA2D,GACAD,IAGIyJ,IAA4Bl0E,EAAAA,GAAAA,IAAgB,SAACm0E,GAAyD,IAAxC1pE,EAAe9mD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG66G,EAAAA,IACpF,GAAI/zD,IAAY+zD,EAAAA,KAAqB8O,GAAmB,OACxD,MAAMzU,EAAY3xG,OAAO4xG,eACzB,IAAIsb,EAOJ,GALEA,EADE3pE,IAAY+zD,EAAAA,IACCxqG,SAASmsC,cAA8BooB,EAAAA,KAEvCv0D,SAASyhD,eAAehL,GAGrCouD,EAAUwb,WAAY,CACxB,MAAMC,EAAiBzb,EAAU0b,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgB7pE,GAGzC,OAFAgqE,EAAAA,GAAAA,IAAsBN,QACtBC,EAAaM,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAG7D,CAEA9I,GAAS,GAAE/E,OAAYoN,MAGvBU,EAAAA,EAAAA,KAAoB,MAClBC,EAAAA,GAAAA,GAAqBV,EAAa,GAEtC,IAEMW,IAAqC/0E,EAAAA,GAAAA,IAAgB,SACzDt4C,GACG,IADqB+iD,EAAe9mD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG66G,EAAAA,IAE1C,MAAM2V,GAAUa,EAAAA,GAAAA,GAA0BttH,GAC1CwsH,GAA0BC,EAAS1pE,EACrC,IAEMwqE,IAAmCj1E,EAAAA,GAAAA,IAAgB,SAAC91C,GAA2D,IAAxCugD,EAAe9mD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG66G,EAAAA,IAC7F0V,IAA0BgB,EAAAA,GAAAA,IAAqBhrH,GAAQugD,EACzD,InBphBe0qE,EACf9tG,EACAnjB,EACAC,EACA4iH,EACA+E,EACA7N,EACA9gF,KAEA,MAAM,UAAEi4F,EAAS,WAAEhK,EAAU,iBAAEj5F,IAAqBxV,EAAAA,EAAAA,MAE9C04G,EAAYjqH,QAAQ6yG,GAEpBqX,GAAct1E,EAAAA,GAAAA,IAAgB,WAAiF,IAAhFu1E,EAAiD5xH,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAG2jB,EAAW3jB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACtG,GAAI0xH,IAAcl4F,EAAc,OAEhC,MAAMk7E,EAAO0O,IAEH,IAAAyO,EAAAC,EAOHC,EAAAC,EAPHtd,EACF+c,EAAU,CACRlxH,OAAwB,QAAlBsxH,EAAED,EAAUrxH,cAAM,IAAAsxH,EAAAA,EAAItxH,EAC5BC,SAA4B,QAApBsxH,EAAEF,EAAUpxH,gBAAQ,IAAAsxH,EAAAA,EAAItxH,EAChCkjB,OAAOnW,EAAAA,EAAAA,IAAkBmnG,GACzB/wF,gBAGF8jG,EAAW,CACTlnH,OAAwB,QAAlBwxH,EAAEH,EAAUrxH,cAAM,IAAAwxH,EAAAA,EAAIxxH,EAC5BC,SAA4B,QAApBwxH,EAAEJ,EAAUpxH,gBAAQ,IAAAwxH,EAAAA,EAAIxxH,EAChCmjB,eAGN,IAEMsuG,GAAiB/hB,EAAAA,GAAAA,GAAYyhB,GAC7BO,GAA2BrjB,EAAAA,GAAAA,GAAgBsjB,EAAAA,KAAgB,OAAMxxH,EAAW,CAACJ,EAAQC,KAG3FshD,EAAAA,GAAAA,IAAsB5hD,IAA2C,IAAzCopH,EAAY8I,EAAcC,GAAUnyH,EAC1D,GAAIK,IAAW+oH,GAAc9oH,IAAa4xH,KACnC1uG,GAAS2uG,GACZlK,EAAQ,KAGLzkG,GAAOC,aACV,OAIJ,GAAI22F,IAAkB52F,EACpB,OAGFykG,GAAQkJ,EAAAA,GAAAA,GAA0B3tG,IAElC,MAAM4uG,EAAiB5uG,EAAMlB,UACzB/c,KAAKk+G,GAAWA,EAAO/hH,OAASq6G,EAAAA,GAAAA,aAAqC0H,EAAOrxG,aAC7ErO,OAAOwD,UAAY,GAClB6qH,EAAeryH,QAAQuuB,EAAiB,CAAErkB,IAAKmoH,IAE9ChmH,EAAAA,KACH4kH,EAAAA,EAAAA,KAAoB,KAClB,MAAMT,EAAepgH,SAASmsC,cAA8BooB,EAAAA,KACxD6rD,IACFU,EAAAA,GAAAA,GAAqBV,GAAc,EACrC,GAEJ,GACC,CAAClwH,EAAQC,EAAUkjB,EAAOykG,EAAS7N,EAAe9rF,KAGrD8tB,EAAAA,EAAAA,KAAU,IACD,KAEAo1E,GAEHO,EAAethG,QAAQ,CAAEpwB,SAAQC,aAnFvC28G,IAAW,GAEXtsC,EAAAA,EAAAA,KAAe,KACbssC,IAAW,CAAK,GAmFN,GAET,CAAC58G,EAAQC,EAAUkxH,EAAWO,IAEjC,MAAMM,GAAYriB,EAAAA,GAAAA,GAAY3vG,GACxBiyH,GAActiB,EAAAA,GAAAA,GAAY1vG,GAsBhC,SAASiyH,IACPd,OAAYhxH,GAAW,EACzB,EAvBA27C,EAAAA,EAAAA,KAAU,KACR,GAAI6gE,GACF,OAGF,IAAKiG,IAGH,YAFA6O,EAAethG,UAKjB,MAAM+hG,EAAeH,EAAU5hG,QACzBgiG,EAAiBH,EAAY7hG,QAEnCuhG,GAAyB,KACnBK,EAAU5hG,UAAY+hG,GAAgBF,EAAY7hG,UAAYgiG,GAChEV,EAAethG,SACjB,GACA,GACD,CAAC4hG,EAAWnP,EAAS8O,EAA0BM,EAAaP,KAM/DvqB,EAAAA,GAAAA,GAAkB+qB,GAClBv2E,GAAgBu2E,EAAiB,EmBuajCjB,CAAS9tG,EAAOnjB,EAAQC,EAAU4iH,GAAS+E,GAASjC,EAAgB1sF,GAEpE,MAAMo5F,IAAgBv2E,EAAAA,GAAAA,IAAgB,WAAiC,IAAhCw2E,EAAmB7yH,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACnD6yH,GACH1K,GAAQ,IAGV9N,GAAe94G,EAAAA,GAEfurH,KACAM,KACAI,KACAe,KAEI/sE,EAEFl4C,YAAW,IAAM0hH,MAhWY,KAkW7BA,IAEJ,KAEO8H,GAAoBC,GAAkB5R,IvBnjB5B6R,EACjB5P,EACA+E,EACA7N,EACAsY,EACAvH,EACA9qH,EACAC,EACAoB,EACA8hB,EACAmU,EACAlwB,KAEA,MAAM,YAAEsrH,EAAW,gBAAEC,EAAe,qBAAE5P,IAAyBtqG,EAAAA,EAAAA,OACxDmoG,EAAwBgS,IAA6Bp1E,EAAAA,EAAAA,KAAS,IAErE+D,EAAAA,GAAAA,IAAsB5hD,IAA2C,IAAzCkzH,EAAmBC,GAAiBnzH,EAC1D,IAAKo6G,EACH,OAGF,GAAI3yG,GAAgB0rH,IAAqB1rH,EAGvC,OAFAwgH,EAAQ,SACRgL,GAA0B,GAI5B,GAAIC,GAAmB1xH,KAAO44G,EAAc54G,IAAMiG,IAAiB0rH,EACjE,OAGF,MAAMtvH,GAAQqvH,GAAqBv7F,GAAc9zB,KAAK9D,OAAS43B,EAAeyiF,EAAchtG,QAAQvJ,KAC9F2wG,GAAO2c,EAAAA,GAAAA,GAA0BttH,GAEvCokH,EAAQzT,GACRye,GAA0B,IAE1BjC,EAAAA,EAAAA,KAAoB,KAClB,MAAMT,EAAepgH,SAASmsC,cAA8BooB,EAAAA,KACxD6rD,IACFU,EAAAA,GAAAA,GAAqBV,GAAc,EACrC,GACA,GACD,CAACnW,EAAe3yG,EAAckwB,EAAcswF,KAE/C7rE,EAAAA,EAAAA,KAAU,KACR,IAAKg+D,EACH,OAGF,MAAMgZ,IAAuB,YAAahZ,EAAchtG,UACnDgtG,EAAchtG,QAAQvJ,MAAMye,UAAUqrB,MAAM81E,GAAWlH,GAAax8F,IAAI0jG,EAAO/hH,QAEpF0hH,EAAqB,CACnB/iH,SACAC,WACAshB,UAAWwxG,GACX,GACD,CAAC/yH,EAAQC,EAAU85G,KAEtBh+D,EAAAA,EAAAA,KAAU,KACR,GAAKg+D,EACL,MAAO,KACL,MAAMiZ,GAAShmH,EAAAA,EAAAA,IAAkB61G,KAC3B72F,EAASgnG,EAAOxvH,KAAK9D,OAASszH,OAAS5yH,EAE7CuyH,EAAgB,CACd3yH,SAAQC,WAAUoB,OAAMmC,KAAMwoB,GAC9B,CACH,GACA,CAAChsB,EAAQ+5G,EAAe8I,EAAS8P,EAAiB1yH,EAAUoB,IAE/D,MAAM4hH,GAAsBC,EAAAA,GAAAA,KAAqB,KAC/C,IAAKnJ,EAAe,OAAO,EAE3B,MAAMiZ,GAAShmH,EAAAA,EAAAA,IAAkB61G,KACjC,QAAS,YAAa9I,EAAchtG,UAC/BgtG,EAAchtG,QAAQvJ,MAAMye,UAAUqrB,MAAM81E,GAAWlH,GAAax8F,IAAI0jG,EAAO/hH,UAC7E2xH,EAAO/wG,UAAUqrB,MAAM81E,GAAWlH,GAAax8F,IAAI0jG,EAAO/hH,OAAO,GACvE,CAAC04G,EAAe8I,GAjFD,KAiFwB,GAEpCoQ,GAAmC3P,EAAAA,GAAAA,GAAiBL,EAAqB,CAACA,EAAqBJ,IAAU,IAE/GthE,EAAAA,GAAAA,IAAsBh0C,IAAyB,IAAvBslH,GAAkBtlH,EACnCwsG,GAAiB8Y,GAAmB1xH,KAAO44G,EAAc54G,IAI1D8xH,KACFlQ,EAAqB,CACnB/iH,SACAC,WACAshB,WAAW,GAEf,GACC,CAACw4F,EAAe/5G,EAAQ6iH,EAAS5iH,EAAUgzH,IAE9C,MAAMC,GAA8Bp3E,EAAAA,GAAAA,IAAgB,KAC7C34B,IAGLmtD,EAAAA,EAAAA,KAAe,KACbs3C,GAAQkJ,EAAAA,GAAAA,GAA0B3tG,KAGlCwtG,EAAAA,EAAAA,KAAoB,KAClB,MAAMT,EAAepgH,SAASmsC,cAA8BooB,EAAAA,KACxD6rD,IACFU,EAAAA,GAAAA,GAAqBV,GAAc,EACrC,GACA,GACF,IAGEsC,GAAmB12E,EAAAA,GAAAA,IAAgB,KACvCu2E,IACAa,GAA6B,IAGzBX,GAAqBz2E,EAAAA,GAAAA,IAAgB,KACzC,MAAM,KAAEt4C,EAAI,SAAEye,IAAajV,EAAAA,EAAAA,IAAkB61G,KAExC9I,IAIAv2G,IAAS2vH,EAAAA,EAAAA,IAAgBpZ,IAK9B2Y,EAAY,CACV36G,YAAa,CAAE/X,SAAQC,WAAUoB,QACjCmC,OACAye,aAGFowG,IACAa,KAXEpI,IAW2B,IAGzBsI,GAAat3E,EAAAA,GAAAA,IAAgB,KACjC,IAAKi+D,EAAe,OACpB,MAAMiZ,GAAShmH,EAAAA,EAAAA,IAAkB61G,KAC3B72F,EAASgnG,EAAOxvH,KAAK9D,OAASszH,OAAS5yH,EAE7CuyH,EAAgB,CACd3yH,SAAQC,WAAUoB,OAAMmC,KAAMwoB,GAC9B,IAMJ,OAHAm7E,EAAAA,GAAAA,GAAkBisB,GAClBz3E,GAAgBy3E,GAET,CAACb,EAAoBC,EAAkB5R,EAAuB,EuByZE6R,CACrE5P,GACA+E,GACAjC,EACA0M,GACAvH,GACA9qH,EACAC,EACA0E,EACAwe,EACAmU,GACAlwB,IAIIisH,IAAmB1jB,EAAAA,GAAAA,GAAY0iB,IAC/BiB,IAAwB3jB,EAAAA,GAAAA,GAAYyb,KAC1CrvE,EAAAA,EAAAA,KAAU,IACD,KAELu3E,GAAsBljG,UAEtBijG,GAAiBjjG,SAAS,GAE3B,CAACpwB,EAAQC,EAAUozH,GAAkBC,KAExC,MAAMC,IAAqCz3E,EAAAA,GAAAA,IAAgB,KACzD,MAAM03E,EAAqB9K,GAA8Bt4F,QAWvDtkB,GAVG0nH,EAUc,CACfruH,QAASP,GAAK,2BACdgQ,OAAQ,CACNA,OAAQ,WACRpU,QAAS,CAAEW,GAAIuW,EAAepW,sBAAsB,IAEtDqzE,WAAY/vE,GAAK,SAfF,CACfO,QAASP,GAAK,0BACdgQ,OAAQ,CACNA,OAAQ,mBACRpU,QAAS,CAAEwoC,eAAgB,mBAE7B2rC,WAAY/vE,GAAK,iBAYrB8jH,GAA8Bt4F,QAAUxoB,QAAQ4rH,EAAmB,IAG/DC,IAAkBxwD,EAAAA,GAAAA,IAAgB,IAClC0iD,GAAkB/E,GACbqD,GAAgByP,MAGrB3H,EAAAA,IAAiCT,IAAyBx1B,GAAkB+sB,OAAcoG,GAI1FlD,EACK9B,GAAgB0P,SAGlB1P,GAAgB2P,KAPd3P,GAAgB4P,QAQxB,CACDvI,GAAsB3F,EAAgB9C,GAASoG,GAAgBnzB,EAAc8qB,GAAwBmF,IAEjG+N,IAAyB/N,GAG7BrpD,kBAAmBq3D,GAAoB,kBACvCn3D,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuB0uD,KAAiBgI,KAAoBxP,GAAgB2P,MAAQE,KAExFla,GACE0L,EACAuL,GACAnH,GACA/D,GACCj/F,IAAyBk7C,EAC1B2xD,IAGF,MAAMS,IAAsBl4E,EAAAA,GAAAA,IAAgB,KACtC6pE,GACF6M,IACF,IAGIyB,IAAqBn4E,EAAAA,GAAAA,IAAgB,CAACt4C,EAAc0wH,KACxD,MAAMC,EAAYD,EAAoBnN,EAncf,KAocvB,GAAIvjH,GAAM9D,OAASy0H,EAAW,CAC5B,MAAMC,EAAc5wH,EAAK9D,OAASy0H,EAYlC,OAXA7pG,GAAW,CACT9W,KAAM,CACJrO,QAAS,4CACTkvH,WAAY,CACV,sBAAuBD,EAAYzsH,WACnC,aAAcysH,EAAc,EAAI,IAAM,IAExC3gH,aAAa,MAIV,CACT,CACA,OAAO,CAAI,IAGP6gH,IAAgBx4E,EAAAA,GAAAA,IAAgB,KACpC,GAAI0pE,KAAapzE,GAAS,CACxB,MAAM89E,EAAepgH,SAASmsC,cAA8BooB,EAAAA,KAEtDkwD,GAAaznH,EAAAA,EAAAA,MACb0nH,EAA0BvM,GAA2B73F,SACtD/iB,KAAKI,MAAM8mH,EAAatM,GAA2B73F,SAClDqkG,EAAyBjP,GAASkP,cAAgBlP,GAASkP,aAAeH,EAEhF,GACGC,GAA2BA,EAA0BhP,GAASmP,SAC5DF,EACH,CACA,MAAMG,EAAmBH,EACrBjP,GAASkP,aAAgBH,EACzB/O,GAASmP,QAAUH,EAWvB,OAVAlqG,GAAW,CACT9W,KAAM,CACJrO,QAASP,GAAK,gBAAgB8+E,EAAAA,GAAAA,IAAoBkxC,IAClDC,YAAY,EACZphH,aAAa,KAIjBy8G,GAAcryF,QAEP,CACT,CACF,CACA,OAAO,CAAI,IAGPi3F,IAAkBh5E,EAAAA,GAAAA,IAAgBt/B,IAYlC,IAXJqF,YAAakzG,EAAiB,eAC9BC,EAAiBz/G,GAAmBF,eAAc,YAClD4/G,EAAc1/G,GAAmBD,kBAAiB,SAClD2O,EAAQ,YACR7C,GAOD5E,EACC,GAAwB,yBAApB2c,IAA+C13B,EACjD,OAGF,MAAM,KAAE+B,EAAI,SAAEye,IAAajV,EAAAA,EAAAA,IAAkB61G,OACxCr/G,GAASuxH,EAAkBr1H,SAG3Bu0H,GAAmBzwH,GAAM,IACzB8wH,OAELl1G,GAAY,CACVrH,YAAatW,EACb+B,OACAye,WACAb,cACA6C,WACAwgG,+BACA5iG,YAAaiyF,GAAyBihB,EAAmBC,GACzDjzG,oBAAqBkzG,IAGvBhN,GAA2B73F,SAAUtjB,EAAAA,EAAAA,MAErCo6G,GAAW,CAAElnH,SAAQ4jB,WAAW,KAGhC0sD,EAAAA,EAAAA,KAAe,KACb+hD,IAAe,IACf,IAGE6C,IAAwBp5E,EAAAA,GAAAA,IAAgB,CAC5Ck5E,EACAC,EACAhxG,EACA7C,KAEA0zG,GAAgB,CACdjzG,eACAmzG,iBACAC,cACAhxG,WACA7C,eACA,IAGE+zG,IAAar5E,EAAAA,GAAAA,IAAgBjiC,iBAAkD,IAA3CoK,EAAQxkB,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GAAU2hB,EAAoB3hB,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAC9E,GAAwB,yBAApB+4B,IAA+C13B,EACjD,OAGF,IAAI2zH,EAAqBvzG,GAEzB,GAAIypG,GAAsB,CACxB,MAAM+J,QAAejK,KACrB,GAAIiK,EAAQ,CACV,MAAM,KAAEv9D,EAAI,SAAEyC,EAAQ,SAAE+7C,GAAa+e,EACrCD,EAAqB,OAAO5iB,GAC1B0R,GACApsD,EACA,CAAEjsC,MAAO,CAAE0uC,WAAU+7C,cAEzB,CACF,CAEA,MAAM,KAAE9yG,EAAI,SAAEye,IAAajV,EAAAA,EAAAA,IAAkB61G,MAE7C,GAAIuS,EAAmB11H,OAIrB,YAHAo1H,GAAgB,CACdjzG,YAAauzG,IAKjB,IAAK5xH,IAASsyF,EACZ,OAGF,IAAKm+B,GAAmBzwH,GAAO,OAE/B,MAAM0sH,EAAepgH,SAASmsC,cAA8BooB,EAAAA,KAE5D,GAAI7gE,EAAM,CACR,IAAK8wH,KAAiB,OAEtBl1G,GAAY,CACVrH,YAAatW,EACb+B,OACAye,WACAb,cACA6C,WACAwgG,gCAEJ,CAEI3uB,GACF1zF,GAAgB,CACdgf,cACA6C,aAIJgkG,GAA2B73F,SAAUtjB,EAAAA,EAAAA,MAErCo6G,GAAW,CAAElnH,SAAQ4jB,WAAW,IAE5B7D,EAAAA,IAAUmwG,GAAgBA,IAAiBpgH,SAASuqG,eACtDjF,GAA8B8a,IAIhC5/C,EAAAA,EAAAA,KAAe,KACb+hD,IAAe,GAEnB,IAEMiD,IAAqBx5E,EAAAA,GAAAA,IAAgB,KACb,WAAxB4qE,IAAerlH,MAInBwjC,GAAc,CACZ7kC,SAAQiU,IAAKyyG,GAAczyG,IAAKhU,YAChC,IAGEs1H,IAA+Bz5E,EAAAA,GAAAA,IAAgB,KACnD2uE,KACAJ,IAAoB,IAGhBmL,IAAwB15E,EAAAA,GAAAA,IAAgB,CAC5CohD,EAA4B97E,EAAqBrJ,KAEjD,GAAImlF,GAAQ,YAAaA,EAAM,CAC7B,MAAM,GAAE/7F,EAAE,QAAE+hC,EAAO,SAAEjf,GAAai5E,EAQlC,YAPAoqB,GAAoB,CAClBnmH,KACA+hC,UACA9hB,cACA6C,WACAlM,eAGJ,CAEA,MAAM,SAAEkM,KAAawxG,GAAav4B,GAAQ,CAAC,EAE3C,GAAKA,GAAyC,IAAjC11F,OAAOC,KAAKguH,GAAU/1H,OAE5B,QAA4BU,IAAxB88F,EAAK83B,qBAAqD50H,IAArB88F,EAAK+3B,YAA2B,CAC9E,MAAM,eAAED,GAAiB,EAAK,YAAEC,GAAc,GAAU/3B,EACnDg4B,GAAsBF,EAAgBC,EAAahxG,EAAU7C,EACpE,MACEhC,GAAY,IACP89E,EACHnlF,cACAqJ,qBARG+zG,GAAWjuH,QAAQ+c,GAAW7C,EAUrC,KAGFmgC,EAAAA,GAAAA,IAAsBrkC,IAAgC,IAA9Bw4G,GAAyBx4G,EAC3Czb,GAAsBU,GAAwBA,IAAyBuzH,GACzE/M,IAAiBvnG,IACfo0G,GAAsBrzH,EAAsBif,EAAa3f,EAAmB,GAEhF,GACC,CAACU,EAAsBV,EAAoB+zH,GAAuB7M,MAErE5sE,EAAAA,EAAAA,KAAU,KACJmpE,KACF0C,GAAQ1C,IACRsC,MAEAmJ,EAAAA,EAAAA,KAAoB,KAClB,MAAMT,EAAepgH,SAASyhD,eAAe+oD,EAAAA,MAC7CsW,EAAAA,GAAAA,GAAqBV,GAAc,EAAK,IAE5C,GACC,CAAChL,GAAoBsC,GAAwBI,MAEhD7rE,EAAAA,EAAAA,KAAU,KACJqpE,IAAqB1lH,SAClB6/G,GAAiB6F,IACtBoC,KACF,GACC,CAACjI,GAAkB6F,GAAqBoC,KAE3C,MAAMmO,IAA0B75E,EAAAA,GAAAA,IAAgB,CAAC91C,EAAmBugD,KAC7DvgD,EAAM4vH,QAAWlvG,GAAyBk7C,EAK/CmvD,GAAiC/qH,EAAOugD,GAJtCgtE,IAI8C,IAG5CsC,IAAyC/5E,EAAAA,GAAAA,IAAiB91C,IAC9D2vH,GAAwB3vH,EAAOu0G,EAAAA,IAAwB,IAGnDub,IAAkBh6E,EAAAA,GAAAA,IAAgB,CAAClsB,EAAe3L,EAAoB8xG,KACrEt0H,IAIDskH,GAAkBgQ,GACpB1N,KACAM,IAAiBvnG,IACfknG,KACAkN,GAAsB,CAAE5lG,MAAK3L,YAAY7C,EAAa3f,IACtD6uE,EAAAA,EAAAA,KAAe,KACb+hD,IAAc,EAAK,GACnB,MAGJjzG,GAAY,CAAErH,YAAatW,EAAoBmuB,MAAK3L,cACpDqsD,EAAAA,EAAAA,KAAe,KACb+hD,IAAc,EAAK,KAEvB,IAGIznB,IAAsB9uD,EAAAA,GAAAA,IAAgB,SAC1CrqC,EACAwS,EACA8xG,GAGG,IAFHzD,EAAmB7yH,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,GACnBu2H,EAAmCv2H,UAAAC,OAAA,EAAAD,UAAA,QAAAW,EAE9BqB,IAILgQ,EAAU,IACLA,EACH+hC,qBAAqB,GAGnBuyE,GAAkBgQ,GACpB1N,KACAM,IAAiBvnG,IACfknG,KACAkN,GAAsB,CAAE/jH,UAASwS,YAAY7C,EAAa3f,IAC1D6uE,EAAAA,EAAAA,KAAe,KACb+hD,GAAcC,EAAoB,GAClC,MAGJlzG,GAAY,CACVrH,YAAatW,EACbgQ,UACAwS,WACAwgG,4BAA6BA,IAA+BuR,KAE9D1lD,EAAAA,EAAAA,KAAe,KACb+hD,GAAcC,EAAoB,KAGxC,IAEM2D,IAAwBn6E,EAAAA,GAAAA,IAAgB,CAC5Co6E,EAA4DjyG,EAAoB8xG,KAEhF,GAAwB,yBAApB58F,IAA+C13B,EACjD,OAGEskH,GAAkBgQ,EACpBpN,IAAiBvnG,IACfo0G,GAAsB,CACpBr0H,GAAI+0H,EAAa/0H,GACjB+hC,QAASgzF,EAAahzF,QACtBjf,YACC7C,EAAa3f,EAAmB,IAGrC6lH,GAAoB,CAClBnmH,GAAI+0H,EAAa/0H,GACjB+hC,QAASgzF,EAAahzF,QACtBjf,WACAlM,YAAatW,IAIjB,MAAMyuH,EAAepgH,SAASmsC,cAA8BooB,EAAAA,KACxDtkD,EAAAA,IAAUmwG,GAAgBA,IAAiBpgH,SAASuqG,eACtDjF,GAA8B8a,GAGhChJ,GAAW,CAAElnH,SAAQ4jB,WAAW,KAChC0sD,EAAAA,EAAAA,KAAe,KACb+hD,IAAe,GACf,IAGE8D,IAAyBr6E,EAAAA,GAAAA,IAAgB,KAC7CorE,GAAW,CAAElnH,SAAQ4jB,WAAW,KAChC0sD,EAAAA,EAAAA,KAAe,KACb+hD,IAAe,GACf,IAGE+D,IAAiBt6E,EAAAA,GAAAA,IAAiB11B,IACjC3kB,IAIDskH,GACF4C,IAAiBvnG,IACfo0G,GAAsB,CAAEpvG,QAAQhF,EAAa3f,EAAmB,IAElE0lH,OAEA/nG,GAAY,CAAErH,YAAatW,EAAoB2kB,SAC/C+gG,MACF,IAGIkP,IAAav6E,EAAAA,GAAAA,IAAiBw6E,IAClC,GAAIvQ,EACF4C,IAAiBvnG,IACfo0G,GAAsB,IAAKc,EAAgBryG,UAAU,GAAQ7C,EAAa3f,EAAoB,SAE3F,GAAI60H,IAAmB,mBAAoBA,GAAkB,gBAAiBA,GAAiB,CACpG,MAAM,eAAEtB,GAAiB,EAAK,YAAEC,GAAc,GAAUqB,EACnDpB,GAAsBF,EAAgBC,GAAa,EAC1D,MACOE,IAAW,EAClB,IAGIoB,IAAuBz6E,EAAAA,GAAAA,IAAgB,KAC3C,MAAMo0E,EAAepgH,SAASmsC,cAA8BooB,EAAAA,KAE5D,IAAKpjB,GAAYivE,IAAiBpgH,SAASuqG,cAIzC,OAHAiQ,KACAG,UACAE,KAIFuF,GAAcryF,OACd90B,YAAW,KACTuhH,KACAG,KACAE,IAAgB,GAj2BgB,IAk2BD,IAG7B9Q,IAA4B/9D,EAAAA,GAAAA,IAAgB,SAACt4C,GAAsD,IAAxC+iD,EAAe9mD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG66G,EAAAA,IACjF,MAAM2V,GAAUp5D,EAAAA,GAAAA,GAAWrzD,EAAM,CAAC,cAAe,aAAc,YAC5D4C,KAAK,IACL8J,QAAQ,WAAY,KACvB8/G,GAA0BC,EAAS1pE,EACrC,KAEAxK,EAAAA,EAAAA,KAAU,KACHqtE,IAELxB,GAAQ,GAAG,GACV,CAACwB,GAAmBxB,GAAS/lG,KAEhC,MAAM20G,IAA2C16E,EAAAA,GAAAA,IAAiBt4C,IAChEq2G,GAA0Br2G,EAAM+2G,EAAAA,IAAwB,IAGpDkc,IAAe36E,EAAAA,GAAAA,IAAgB,WAAiC,IAAhCyK,EAAO9mD,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG66G,EAAAA,IAC9C,MAAM3F,EAAY3xG,OAAO4xG,eAEzB,GAAID,EAAUwb,WAAY,CACxB,MAAMC,EAAiBzb,EAAU0b,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgB7pE,GAEzC,YADAz2C,SAASmlG,YAAY,UAAU,EAGnC,CAEA2S,GAAQ1T,GAAoC2O,MAC9C,IAEM6T,IAA8B56E,EAAAA,GAAAA,IAAgB,KAClD26E,GAAalc,EAAAA,IAAwB,IAGjCoc,IAA0B76E,EAAAA,GAAAA,IAAgB,KAC9Cv4C,GAAS,CACPpC,GAAInB,EAAQC,WAAUoB,KAAM,YAAaG,mBAAmB,GAC5D,KAGJu6C,EAAAA,EAAAA,KAAU,KACJ0lB,GAAsBxgB,GACxBwpE,IACF,GACC,CAAChpD,EAAoBgpD,GAAiBxpE,KAEzClF,EAAAA,EAAAA,KAAU,KACHumB,IAEDZ,EACFupD,KAEAliH,YAAW,KACTmiH,IAAa,GA15Ba,KA45B9B,GACC,CAACxpD,EAAoBwpD,GAAaD,GAAc3oD,IAEnD,MAAMs0D,KAA6BnD,KAAoBxP,GAAgB4P,QAChEvV,IAAmBiH,GAA0BxyG,IAE9C8jH,IAAoB/6E,EAAAA,GAAAA,IAAgB,KACxC,OAAQ23E,IACN,KAAKxP,GAAgB2P,KACduB,KACL,MACF,KAAKlR,GAAgB4P,OACf+C,GACGrR,EAIOxyG,IACV2X,GAAoC,CAAE1qB,WAJtC8L,GAAiB,CACf3G,QAASP,GAAK,mCAAoCuJ,GAAMkC,SAMvD86G,KAEP,MAEF,KAAKlH,GAAgByP,KACnBnB,KACA,MACF,KAAKtO,GAAgB0P,SAInB,GAHIrI,IACFD,MAEG5pH,EACH,OAGFknH,IAAiBvnG,IACfo0G,GAAsB,CAAC,EAAGp0G,EAAa3f,EAAoB,IAIvD,IAINoxH,IAAoBntD,EAAAA,GAAAA,GAAYigD,GAAgB,GAChDmR,GAAwBnR,GAAkBkN,GAE1CkE,GAAuB,IAAI5qH,KACjC4qH,GAAqBC,WAAW,GAChCD,GAAqBE,gBAAgB,GAErC,MAAMC,GAAmB,IAAI/qH,KAC7B+qH,GAAiBC,YAAYD,GAAiBE,cAAgB,GAE9D,IAAIC,GAAsB,cAC1B,OAAQ5D,IACN,KAAKxP,GAAgByP,KACnB2D,GAAsB,sBACtB,MACF,KAAKpT,GAAgB4P,OACnBwD,GAAuB/Y,GAEnB,uBADA,sCAIR,MAAMpuF,IAAYuvB,EAAAA,GAAAA,GAChB,YACCiiB,GAAsB,QACvBspD,IAAmB,iBACnBnD,IAAa,WAGTyP,IAAsBx7E,EAAAA,GAAAA,IAAgB,KAC1C6sE,IAAiBvnG,IACfo0G,GAAsB,CAAC,EAAGp0G,EAAa3f,EAAoB,GAC3D,IAGE81H,IAAmBz7E,EAAAA,GAAAA,IAAgB,KACvCu6E,IAAY,IAGRmB,IAAuB17E,EAAAA,GAAAA,IAAgB,KAC3C05E,GAAsB,CAAC,EAAGnrB,EAAAA,IAAuB5oG,EAAoB,IAGjEg2H,IAAiC37E,EAAAA,GAAAA,IAAgB,CAACk5E,EAAyBC,KAC/EtM,IAAiBvnG,IACfo0G,GAAsB,CAAER,iBAAgBC,eAAe7zG,EAAa3f,EAAoB,GACxF,IAGEi2H,IAA8B57E,EAAAA,GAAAA,IAAgB,CAACk5E,EAAyBC,KAC5EoB,GAAW,CAAErB,iBAAgBC,eAAc,IAGvC0C,GAASlE,KAAoBxP,GAAgByP,KAC/CnB,GACAkB,KAAoBxP,GAAgB0P,SAAW2D,GAC7CnC,GAEAyC,GAAoB92D,GAAyC,WAAxB4lD,IAAerlH,OAAsBskH,EAC1EkS,IAAsB50D,EAAAA,GAAAA,IAAgB,IACnC20D,KAAsB/U,OAAcyI,IAC1C,CAACsM,GAAmB/U,GAASyI,KAE1BwM,GAAkBh3D,GAAyC,aAAxB4lD,IAAerlH,OAAwBskH,IAC3D,IAAhBa,KAA0B8E,GAY/B,OACE1uE,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWA,IACbouF,IAAkBh8C,GACjB1lB,EAAAA,GAAAA,cAAC8lE,GAAQ,CACP7gH,OAAQmlH,IAAkB+Q,GAAAA,EAAAA,KAC1BC,UAAWhR,IAAkB+Q,GAAAA,EAAAA,WAA2B7P,KAAsB6P,GAAAA,EAAAA,UAC9E15D,OAAQ4oD,EACRxI,aAAcc,KAGlB3iE,EAAAA,GAAAA,cAAC2lE,GAAe,CACdviH,OAAQA,EACRC,SAAUA,EACV6zH,sBAAuBA,GACvBjyG,YAAaA,GACbghG,QAASA,GACTvgD,QAASA,EACTk9C,yBAA0BA,GAC1B6J,uBAAwBA,GACxBC,kBAAmBA,GACnBhE,wBAAyBA,EACzBS,eAAgBA,EAChByD,gBAAiBA,GACjByO,aAAcP,GACdC,OAAQzC,GACRgD,gBAAiBT,GACjBU,aAAc5O,GACdrI,QAASuI,GACT2O,oBAAqB1O,GACrB2O,oBAAqBxC,GACrByC,eAAgB5B,GAChB6B,cAAe/B,KAEjB55E,EAAAA,GAAAA,cAAC6lE,GAAS,CACR5gH,OAAQoK,EAAUpK,OAClBmK,OAAQC,EAAUD,OAClBwsH,kBAAmBlmE,EACnB4uD,QAASiG,GACTwQ,OAAQvB,KAETU,IACCl6E,EAAAA,GAAAA,cAACigE,GAAkB,CACjBh7G,OAAQgpH,GACRhlB,WAAgC,cAApBlhG,EACZy9C,QAAS2oE,GACT5lH,QAAS2xH,KAGbl6E,EAAAA,GAAAA,cAAC+mE,GAAU,CACT9hH,OAAQ6oH,GACRtoE,QAASwoE,GACT5qH,OAAQA,EACRy4H,iBAAkBtwG,GAClBG,cAAeA,GACf5B,qBAAsBA,IAExBk2B,EAAAA,GAAAA,cAAC0jE,GAAc,CACbz+G,OAAQksH,GACR2K,cAAexK,GACfyK,iBAAkB1K,GAClB7rE,QAAS4rE,KAEXpxE,EAAAA,GAAAA,cAAC4jE,GAAiB,CAChB3+G,OAAQ0tH,GACRqJ,aAAc1xH,QAAQq/G,IACtBC,YAAakJ,GACb7M,QAASA,GACTvkE,QAAS63E,GACT/zE,QAASotE,KAEX5yE,EAAAA,GAAAA,cAAA,OAAKz7C,GAAG,mBACNy7C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,eAAe2xB,IAAK6lE,KAEnC9qE,EAAAA,GAAAA,cAACyjE,GAAgB,CACfx+G,OAAQusH,GACR95G,MAAO+5G,GACPzrF,UAAW0rF,GACXG,iBAAkBA,GAClBrsF,SAAUmsF,GACV1rF,cAAe2rF,GACfK,SAAUC,GACV+J,gBAAiBj3D,EACjBsnD,YAAaA,GACbxiG,qBAAsBA,EACtBoyG,eAAgB7C,GAChB7zE,QAASusE,KAEX/xE,EAAAA,GAAAA,cAACm8E,GAAuB,CACtB7X,QAAS8S,GACTpT,uBAAwB15G,QAAQ05G,IAA0B+E,KAE5D/oE,EAAAA,GAAAA,cAACo8E,GAAc,CACbh5H,OAAQA,EACRC,SAAUA,EACV4iH,QAASA,GACTxlE,YAAa8rE,IAAuBF,KAEtCrsE,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,yBACZ0nG,IACCh7E,EAAAA,GAAAA,cAACq8E,GAAa,CACZp3H,OAAQg2H,GACRr0H,KAAMkjH,GAAcljH,KACpB65C,WAAYn2C,QAAQokH,IACpBhtE,QAASg3E,KAGZwC,IACCl7E,EAAAA,GAAAA,cAACkjE,GAAAA,EAAqB,CACpB5vF,WAAWuvB,EAAAA,GAAAA,GAAe,eAAgB2qE,IAAwB,aAClEvyG,OAAK,EACLomD,cAA0B79D,IAAhBomH,GACV7nE,MAAM,cACNohE,WAAYwV,GACZ9wE,UAAU,6BAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,mCAGhBi4F,KAAkBlD,IAAc78F,KAC/Bw0B,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,cACNL,QAASosE,GAAmBE,GAAkB2L,GAC9C9xE,UAAW7/C,GAAK,sBAChBsrB,WAAWuvB,EAAAA,GAAAA,GAAe,iBAAkBqpE,GAA6B14F,SAAW,qBAEpFwsB,EAAAA,GAAAA,cAACy4B,GAAAA,EAAM,CACLhyD,KAAM4hG,GACN92G,KAAMia,GACN22B,KAAK,YAIRqqE,IAAqBF,IAAer2G,KACrC+pC,EAAAA,GAAAA,cAACs8E,GAAAA,EAAgB,CACfl5H,OAAQA,EACRC,SAAUA,EACVghD,SAAUA,EACVqhB,QAASA,EACTioD,iBAAkBA,GAClBC,eAAgBA,GAChBC,gBAAiBA,GACjB53G,gBAAiBA,GACjBq2G,YAAaA,GACbiQ,YAAarD,GACbsD,gBAAiBxuB,GACjBytB,oBAAqB1C,GACrB2C,eAAgB7B,GAChB8B,cAAe1e,GACfyQ,oBAAqBA,GACrBM,gBAAiBA,GACjBxC,mBAAoBA,GACpB51G,kBAAmB42G,KAGvBxsE,EAAAA,GAAAA,cAACy8E,GAAAA,EAAY,CACXx3E,IAAK8lE,GACLxmH,GAAG,qBACHm4H,gBAAiBhf,EAAAA,IACjBt6G,OAAQA,EACRwS,kBAAmB42G,GACnBnpH,SAAUA,EACVqiE,QAASA,EACTxxD,UAAWm4G,GACXpG,QAASA,GACTj8D,YACE0kE,IAAwB/gF,IA7rCG,IA8rCvB,GACE6+E,GAEAxkH,GAAK,kCADJohH,GAA0BphH,GAAK,WAGxC20H,kBAAmB3K,GACnB4K,aAAcl3D,GAAWgjD,IAA4B2D,GACrDwQ,oBAAqBxQ,GACrByQ,oBAAqBz4E,GAAYspE,GACjCoP,4BAA6BrN,IAAsByB,IAAwBK,GAC3EwL,SAAUhS,GACV+P,OAAQA,GACRkC,kBAAmBpP,KAEpBnE,IAAsBp/G,QAAQmnH,KAC7BzxE,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,SAEhBmnE,GACClpE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLwqG,OAAK,EACLnyF,UAAU,mBACVyuB,MAAM,cACNL,QAASq4E,GACTlyE,UAAU,2BAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,wBAGhBhpB,QAAQ09G,KAA0B0G,KAAyB3F,GAC1D/oE,EAAAA,GAAAA,cAACkjE,GAAAA,EAAqB,CACpB5vF,UAAW+5F,GAAoB,YAAc,GAC7CpyG,OAAK,EACL8mC,MAAM,cACNohE,WAAYmK,GACZzlE,UAAU,6BAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,2BAGhBo7F,IAAwBpkH,QAAQqkH,KAC/B3uE,EAAAA,GAAAA,cAAA,QAAM1sB,UAAU,oBACb4pG,EAAAA,GAAAA,IAA0BvO,GAAoBG,GAAmBt7F,UAGtEwsB,EAAAA,GAAAA,cAACm9E,GAAU,CACT/5H,OAAQA,EACRC,SAAUA,EACVo+G,iBAAkBiN,KAAyB3F,EAC3CrH,eAAgBA,GAChBC,eAAgBA,GAChB9rG,cAAeA,GACfC,cAAeA,GACfC,iBAAkBA,GAClBC,cAAeA,GACf6rG,aAAcc,GACdb,aAAc19E,GACdkS,YAAa6yE,EACbvH,WAAYA,GACZhlE,SAAUmtE,GACV7lD,cAAeA,GAAiBc,EAChC+8C,iBA1OeA,KACtB37G,OAAeg3H,QAAQC,iBAAiBC,WAAWC,YAAY,CAC9Dn6H,UACA,EAwOMuhC,MAAOA,KAERr6B,QAAQ09G,IACPhoE,EAAAA,GAAAA,cAACw9E,GAAe,CACdxzH,UAAWg+G,EACX/iH,OAAQooH,GACR7nE,QAAS+nE,KAGZ3D,IACC5pE,EAAAA,GAAAA,cAAC4lE,GAAc,CACb3gH,OAAQuoH,GACR5D,YAAaA,GACbpkE,QAASkoE,KAGb1tE,EAAAA,GAAAA,cAACy9E,GAAAA,EAAkB,CACjBr6H,OAAQA,EACR6B,OAAQ+qH,GACRyL,oBAAqBvL,GACrBrF,qBAAsBA,GACtBrlE,QAASyqE,KAEXjwE,EAAAA,GAAAA,cAAC2jE,GAAc,CACbvgH,OAAQA,EACRC,SAAUA,EACV4B,OAAQmrH,GACRoM,gBAAiBxuB,GACjBxoD,QAAS6qE,KAEXrwE,EAAAA,GAAAA,cAAC09E,GAAAA,EAAY,CACXz4H,OAAQyqH,GACRj9F,OAAQm9F,GACRn6G,aAAco6G,GACdpF,eAAgBA,GAChBI,qBAAsBA,GACtB8Q,cAAe7L,GACf2L,oBAAqB3L,GACrBtqE,QAASmqE,OAIdjB,IACC1uE,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,SACNzuB,UAAU,SACVouB,QAAS8sE,GACT3mE,UAAU,0BAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,sBAGjB0sB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL+C,IAAK4pE,GACL5zG,OAAK,EACL8mC,MAAM,YACNzuB,WAAWuvB,EAAAA,GAAAA,GAAeg0E,IAAkBnxD,GAAW,YAAagpD,IAAwB,aAC5FrtD,SAAU24D,GACV2D,oBAAkB,EAClBC,aAAW,EACX/1E,UAAW7/C,GAAKyyH,IAChB/4E,QAASu4E,GACTj5D,cACE61D,KAAoBxP,GAAgB2P,MAAQE,GAAwBl3D,QAAoBx8D,GAG1Fw8C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,mBACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,uBACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,6BACb0sB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,qBAEd4jG,IACCl3E,EAAAA,GAAAA,cAAC69E,GAAAA,EAAc,CACb54H,OAAQkyH,GACRnO,uBAAwBA,EACxBqS,aAAer2D,OAAoCxhE,EAAnBm3H,GAChCmD,eAAiB3U,OAAuC3lH,EAAtBk3H,GAClCqD,iBAAkBnD,GAClBp1E,QAASya,GACTzN,oBAAqB0N,GACrB+7D,gBAAiBj3D,IAGpBgnD,GACG,KEniDV,IAAersE,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,SAAE1rC,GAAa0rC,EACfo+E,GAAel+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB7rC,GAAU,GAG/E,OAAO8pH,EAAeh+E,EAAAA,GAAAA,cAACg+E,EAAiBp+E,QAAYp8C,CAAS,ICG/D,IAAem8C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,SAAE1rC,GAAa0rC,EACfq+E,GAAuBn+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB7rC,GAGrF,OAAO+pH,EAAuBj+E,EAAAA,GAAAA,cAACi+E,EAAyBr+E,QAAYp8C,CAAS,ICG/E,IAAem8C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,OAAE36C,GAAW26C,EACbs+E,GAAwBp+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0B96C,GAGvF,OAAOi5H,EAAwBl+E,EAAAA,GAAAA,cAACk+E,EAA0Bt+E,QAAYp8C,CAAS,ICGjF,IAAem8C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAE36C,GAAW26C,EACbu+E,GAAcr+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgB96C,GAGnE,OAAOk5H,EAAcn+E,EAAAA,GAAAA,cAACm+E,EAAgBv+E,QAAYp8C,CAAS,ICK7D,IAAem8C,EAAAA,EAAAA,KAVuCC,IACpD,MAAM,uBAAElQ,GAA2BkQ,EAC7Bw+E,GAA4Bt+E,EAAAA,GAAAA,GAChCC,GAAAA,GAAAA,MAAe,6BAA8BrQ,GAI/C,OAAO0uF,EAA4Bp+E,EAAAA,GAAAA,cAACo+E,EAA8Bx+E,QAAYp8C,CAAS,ICCzF,IAAem8C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE36C,GAAW26C,EACby+E,GAAmBv+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB96C,GAG7E,OAAOo5H,EAAmBr+E,EAAAA,GAAAA,cAACq+E,EAAqBz+E,QAAYp8C,CAAS,ICIvE,IAAem8C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE36C,GAAW26C,EACb0+E,GAAmBx+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB96C,GAG7E,OAAOq5H,EAAmBt+E,EAAAA,GAAAA,cAACs+E,EAAqB1+E,QAAYp8C,CAAS,ICGvE,IAAem8C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAE36C,GAAW26C,EACb2+E,GAAuBz+E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB96C,GAGrF,OAAOs5H,EAAuBv+E,EAAAA,GAAAA,cAACu+E,EAAyB3+E,QAAYp8C,CAAS,ICqI/E,SAASg7H,GAAQ3wD,GACf,MAAqB,SAAdA,EAAK4wD,MAAmB5wD,EAAKppE,MAAQqqB,EAAAA,IAAAA,IAAkC++C,EAAKppE,KACrF,CAEA,MAAMi6H,GAA8B,IAAM/2H,EAAAA,IAuf1C,IAAeg4C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAA+B,IAA7B,SAAE0zC,GAAU1zC,EACnB,MAAMg0B,GAAQmhB,EAAAA,EAAAA,IAAYnjD,IAExB2X,UAAWqkH,EAAqBC,WAAYC,EAAgB,gBAAEpqB,EAAe,aAAEqqB,GAC7En8H,EAAOiY,SAASmkH,OAAOp6F,IAAU,CAAC,GAEhC,aACJpwB,EAAY,kBAAED,EAAiB,wBAAEu7B,EAAuB,YACxD1+B,EAAW,iBAAE07B,EAAgB,aAAE37B,EAAY,YAAExF,EAAW,4BAAEs/C,EAA2B,qBACrF15C,IACErN,EAAAA,EAAAA,IAAetB,GACbkC,GAAqBvB,EAAAA,EAAAA,IAAyBX,IAC9C,gBAAEoR,EAAe,aAAEsoB,GAAiB15B,EAEpCs7C,EAAoB,CACxBtZ,QACAk6F,mBACApqB,kBACAqqB,eACAxqH,oBACAuwD,oBAAoB94D,EAAAA,EAAAA,IAAyBpJ,EAAQ0hD,GACrDs6E,sBACAK,qBAAsB10H,SAAQ4sB,EAAAA,EAAAA,IAAwBv0B,IACtDmiE,oBAAoBC,EAAAA,EAAAA,IAAqBpiE,GACzCs8H,kBAAmB30H,QAAQ6G,GAC3B+tH,uBAAwB50H,QAAQ4G,GAChCiuH,uBAAwBtyF,GAAkB5nC,OAC1Cm6H,2BAA4B90H,QAAQgH,GACpC+tH,yBAAyB/mH,EAAAA,EAAAA,IAA0B3V,GACnDuiE,qBAAsBz0D,KAAKC,IAAI,EAAG6D,EAAazR,OAAS,GACxD+sC,0BACA97B,kBACAsoB,gBAGF,IAAKx3B,EACH,OAAOo5C,EAGT,MAAM,OAAE76C,EAAM,SAAEC,EAAUoB,KAAMsD,GAAoBlD,EAC9Co7B,GAAYC,EAAAA,EAAAA,IAAS98B,GACrBmO,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1Bs+B,GAAMyD,EAAAA,EAAAA,IAAUxiC,EAAQS,GACxB81C,GAAY5sC,EAAAA,EAAAA,IAAgB3J,EAAQS,EAAQC,IAC1CD,OAAQ64B,EAAajyB,UAAWkyB,GAAmBxwB,EAErDovB,GAAa5vB,EAAAA,EAAAA,IAAiBvI,EAAQS,EAAQC,GAC9CmiE,EAAal7D,QAAQwwB,GAAYhQ,iBACjC0kF,EAAUj+F,IAAQ+tH,EAAAA,EAAAA,IAAiB/tH,EAAMlO,EAAUmiE,GACnD+5D,GAAkBh7D,EAAAA,EAAAA,IAA0B5hE,EAAQS,GACpDo8H,EAA0C,WAApBz3H,EACtBk8D,EAAmC,WAApBl8D,GAAgC1E,IAAamB,EAAAA,GAC5DkxD,EAAYprD,QAAQiH,IAAQkzD,EAAAA,EAAAA,IAAclzD,IAC1CizD,EAAel6D,QACnBiH,GAAQ0yD,IAAiBvO,IAAagP,EAAAA,EAAAA,IAAiBnzD,KAAUA,EAAK6hC,cAAgB7hC,EAAK4nB,cAEvFsmG,EAAmBn1H,QAAQiH,GAAM6hC,aAAe7hC,EAAKmuH,cACrD/6D,EAAwBr6D,QAAQiH,GAAM6hC,aAAe7hC,EAAKqzD,eAC1DR,EAAgB95D,QAAQo3B,IAAO2iC,EAAAA,EAAAA,IAAoB1hE,EAAQ++B,EAAIn9B,KAC/D+/D,GAAeF,GAAiBm7D,EAChCI,EAAqBr1H,QACzBiH,IAAQwnF,EAAAA,EAAAA,IAAYxnF,MAAUsgC,EAAAA,EAAAA,IAAmBlvC,EAAQ4O,EAAKhN,KAAO83B,GAEjE7xB,GAAeC,EAAAA,EAAAA,IAAmB9H,EAAQS,EAAQC,GAClDu8H,IAAyBruH,GAAM5L,SACjCtC,IAAamB,EAAAA,KAAmBgG,GAAiB+G,EAAKiK,SAASo/E,EAAAA,MAAmBzuD,SAEhF63B,EAAe/nC,GAAeC,GAChCzkB,EAAAA,EAAAA,IAAkB9U,EAAQs5B,EAAaC,QACvC14B,EAEEq8H,EAAkBx8H,IAAamB,EAAAA,KAAmB+M,GAAM5L,QACxDywB,EAAeypG,GAAkBv8G,EAAAA,EAAAA,IAAyB3gB,EAAQS,EAAQC,QAAYG,EAE5F,MAAO,IACFy6C,EACH76C,SACAC,WACA0E,kBACAwJ,OACA/G,eACAy1B,YACA6/F,sBAAuBx1H,QAAQiH,GAAMqJ,UACrC40F,SAAUgwB,KACHjuH,GAAQi+F,KACT+vB,KACCE,GAAoBluH,GAAM6hC,eAC3BwsF,EACNJ,sBACAO,wBAAyBxuH,GAAMwuH,wBAC/BC,oBAAqBzuH,GAAMyuH,oBAC3BC,UAAWJ,GAAmBv1H,SAASk1H,GAAuBtmF,GAAWp2C,QACzEo9H,eAAgB51H,QAAQ05D,GACxBmB,kBAAmBb,GAAeF,GAAiBI,GAAgBG,EACnE8B,oBAAqBvtB,EAAYA,EAAUp2C,OAAS,EACpDkoD,8BACA0K,YACA8O,eACAF,cACAF,gBACAq7D,mBACA96D,wBACAg7D,qBACAzmF,YACA9iB,eACD,GA1GektB,EArfpB,SAAqBvgD,GA8CK,IA9CJ,cACpBo9H,EAAa,OACb/8H,EAAM,SACNC,EAAQ,gBACR0E,EAAe,SACfs8C,EAAQ,KACR9yC,EAAI,aACJ/G,EAAY,UACZy1B,EAAS,oBACTu/F,EAAmB,QACnBhwB,EAAO,wBACPuwB,EAAuB,oBACvBC,EAAmB,UACnBC,EAAS,eACTC,EAAc,kBACd/6D,EAAiB,oBACjBsB,EAAmB,iBACnBo4D,EAAgB,MAChBl6F,EAAK,gBACL8vE,EAAe,aACfqqB,EAAY,kBACZxqH,EAAiB,mBACjBuwD,EAAkB,oBAClB85D,EAAmB,gBACnB5qH,EAAe,qBACfirH,EAAoB,mBACpBl6D,EAAkB,kBAClBm6D,EAAiB,uBACjBC,EAAsB,uBACtBC,EAAsB,2BACtBC,EAA0B,wBAC1BC,EAAuB,4BACvBr0E,EAA2B,qBAC3Bka,EAAoB,UACpBxP,EAAS,sBACToqE,EAAqB,aACrBt7D,EAAY,YACZF,EAAW,cACXF,EAAa,wBACbv0B,EAAuB,iBACvB4vF,EAAgB,sBAChB96D,EAAqB,mBACrBg7D,EAAkB,aAClBtjG,EAAY,UACZ6c,EAAS,aACT9iB,IACsBrzB,EACtB,MAAM,SACJ4D,GAAQ,iBACRo/D,GAAgB,iBAChBq6D,GAAgB,SAChBC,GAAQ,iBACRrgG,GAAgB,qBAChBt9B,GAAoB,sBACpB2C,GAAqB,YACrBi7H,GAAW,eACX/9F,GAAc,WACdg+F,GAAU,iBACVrxH,GAAgB,aAChBsqC,GAAY,mBACZgnF,GAAkB,qBAClBC,KACE5kH,EAAAA,EAAAA,OAEIzD,MAAOu1B,KAAgBk5B,EAAAA,GAAAA,MACzB,SAAEV,GAAQ,UAAEu6D,KAAcp8E,EAAAA,EAAAA,MAE1Bt8C,IAAO25C,EAAAA,GAAAA,MACNyoE,GAAeuW,KAAoB//E,EAAAA,EAAAA,IAASu6E,GAAAA,EAAAA,OAC5CyF,GAAYC,KAAiBjgF,EAAAA,EAAAA,OAC7BkgF,GAAcC,KAAmBngF,EAAAA,EAAAA,OACjCogF,GAAkBC,KAAuBrgF,EAAAA,EAAAA,KAAS,IAEnD,sBACJsgF,GAAqB,qBACrBr7D,GAAoB,wBACpBF,GAAuB,mBACvBC,GAAkB,2BAClB+pC,IC7MW,SACbvsG,EAAiBC,EAAmB61C,EAAsB9iB,GAE1D,MAAOuvC,EAAyBw7D,IAA2B9sC,EAAAA,GAAAA,GAAkC,CAAC,IACvFsb,EAA4ByxB,IAA8B/sC,EAAAA,GAAAA,KAC3DgtC,GAAuB39E,EAAAA,EAAAA,OACtBkiB,EAAoB07D,IAAsBjtC,EAAAA,GAAAA,KAE3C73C,EAAMp5C,EAAU,GAAEA,KAAUC,SAAaG,EAiI/C,OA9HA27C,EAAAA,EAAAA,KAAU,KACRiiF,OAA2B59H,GAC3B69H,EAAqB7tG,aAAUhwB,EAC/B89H,OAAmB99H,EAAU,GAC5B,CACDJ,EAAQ+9H,EAAyBC,EAA4BE,EAAoBj+H,KAGnF87C,EAAAA,EAAAA,KAAU,KACR,IAAK3C,EAAK,OACV,MAAM4pB,EAAqBT,IAA0BnpB,GAC/C+kF,EAAeroF,GAAWp2C,QAAU,EACtCsjE,GAAsBm7D,GACxBJ,EAAwB,IACnBx7D,IACH,CAACnpB,GAAM/rC,KAAKC,IAAI,EAAG6wH,EAAe,IAEtC,GACC,CAAC57D,EAAyBnpB,EAAKtD,GAAWp2C,OAAQq+H,IA4G9C,CACLD,uBA3G4BhiF,EAAAA,GAAAA,IAAgBn8C,IAEP,IAFQ,uBAC7CgnG,EAAyB,GAAE,0BAAE1vB,EAA4B,GAAE,WAAE5qC,EAAU,YAAE0iE,EAAW,UAAE73B,GACtDv3E,EAChC,IAAKK,IAAWC,IAAam5C,EAAK,OAElC,MAAM75C,GAASyJ,EAAAA,EAAAA,MAIf,IAF4B8sC,GAAWp2C,SAEVo2C,EAAW,OAExC,MAAMotB,EAAqBV,IAC3B,GAAIU,IAAuB6rC,EAAa,CACtC,MAAMqvB,EAAiBtoF,EAAU7xC,QAAQi/D,GACzC66D,EAAwB,IACnBx7D,IACH,CAACnpB,GAAMglF,IAETF,OAAmB99H,EACrB,CAEI2uG,IACFivB,OAA2B59H,GAC3B89H,OAAmB99H,IAGrB,MAAMi+H,EAA0B9xB,IAE1B+xB,EAA2BL,EAAqB7tG,QAItD,GAAI8mD,GACmC,IAAlCyvB,EAAuBjnG,QAAqD,IAArCu3E,EAA0Bv3E,SAChE4+H,GAA0Bl0H,SAAS6sE,EAA0B,IACjE,OAGF,MAAMsnD,GAAuB1oH,EAAAA,EAAAA,KAC1ByoH,GAA0B56H,QAAQvC,IAAQ81E,EAA0B7sE,SAASjJ,MAAQ,IACnFmc,OAAOqpF,IAGZs3B,EAAqB7tG,QAAUmuG,EAE/B,MAAMC,GAAmBh+G,EAAAA,EAAAA,IAAuBjhB,EAAQS,GAExD,IAAKu+H,EAAqB7+H,QAAUw3E,GAAasnD,IAAqB1oF,EAAU1rC,SAASo0H,GAAmB,CAC1G,MAAMC,EAA4B3oF,EAAUppC,MAAMvL,GAAOA,EAAKq9H,IAC9D,GAAIC,EAA2B,CAC7B,MAAM/2H,EAAWouC,EAAU7xC,QAAQw6H,GACnCV,EAAwB,IACnBx7D,IACH,CAACnpB,GAAM1xC,GAEX,CACF,CAEA,GAAI22H,GAA2BnnD,EAC7B,OAGF,MAAM9pE,EAAQC,KAAKC,OAAOixH,GACpBG,EAAa5oF,EAAUhiC,WAAW3S,GAAOA,IAAOiM,IAChDuxH,EAAQtyF,EAAa,EAAI,EACzB3kC,EAAW62H,EAAqB7+H,OAASg/H,EAC7CJ,GAA0B5+H,QACtBmsE,EAAAA,GAAAA,IAAM/1B,EAAU7xC,QAAQq6H,EAAyB,IAAMK,EAAO,EAAG7oF,EAAUp2C,OAAS,GACpF,EAGNq+H,EAAwB,IACnBx7D,IACH,CAACnpB,GAAM1xC,GACP,IAkCF+6D,sBA/B2B3mB,EAAAA,GAAAA,IAAiBl1C,IAC5C,IAAK5G,IAAWC,IAAam5C,GAAOopB,IAAsB,OAAO,EAEjE,MAAMjjE,GAASyJ,EAAAA,EAAAA,MACf,IAAK8sC,GAAWp2C,OAEd,OAAOszB,IAAiBpsB,EAG1B,MAAMgY,EAAQk3B,EAAU7xC,QAAQ2C,GAC1Bw3H,GAAiBn6D,EAAAA,GAAAA,GAAcnuB,EAAUp2C,OAAQkf,EAAQ,GAO/D,OANAo/G,GAA2B,IAET9/G,EAAAA,EAAAA,IAAgB3e,EAAQS,EAAQC,IACfmK,SAASxD,KACvCwX,EAAAA,EAAAA,IAA8B7e,EAAQS,EAAQC,EAAU2G,IAG3Dm3H,EAAwB,IACnBx7D,IACH,CAACnpB,GAAMglF,KAEF,IAEPF,EAAmBpoF,EAAUsoF,KACtB,EACT,IAMA77D,0BACAC,qBACA+pC,6BAEJ,CD8DMqyB,CAAiB5+H,EAAQC,EAAU61C,EAAW9iB,IAE5C6rG,GAAuB59E,GAAY26E,EACnCkD,GAAyB79E,EAAWq6E,QAA8Bl7H,EAClE+rG,GAAW0wB,IACftyF,GAAci6B,EAAAA,KACXs4D,GAEDr7D,GAAsBl3B,GAAcE,EAAAA,KACjCF,GAAcm6B,EAAAA,MAEdzjB,GAAY8gB,GAAqBx3B,GAAc+7B,EAAAA,KAGhDy4D,IAAkBC,EAAAA,GAAAA,GAAuBh/H,EAAQ8+H,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuB/+H,EAAU6+H,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuBr6H,EAAiBm6H,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuB59D,EAAc09D,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuB99D,EAAa49D,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuBh+D,EAAe89D,IAC/DQ,IAAmBN,EAAAA,GAAAA,GAAuB5yB,EAAS0yB,MACnDO,KAA2BD,KAAyBD,IAAyBn/H,IAAWu/H,EAAAA,IACxFC,IAAoBR,EAAAA,GAAAA,GAAuB7yB,GAAU2yB,IACrDW,IAAsBT,EAAAA,GAAAA,GAAuBxB,GAAYsB,KAA2B9+H,IAAWu/H,EAAAA,IAC/FG,IAAqBV,EAAAA,GAAAA,GAAuB1sE,EAAWwsE,IACvDa,IAA4BX,EAAAA,GAAAA,GAAuB3C,EAAkByC,IACrEc,IAAiCZ,EAAAA,GAAAA,GAAuBz9D,EAAuBu9D,IAC/Ee,IAAsCb,EAAAA,GAAAA,GAC1Ch/H,EAAS89H,QAAwB19H,EACjC0+H,IAGIr5D,IAAoBC,EAAAA,GAAAA,GAAY5D,GAEhClT,QACkBxuD,IAAtBqlE,IAAmCA,GAAoB3D,EAAuB2D,QAAoBrlE,GAG9F,QAAEkiE,GAAO,uBAAEw9D,GAAsB,0BAAEC,IA8e3C,SACEC,EACAl+D,EACA2D,EACAzlE,EACAihD,GAEA,MAAOqhB,EAAS29D,IAAcziF,EAAAA,EAAAA,KAAUyD,GAClC0qC,GAAcC,EAAAA,GAAAA,KAEds0C,OAA8C9/H,IAAtBqlE,GAAmCA,IAAsB3D,EA8BvF,OA7BIo+D,IACEF,GACFC,GAAW,GAGXl3H,YAAW,KACTk3H,GAAW,EAAK,GACf3E,KAEH3vC,MAIJ15B,EAAAA,GAAAA,IAAc,KACP+tE,GACHC,GAAW,EACb,GACC,CAACD,IAYG,CACL19D,QAASA,IAAY49D,EACrBJ,uBAAwBE,EAZ1B,SAAgCxuH,GACP,cAAnBA,EAAE2uH,cAAgC3uH,EAAEkhE,SAAWlhE,EAAE4hE,eACnD6sD,EAAW/4H,QAAQlH,GAEvB,OAQoEI,EAClE2/H,0BAA2BC,EAP7B,WACEC,GAAW,EACb,OAK0E7/H,EAE5E,CA3hByEggI,EACpEx4E,GAA+Bq0E,EAChCn6D,EACA2D,GACAzlE,EACAihD,IAGFlF,EAAAA,EAAAA,KAAU,IACD/7C,GACHglD,EAAAA,GAAAA,IAAsB,KACtBzhD,GAAS,CAAEpC,QAAIf,GAAY,SAE3BA,GACH,CAACJ,EAAQuD,MAEZ0uD,EAAAA,GAAAA,IAAc,KACZsrE,GAAiBxF,GAAAA,EAAAA,MACjB4F,QAAgBv9H,EAAU,GACzB,CAACJ,KAGJ+7C,EAAAA,EAAAA,KAAU,KACR,IAAKh8B,EAAAA,KAAWsd,EAAAA,GACd,OAGF,MAAM,eAAEgjG,GAAmBr9H,OAC3B,IAAKq9H,EACH,OAGF,MAAM5gC,EAAeA,KACnB,MAAM6gC,EAAcD,EAAeprH,SAAWnF,SAASutG,gBAAgB5N,cAEvE3pC,EAAAA,EAAAA,KAAgB,KACdh2D,SAAS43B,KAAKm+B,UAAU06D,OAAO,mBAAoBD,EAAY,GAC/D,EAKJ,OAFAD,EAAeziF,iBAAiB,SAAU6hD,GAEnC,KACL4gC,EAAexiF,oBAAoB,SAAU4hD,EAAa,CAC3D,KAGH1jD,EAAAA,EAAAA,KAAU,KACJlf,GACFogG,GAAS,CAAEztH,OAAQxP,GACrB,GACC,CAACA,EAAQ68B,EAAWogG,MAEvBlhF,EAAAA,EAAAA,KAAU,MACH2gF,GAAyBzjG,GAC5B2D,GAAiB,CAAE58B,OAAQA,GAC7B,GACC,CAACA,EAAQ68B,EAAW6/F,EAAuBzjG,EAAc2D,MAE5Dmf,EAAAA,EAAAA,KAAU,KACJ/7C,GAAUu8H,GAAsBj6D,IAClClsB,GAAa,CAAEp2C,UACjB,GACC,CAACu8H,EAAoBv8H,EAAQsiE,GAASlsB,KAEzC,MAAM,WACJoqF,GAAU,YAAEC,GAAW,cAAEC,IExUtB,SACLjxD,EACAkxD,EACAp9E,EACAq9E,EACAC,GAEA,MAAO/vH,EAAUgwH,EAAcC,IAAkBrgF,EAAAA,GAAAA,MAC1CsgF,EAAeC,IAAoBzjF,EAAAA,EAAAA,IAAiB,IACpD0jF,EAAqBC,IAA0B3jF,EAAAA,EAAAA,IAAiB,GAEjE4jF,GAAkBtlF,EAAAA,GAAAA,IAAiB9mC,KACvC8wD,EAAAA,EAAAA,KAAgB,KACd,IAAK2J,EAAWr/C,QACd,OAGF,MAAMixG,EAAUrsH,EAAS,GAAEA,MAAY,GACvCy6D,EAAWr/C,QAAQuvB,MAAM3qC,MAAQqsH,EAE/B5xD,EAAWr/C,QAAQuvB,MAAM+hC,YAAYm/C,EAAiBQ,EACxD,GACA,IAWJ,SAASX,KACP56D,EAAAA,EAAAA,KAAgB,KACdh2D,SAAS43B,KAAKm+B,UAAUE,OAAO,mBAAmB,GAEtD,CAgDA,OA5DAlS,EAAAA,EAAAA,KAAgB,KACT4b,EAAWr/C,SAAYwwG,GAI5BQ,EAAgBR,EAAa,GAC5B,CAACC,EAAiBpxD,EAAYmxD,EAAcQ,KA0B/CrlF,EAAAA,EAAAA,KAAU,KACR,IAAKjrC,EAAU,OAEf,MAAM4gE,EAAmBlgE,IACvB,MAAM8vH,EAAWj0H,KAAKsjG,KAAKuwB,EAAsB1vH,EAAEqgE,QAAUmvD,GAC7DI,EAAgBE,EAAS,EAG3B,SAASC,IACPC,IACAb,EAASlxD,EAAWr/C,QAASkvE,YAC/B,CAEA,SAASkiC,IACPd,IACA5wH,SAAS+tC,oBAAoB,YAAa6zB,GAAiB,GAC3D5hE,SAAS+tC,oBAAoB,UAAW0jF,GAAU,GAClDzxH,SAAS+tC,oBAAoB,OAAQ0jF,GAAU,GAC/CR,GACF,CAMA,OAJAjxH,SAAS8tC,iBAAiB,YAAa8zB,GAAiB,GACxD5hE,SAAS8tC,iBAAiB,UAAW2jF,GAAU,GAC/CzxH,SAAS8tC,iBAAiB,OAAQ2jF,GAAU,GAErCC,CAAO,GACb,CAACN,EAAqBF,EAAevxD,EAAYkxD,EAAU7vH,EAAUiwH,EAAgBK,IAEjF,CAAEZ,WA9CT,SAAoBhvH,GAClBA,EAAE8qC,kBAEFwpB,EAAAA,EAAAA,KAAgB,KACdh2D,SAAS43B,KAAKm+B,UAAU95C,IAAI,mBAAmB,IAGjDk1G,EAAiBzvH,EAAEqgE,SACnBsvD,EAAuB1xD,EAAWr/C,QAASkvE,aAC3CwhC,GACF,EAoCqBL,YAlCrB,SAAqBjvH,GACnBA,EAAE8qC,iBACF8kF,OAAgBhhI,GAChBmjD,GACF,EA8BkCm9E,gBACpC,CFmPMe,CAAU1E,GAAgB2E,GAAMtE,GAAmB,CACrDzsH,gBAAiB+wH,KACfrE,GAAsB1sH,EAAiB,uBAErCgxH,IAAkB7lF,EAAAA,GAAAA,IAAiBtqC,IACvC,MAAM,MAAE8nG,GAAU9nG,EAAEowH,cAAgB,CAAC,EAC/BC,EAAkBvoB,GAASA,EAAM55G,OAAS,GAAKE,MAAMof,KAAKs6F,GAG7D51G,QAAQ+mE,GAAuB,kBAAdA,EAAKppE,OAEtB41F,MAAMmkC,IAETmC,GAAiBsE,EAAkB9J,GAAAA,EAAAA,UAA0BA,GAAAA,EAAAA,SAAuB,IAGhF+J,IAAqBhmF,EAAAA,GAAAA,IAAgB,KACzCyhF,GAAiBxF,GAAAA,EAAAA,KAAmB,IAGhCgK,IAAuBjmF,EAAAA,GAAAA,IAAgB,KAC3C+hF,IAAoB,EAAK,IAGrBmE,IAAkBlmF,EAAAA,GAAAA,IAAgB,KACtC+hF,IAAoB,EAAM,IAGtBoE,IAAyBnmF,EAAAA,GAAAA,IAAgB,KAC7CkhF,GAAiB,CAAEh9H,OAAQA,EAASC,SAAUA,IAC9C+hI,KACAr/D,IAAkB,IAGdu/D,IAAoBpmF,EAAAA,GAAAA,IAAgB,KACxCv4C,GAAS,CAAEpC,GAAInB,GAAS,IAGpBmiI,IAAuBrmF,EAAAA,GAAAA,IAAgB,KAC3CohF,GAAY,CAAEl9H,OAAQA,IAClB4/H,IACF9zH,GAAiB,CACf3G,QAAqBP,GAAZ0tD,EAAiB,sCAA8C,sCAE5E,IAGI8vE,IAAiBtmF,EAAAA,GAAAA,IAAgB,KACrC3c,GAAe,CAAEC,QAAS,UAAW,IAGjCijG,IAAmBvmF,EAAAA,GAAAA,IAAgB,KACvCqhF,GAAW,CAAEn9H,OAAQA,GAAU,IAG3BsiI,GG/XoBC,EAAChhG,EAAiBihG,KAC5C,MAAO35F,EAAO45F,IAAYjlF,EAAAA,EAAAA,IAASglF,GAqBnC,OAnBAzmF,EAAAA,EAAAA,KAAU,KACHymF,IAIDA,EAAaj4E,WAAW,KAC1Bk4E,EAASD,GAETE,GAASpsH,MAAMqsH,EAAAA,IAAsBphG,EAAOmhG,GAASE,KAAKrrE,MACvDhhD,MAAMuhD,IACL,MAAM7jD,EAAMuV,IAAIguC,gBAAgBM,IAChC66C,EAAAA,GAAAA,IAAa1+F,GACVsC,MAAK,KACJksH,EAAU,OAAMxuH,KAAO,GACvB,IAEV,GACC,CAACuuH,EAAcjhG,IAEXihG,EAAe35F,OAAQzoC,CAAS,EHyWTmiI,CAAoBhhG,EAAOk6F,GAEnDvrG,IAAYuvB,EAAAA,GAAAA,GAChB+/E,IAAqB,mBACrBqD,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAcrjF,EAAAA,GAAAA,GI7YO,uBAAsH,uBJgZ/Ig8E,GIhZgE,uBJiZhEpqB,GIjZuG,uBJkZvGoqB,GAAoBF,GIlZ4J,uBJmZhL95D,GInZyN,wBJsZrNshE,IAA6BtjF,EAAAA,GAAAA,GACjC,sBACCiiB,GAAsB,SAGnBshE,IAAkCC,EAAAA,EAAAA,IACtCr+H,GAAM+3H,EAAyBC,GAE3BsG,IAA2BC,EAAAA,EAAAA,IAA4Bv+H,GAAMuJ,EAAMlO,EAAUiH,QAAQE,IAErFg8H,GAA6BJ,IAAmCE,IAGhE,oBACJG,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChBpkF,EAAAA,EAAAA,KACF,IrJ5ZW,SAAyC/U,EAAqB6hE,GAC3E,MAAMu3B,EAAcp5F,GAAei6B,EAAAA,IAC/Bx6B,GAAAA,GACA,EAAIA,GAAAA,GACF45F,EAmCR,SAA6Br5F,GAC3B,GAAIA,EAAcE,EAAAA,IAA0C,CAC1D,MAAM95B,EAAkBtD,KAAKq9B,IAC3Br9B,KAAKC,IAAkB,IAAdi9B,EAAoBJ,IAC7BD,IAGI25F,EAAmBx2H,KAAKq9B,IACd,IAAdH,EACAL,IAGF,OAAO78B,KAAKq9B,IACVH,EAAc55B,EAAkBkzH,EAChC55F,GAEJ,CAEA,GAAIM,EAAcI,EAAAA,IAAyC,CACzD,MAAMh6B,EAAkBtD,KAAKq9B,IAC3Br9B,KAAKC,IAAkB,GAAdi9B,EAAmBJ,IAC5BD,IAGF,OAAO78B,KAAKq9B,IACVH,EAAc55B,EACds5B,GAEJ,CAEA,OAAIM,EAAcN,GACTA,GAGFM,CACT,CAtE2Bu5F,CAAoBv5F,GACvCw5F,EAAkBx5F,GAAei6B,EAAAA,IACnC,MAAQx6B,GAAAA,GACR,EAAIA,GAAAA,GAEFg6F,EAAgB53B,EAClBw3B,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAe15F,EAAci6B,EAAAA,IAC/Bn3D,KAAKq9B,IAAIk5F,EAAmBD,EAAa55F,IACzC65F,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,sBACAC,qBACAC,mBAXyBn3B,EACtB23B,EAAkB,EAAKT,EACxB,EAUFE,kBARwBp3B,EACrB23B,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EAAe75F,GAiBtCs5F,2BAhBiCt5F,GAAqB65F,EAkB1D,CqJuXUC,CAAgC35F,GAAa+0F,KACnD,CAACA,GAAkB/0F,KAGf45F,IAAkB1kF,EAAAA,GAAAA,GACtB,wBACC6/E,IAAoB,cACrBA,IAAoB5B,KAAiBh8D,GAAsB,eAG7DxX,EAAAA,GAAAA,GAAe,CACbp5C,SAAU4wD,EACVvX,OAAQloD,MAGVioD,EAAAA,GAAAA,GAAe,CACbp5C,SAAU+tH,GACV10E,OAAQ7qD,KAGV,MAAM8kI,GAAsBl9H,SACzBk1H,IAAwBkD,KAAqBD,KAA2BD,KACrED,IAAyBiE,IAEzBiB,GAA6Bn9H,QACjCm4H,IAA0BF,IAAyBS,IAAkCR,IAClFhD,GAECzqB,GAAiBzqG,QAAQk9H,IAAuB1iE,GAAsB06D,GAE5E,OACEx/E,EAAAA,GAAAA,cAAA,OACEz7C,GAAG,eACH+uB,UAAWA,GACXm2B,gBAAiBy5E,GACjBngF,MAAQ,sCACqB0jF,wCACDC,sCACFG,8CACQC,wCACNH,yCACDC,mCACN9H,oDAEfrqB,IAA8B,SAAV9vE,EAAmB+iG,EAAAA,IAAsBC,EAAAA,gBAEnEjmF,QAAUykB,IAAY7xD,EAAqBgxH,QAAoB9hI,GAE9Dk9H,IACC1gF,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,gBACVimC,YAAaqqE,GACbgE,UAAW9D,GACX/+B,cAAe8+B,KAGnB7jF,EAAAA,GAAAA,cAAA,OACE1sB,UAAW4yG,GACXnjF,MAAO2iF,GAAyB,wBAAuBA,UAA0BliI,IAEnFw8C,EAAAA,GAAAA,cAAA,OAAKz7C,GAAG,0BACP+F,QAAQ63H,IAAmBE,KAC1BriF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kBAAkBu0G,YAAanF,GAAmBqC,QAAkBvhI,GACjFw8C,EAAAA,GAAAA,cAAC8nF,GAAY,CACX1kI,OAAQ++H,GACR9+H,SAAUg/H,GACVt6H,gBAAiBu6H,GACjB58D,QAASA,GACTrhB,SAAUA,EACVshB,wBAAyBA,GACzBC,mBAAoBA,GACpBC,qBAAsBA,KAExB7lB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTzP,KAAMyY,EAA8B,OAASq0E,EAA0B,QAAU,OACjFp9E,UAAWijB,EACXnT,eAAa,EACbC,oBAAqBA,GACrB+1E,OAAQ5E,IAERnjF,EAAAA,GAAAA,cAACgoF,GAAW,CACVxrF,IAAM,GAAE2lF,MAAmBE,MAAqBC,KAChDl/H,OAAQ++H,GACR9+H,SAAUg/H,GACV59H,KAAM69H,GACN9yB,QAASkzB,GACTnzB,SAAUqzB,GACV15B,YAAa23B,GACb13B,cAAe43B,GACfr7D,QAASA,GACT+pC,gBAAiBg4B,GACjB/3B,cAAeplG,SAASu0H,IAAqBpqB,GAC7Cv6B,2BAA4B+oD,GAC5BtzB,2BAA4BA,KAE9B3vD,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWi0G,IACb7E,IACC1iF,EAAAA,GAAAA,cAACioF,GAAQ,CACP7kI,OAAQ++H,GACR9+H,SAAUg/H,GACVt6H,gBAAiBu6H,GACjBlY,cAAeA,GACfC,WAAY6a,GACZx/D,QAASA,GACTrhB,SAAUA,IAGbm7E,GACCx/E,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wCAAwCsuB,IAAK55C,GAAK65C,MAAQ,WAAQr+C,GAC/Ew8C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLiQ,OAAK,EACLrQ,MAAM,YACNzuB,UAAU,mBACVouB,QAASyjF,IAETnlF,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,oBACb0sB,EAAAA,GAAAA,cAAA,YAAOh4C,GAAK,uBAAwBy+D,EAAqB,QAI9D+gE,IACCxnF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAW6yG,IACdnmF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,4BACb0sB,EAAAA,GAAAA,cAAA,YACGwmF,MAMPniF,IAAak+E,IAA0BQ,KAA8BC,KAErEhjF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wCAAwCsuB,IAAK55C,GAAK65C,MAAQ,WAAQr+C,GAC/Ew8C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLiQ,OAAK,EACLlN,QAAM,EACN5xB,UAAU,wBACVouB,QAAS6jF,IAERv9H,GAAK86H,GAAqB,qBAAuB,sBAIvDz+E,GAAY2+E,IACXhjF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wCAAwCsuB,IAAK55C,GAAK65C,MAAQ,WAAQr+C,GAC/Ew8C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLiQ,OAAK,EACLlN,QAAM,EACN5xB,UAAU,wBACVouB,QAAS6jF,IAERv9H,GAAK,wBAIXq8C,GAAYm+E,IACXxiF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wCAAwCsuB,IAAK55C,GAAK65C,MAAQ,WAAQr+C,GAC/Ew8C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLiQ,OAAK,EACLlN,QAAM,EACN5xB,UAAU,wBACVouB,QAAS8jF,IAERx9H,GAAK,cAIXq8C,GAAYo+E,IACXziF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wCAAwCsuB,IAAK55C,GAAK65C,MAAQ,WAAQr+C,GAC/Ew8C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLC,KAAK,OACLiQ,OAAK,EACLlN,QAAM,EACN5xB,UAAU,wBACVouB,QAAS+jF,IAERz9H,GAAK,gBAIZg4C,EAAAA,GAAAA,cAACi+E,GAAoB,CACnBl2H,gBAAiBu6H,GACjBpuH,SAAU4wD,EACV0qC,QAASkzB,KAEX1iF,EAAAA,GAAAA,cAACm+E,GAAW,CAACl5H,OAAQg6H,IACrBj/E,EAAAA,GAAAA,cAACq+E,GAAgB,CAACp5H,OAAQi6H,IACzBhoD,EAAAA,IAA4Bl3B,EAAAA,GAAAA,cAACu+E,GAAoB,CAACt5H,OAAQm6H,MAI/Dp/E,EAAAA,GAAAA,cAACkoF,GAAqB,CACpB/4E,QAAS0zE,GACTrzB,QAASkzB,GACT3tB,eAAgBA,MAGnB1wD,GAAYrE,EAAAA,GAAAA,cAACg+E,GAAY,CAAC9pH,SAAU5J,QAAQ23H,OAGhD7+H,GACC48C,EAAAA,GAAAA,cAACk+E,GAAqB,CACpBj5H,OAAQ+7H,GACR59H,OAAQA,EACRqjE,oBAAqBA,EACrBjhB,QAAS4/E,GACT+C,QAAS9C,KAGbrlF,EAAAA,GAAAA,cAAA,OAAKwtD,eAAa,GACf39D,GAAyBvnC,KAAI,CAAConC,EAAwBztB,IACrD+9B,EAAAA,GAAAA,cAACo+E,GAAyB,CACxBgK,cAAenmH,EACfu6B,IAAK9M,EAAuBnrC,GAC5BmrC,uBAAwBA,OAI9BsQ,EAAAA,GAAAA,cAACs+E,GAAgB,CAACr5H,OAAQk6H,IAGhC,KK3jBMkJ,GAA4B,IAAM1gI,EAAAA,IAClC65B,IAAwB7tB,EAAAA,EAAAA,KAAU4L,GAAOA,KAAM,KAAK,GAAO,IAE5D+oH,GAAa,SAAbA,GAAa,OAAbA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,iCAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,0BAAbA,CAAa,EAAbA,IAAa,IAoClB,MAscA,IAAe3oF,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAEW,IAFT,OACPvN,EAAM,UAAEmlI,EAAS,aAAEC,EAAY,SAAEnlI,GAClCsN,EACC,MAAM7L,GAAWb,EAAAA,EAAAA,IAAetB,IACxBkB,MAAO4kI,IAAuBvxG,EAAAA,EAAAA,IAAwBv0B,IAAW,CAAC,GAClEkB,MAAO6kI,IAAuBC,EAAAA,EAAAA,IAA2BhmI,IAAW,CAAC,GACrEkB,MAAO+kI,IAAmBC,EAAAA,EAAAA,IAAuBlmI,IAAW,CAAC,EAC/D4O,EAAOnO,GAASsC,EAAAA,EAAAA,IAAW/C,EAAQS,QAAUI,EAC7CijB,EAAO8hH,GAAanlI,IAAU88B,EAAAA,EAAAA,IAAS98B,IAAUsjB,EAAAA,EAAAA,IAAW/jB,EAAQS,QAAUI,EAC9EkyD,EAAYnkD,IAAQkzD,EAAAA,EAAAA,IAAclzD,GAClCsoE,EAAgBtoE,GAAM5L,SAAW2E,QAAQjH,GAAYA,IAAamB,EAAAA,IAClEykB,EAAQ4wD,EAAgBtoE,EAAKiK,SAASnY,QAAaG,EACnDslI,EAAejvD,GAAiB5wD,IAAS8/G,EAAAA,EAAAA,IAAkBx3H,EAAM0X,GACjEu+E,EAAQ/gF,IAAQiC,EAAAA,EAAAA,IAAUjC,GAE1Bw8C,EAAgBx8C,IAAQuiH,EAAAA,EAAAA,IAAiBviH,GACzCwiH,EAAY3+H,SACfk+H,GACED,IACCtlE,GACD1xD,KACC0zD,EAAAA,EAAAA,IAAqBtiE,EAAQ4O,EAAKhN,OAElC27B,EAAAA,EAAAA,IAAS3uB,EAAKhN,OAASkrH,EAAAA,EAAAA,IAAYl+G,IAASA,EAAK69F,aAAe79F,EAAK6hC,cAErE81F,EAAkB5+H,QAAQlH,GAAU0B,EAASkP,WAAWC,SAAS7Q,IAAS20B,eAC1EoxG,GAAqBtvD,GAAiBz2E,GACxCyuC,EAAAA,EAAAA,IAAmBlvC,EAAQS,IAAS+lI,uBACpC3lI,EACEw1B,EAAoB51B,EACtB0B,EAASkP,WAAWC,SAAS7Q,IAAS40B,YAAYF,YAASt0B,EAE/D,MAAO,CACLylI,YACAhmE,gBACAkmE,oBACAzzE,YACA8xC,QACA3tB,gBACAivD,eACAl2H,OAAQ6T,GAAMliB,GACdkkI,qBACAC,qBACAE,iBACAM,kBACAlwG,oBACAgyB,4BAA6BlmD,EAASkmD,4BACvC,GAhDe1H,EAtc2BvgD,IAiCzC,IAAAqmI,EAAA,IAjC0C,OAC9ChmI,EAAM,SACNC,EAAQ,aACRgmI,EAAY,UACZd,EAAS,SACTe,EAAQ,aACRd,EAAY,aACZe,EAAY,oBACZC,EAAmB,gBACnBC,EAAe,YACfC,EAAW,cACXC,EAAa,gBACbC,EAAe,eACfC,EAAc,oBACdC,EAAmB,aACnBC,EAAY,iBACZC,EAAgB,cAChB/mE,EAAa,OACbrwD,EAAM,UACNq2H,EAAS,UACTvzE,EAAS,QACTlQ,EAAO,eACPiQ,EAAc,mBACdgzE,EAAkB,mBAClBC,EAAkB,eAClBE,EAAc,gBACdM,EAAe,kBACfC,EAAiB,kBACjBnwG,EAAiB,4BACjBgyB,EAA2B,MAC3Bw8C,EAAK,cACL3tB,EAAa,aACbivD,GACD/lI,EACC,MAAM,wBACJknI,EAAuB,sBACvBC,EAAqB,kBACrBC,EAAiB,wBACjBC,EAAuB,iBACvBC,EAAgB,oBAChBjhC,EAAmB,qBACnBrnC,EAAoB,iBACpBuoE,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,IACE5uH,EAAAA,EAAAA,OAEG6uH,EAAoBC,EAAkBC,IAAqB9mF,EAAAA,GAAAA,MAC5D,SAAEO,IAAaC,EAAAA,EAAAA,MAEfumF,GAAwB3rF,EAAAA,GAAAA,IAAgB,KAC5CqrF,EAAyB,CAAEnnI,OAAQA,EAAS00B,OAAQkB,IACpDy8B,EAAeq1E,EAAAA,GAAAA,WAA6B,IAGxCC,IAA0B7rF,EAAAA,GAAAA,IAAgB,KAC9CsrF,EAAyB,CAAEpnI,OAAQA,EAASgQ,KAAM4lB,EAAmB5lB,OACrEqiD,EAAeq1E,EAAAA,GAAAA,SACfF,GAAmB,IAGfI,IAAiC9rF,EAAAA,GAAAA,IAAiBr7C,IACtDomI,EAAwB,CAAEpmI,UAEtBA,EAAMf,QACR0+B,GAAsB4oG,EACxB,IAGIa,IAAiC/rF,EAAAA,GAAAA,IAAiBr7C,IACtDqmI,EAAsB,CAAErmI,SAAQ,IAG5BqnI,IAA6BhsF,EAAAA,GAAAA,IAAiBr7C,IAClDsmI,EAAkB,CAAEtmI,SAAQ,IAGxBw/D,IAAmBnkB,EAAAA,GAAAA,IAAgB,KACvC6iB,EAAqB,CAAEnvD,UAAS,IAG5Bu4H,IAAkBjsF,EAAAA,GAAAA,IAAgB,KACjC97C,GAAWC,GAChBonI,EAAmB,CAAErnI,SAAQgW,QAAS/V,GAAW,IAG7C+nI,IAAyBlsF,EAAAA,GAAAA,IAAgB,KAC7CmrF,GAAkB,IAGdgB,IAAyBnsF,EAAAA,GAAAA,IAAgB,KAC7CorF,GAAkB,KAGbp6E,GAAsBo7E,KAA2B1qF,EAAAA,EAAAA,KAAUyoF,GAM5DtnB,GAAmBA,KACtB37G,OAAeg3H,QAAQC,iBAAiBC,WAAWC,YAAY,CAC9Dn6H,SACAC,YACA,GAGJ87C,EAAAA,EAAAA,KAAU,KACRhzC,YAAW,KACTm/H,IAAyBjC,EAAa,GACrChB,GAA0B,GAC5B,CAACgB,IAEJ,MAAMrhI,IAAO25C,EAAAA,GAAAA,KACP4pF,GAAahD,EACjBwB,IAAiByB,EAAAA,GAAAA,QACflD,GAAcmD,QACZ1B,IAAiByB,EAAAA,GAAAA,YACnBlD,GAAcoD,YACZ3B,IAAiByB,EAAAA,GAAAA,WACnBlD,GAAcqD,YACX,EACHrC,EACFhB,GAAcsD,OACZjC,EACFrB,GAAcuD,YACZpC,EACFnB,GAAcwD,cACZpC,EACFpB,GAAcyD,UACZjC,EACFxB,GAAc0D,cACZxD,EACFwB,IAAqBc,EAAAA,GAAAA,QACnBxC,GAAc2D,cACZjC,IAAqBc,EAAAA,GAAAA,gBACvBxC,GAAc4D,sBACZlC,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc6D,iBACZnC,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAc8D,yBACZpC,IAAqBc,EAAAA,GAAAA,iBACvBxC,GAAc+D,uBACZrC,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcgE,yBACZtC,IAAqBc,EAAAA,GAAAA,kBACvBxC,GAAciE,wBACZvC,IAAqBc,EAAAA,GAAAA,oBACvBxC,GAAckE,0BACZxC,IAAqBc,EAAAA,GAAAA,2BACvBxC,GAAcmE,iCACZzC,IAAqBc,EAAAA,GAAAA,qBACvBxC,GAAcoE,2BACZ1C,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcqE,yBACZ3C,IAAqBc,EAAAA,GAAAA,gBACvBxC,GAAcsE,uBACZ5C,IAAqBc,EAAAA,GAAAA,mBACvBxC,GAAcuE,0BACZ7C,IAAqBc,EAAAA,GAAAA,aACvBxC,GAAcwE,mBACZ9C,IAAqBc,EAAAA,GAAAA,QACvBxC,GAAcyE,cACZ/C,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc0E,iBACZhD,IAAqBc,EAAAA,GAAAA,eACvBxC,GAAc2E,qBACZjD,IAAqBc,EAAAA,GAAAA,UACvBxC,GAAc4E,gBACZlD,IAAqBc,EAAAA,GAAAA,WACvBxC,GAAc6E,iBACZnD,IAAqBc,EAAAA,GAAAA,aACvBxC,GAAc8E,wBACZ5pI,EACF+lI,EACFjB,GAAc+E,WACZ7D,EACFlB,GAAcgF,kBACZ1D,EACFtB,GAAciF,YACZ1D,EACFvB,GAAckF,eACZhqI,EAEEiqI,GAAwD,QAArCrE,GAAGjhE,EAAAA,GAAAA,GAAiBojE,IAAY,UAAK,IAAAnC,EAAAA,GAAK,EAoO7DsE,GACJrpF,GACGknF,KAAejD,GAAcoD,aAC7BH,KAAejD,GAAcqD,YAC7BJ,KAAejD,GAAc0D,eAC7BT,KAAejD,GAAcgF,mBAC7B9E,EAGCmF,IAAkB9qF,EAAAA,GAAAA,GACtB,sBACA6qF,IAAgB,cACfx9E,IAAwBlF,IAAgC,iBAIrDlC,IAAYpF,EAAAA,EAAAA,IAAuB,MAGzC,OAFAqF,EAAAA,GAAAA,GAAgBD,IAGd9I,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,cAAc2xB,IAAK6D,IAChC9I,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACL5uB,UAAU,eACVrY,OAAK,EACL8mC,MAAM,cACNI,KAAK,UACLT,QAAS8D,EACTqC,UAA0B7/C,GAAf0lI,GAAoB,cAAsB,iBAErD1tF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAWq6G,MAElB3tF,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTzP,KAAO2d,IAAwBlF,EAA+B,OAAS,YACvE/I,UAAWwrF,IAnPjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKnF,GAAcuD,YACjB,OAAO7rF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,gBACnB,KAAKsgI,GAAcsD,OACjB,OACE5rF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC0J,GAAAA,EAAW,CACVE,yBAAyB,cACzB3d,MAAOw8F,EACPt+E,SAAU6gF,KAEZhrF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACLknC,KAAK,UACLJ,MAAM,cAENL,QAASA,IAAM0nD,EAAoB,CAAE7xF,YAAY4zD,EAAAA,GAAAA,IAAc57D,KAAKC,SACpEq4C,UAAU,2BAEV7H,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,yBAIrB,KAAKg1G,GAAc0D,cACjB,OAAOhsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK0tD,EAAY,wBAA0B,oBACzD,KAAK4yE,GAAc2D,cACjB,OAAOjsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,SACnB,KAAKsgI,GAAc4D,sBACjB,OAAOlsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK0tD,EAAY,oBAAsB,oBACrD,KAAK4yE,GAAc6D,iBACjB,OAAOnsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,eACnB,KAAKsgI,GAAcgE,yBACjB,OAAOtsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,0BACnB,KAAKsgI,GAAcqE,yBACjB,OAAO3sF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,wBACnB,KAAKsgI,GAAcsE,uBACjB,OAAO5sF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,oBACnB,KAAKsgI,GAAcuE,0BACjB,OAAO7sF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,eACnB,KAAKsgI,GAAc+D,uBACjB,OAAOrsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,uBACnB,KAAKsgI,GAAciE,wBACjB,OAAOvsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,iBACnB,KAAKsgI,GAAckE,0BACjB,OAAOxsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,wBACnB,KAAKsgI,GAAcmE,iCACjB,OAAOzsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,wBACnB,KAAKsgI,GAAcoE,2BACjB,OAAO1sF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,qBACnB,KAAKsgI,GAAcyE,cACjB,OAAO/sF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,2BACnB,KAAKsgI,GAAc0E,iBACjB,OAAOhtF,EAAAA,GAAAA,cAAA,UAAuBh4C,GAAlBkhI,EAAuB,WAAmB,YACxD,KAAKZ,GAAc6E,iBACjB,OACEntF,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,eACVg4C,EAAAA,GAAAA,cAAA,WAAS1sB,UAAU,SAChB0F,IAAsBA,EAAkBd,WACvC8nB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,cACNI,KAAK,UACL0F,UAAW7/C,GAAK,QAChB05C,QAASmpF,GAET7qF,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,oBAGhB0F,GAAqBA,EAAkBd,WACtC8nB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,SACNI,KAAK,UACL0F,UAAW7/C,GAAK,UAChB05C,QAASipF,GAET3qF,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,sBAEf0sB,EAAAA,GAAAA,cAACoZ,GAAAA,EAAa,CACZn0D,OAAQylI,EACRllF,QAASolF,EACTn3H,MAAOzL,GAAK,cACZpB,KAAMoB,GAAK,kBACX27D,sBAAoB,EACpBtK,aAAcrxD,GAAK,UACnBsxD,eAAgByxE,QAO9B,KAAKzC,GAAc8E,mBACjB,OAAOptF,EAAAA,GAAAA,cAAA,UAAiBh4C,GAAZ0tD,EAAiB,oBAA4B,mBAC3D,KAAK4yE,GAAc2E,qBACjB,OAAOjtF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,oCACnB,KAAKsgI,GAAcwD,cACjB,OACE9rF,EAAAA,GAAAA,cAAC0J,GAAAA,EAAW,CACVzd,MAAOy8F,EACP1+E,YAAahiD,GAAK,sBAClB4lI,iBAAe,EACfzjF,SAAU8gF,KAGhB,KAAK3C,GAAcyD,UACjB,OACE/rF,EAAAA,GAAAA,cAAC0J,GAAAA,EAAW,CACVzd,MAAO28F,EACP5+E,YAAahiD,GAAK,mBAClB4lI,iBAAe,EACfzjF,SAAU+gF,KAGhB,KAAK5C,GAAc+E,WACjB,OAAOrtF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK0tD,EAAY,qBAAuB,qBACtD,KAAK4yE,GAAcgF,kBACjB,OAAOttF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,uBACnB,KAAKsgI,GAAcoD,YACjB,OAAO1rF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,gBACnB,KAAKsgI,GAAc8D,yBACjB,OAAOpsF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,uBACnB,KAAKsgI,GAAcqD,WACnB,KAAKrD,GAAcwE,mBACjB,OAAO9sF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,iBACnB,KAAKsgI,GAAc4E,gBACjB,OAAOltF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,cACnB,KAAKsgI,GAAciF,YACjB,OAAOvtF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,aACnB,KAAKsgI,GAAckF,UACjB,OAAOxtF,EAAAA,GAAAA,cAAA,UAAKh4C,GAAK,cACnB,QACE,OACEg4C,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,UA3JCh4C,GADL6xE,EACU,gBAGVnkB,EACU,oBAGV9iD,EACU40F,EAAQ,qBAAuB,sBAGjC,oBAkJJxnD,EAAAA,GAAAA,cAAA,WAAS1sB,UAAU,UAKdk0E,GAASx8F,OAAO5H,IAAW,GAC1B48C,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,cACNI,KAAK,UACL0F,UAAW7/C,GAAK,eAChB05C,QAASqgE,IAET/hE,EAAAA,GAAAA,cAAA,OAAKmD,IAAI,oBAAoBC,IAAI,MAItC6f,GACCjjB,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,cACNI,KAAK,UACL0F,UAAW7/C,GAAK,cAChB05C,QAAS2hB,IAETrjB,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,wBAGhB21G,IAAcpvD,IAAkB2tB,GAC/BxnD,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,cACNI,KAAK,UACL0F,UAAW7/C,GAAK,QAChB05C,QAAS0pF,IAETprF,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,oBAGhBw1G,GACC9oF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,cACNI,KAAK,UACL0F,UAAW7/C,GAAK,aAChB05C,QAASypF,IAETnrF,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,oBAGhB61G,GACCnpF,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CACLjnC,OAAK,EACL8mC,MAAM,cACNI,KAAK,UACL0F,UAAW7/C,GAAK,cAChB05C,QAAS2pF,IAETrrF,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,uBAO7B,CAqCOu6G,IAEC,K,6BC9bV,SAASC,GACPC,EACAC,EACA3xG,EACA4xG,GAEA,MAAO/jI,EAAagkI,IAAWC,EAAAA,GAAAA,GAC7B9xG,EAAe2xG,OAAiBxqI,EAChCyqI,OACAzqI,EACA4qI,EAAAA,IAKF,MAAO,CAAClkI,EAAagkI,KAFJhkI,IAAgB+jI,GAAW/jI,EAAY,KAAO+jI,EAAQ,IAGzE,CAEA,SAASI,GACPC,EACAP,EACAC,EACA3xG,EACAn0B,EACA+uB,EACA7d,GAEA,MAAMm1H,GAAgB7qF,EAAAA,EAAAA,OAEtB2R,EAAAA,GAAAA,IAAc,KACZk5E,EAAc/6G,aAAUhwB,CAAS,GAChC,CAAC4V,KAEJi8C,EAAAA,GAAAA,IAAc,KACR04E,IAAsBO,GAAsBpmI,GAAgB+uB,IAC9Ds3G,EAAc/6G,SAAUg7G,EAAAA,EAAAA,IACtBtmI,EACA+uB,EACAq3G,GAEJ,GACC,CAACpmI,EAAc+uB,EAAU82G,EAAmBO,IAE/C,MAAOpkI,EAAagkI,IAAWC,EAAAA,GAAAA,GAC7B9xG,EAAe2xG,OAAiBxqI,EAChC+qI,EAAc/6G,aACdhwB,EACuB,UAAvB8qI,EAAiCn4G,EAAAA,IAAqBgB,EAAAA,KAKxD,MAAO,CAACjtB,EAAagkI,KAFJhkI,IAAgBqkI,EAAc/6G,SAAWtpB,EAAY,KAAOqkI,EAAc/6G,QAAQ,IAGrG,CCtKA,MAGMi7G,IAAwB5+G,EAAAA,EAAAA,KAAUtQ,GAAOA,KAAM,KAAK,GAE1D,IAAImvH,IAA8B,E,gHC0FlC,MAAMC,GAAO,CACX,CAAElqI,KAAM,QAASgP,MAAO,mBACxB,CAAEhP,KAAM,YAAagP,MAAO,mBAC5B,CAAEhP,KAAM,QAASgP,MAAO,mBACxB,CAAEhP,KAAM,QAASgP,MAAO,oBA2Z1B,IAAeksC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAM2d,KAAgD,IAA9C,OAAEld,EAAM,QAAEgW,EAAO,SAAEirC,GAAU/jC,EACpC,MAAM/O,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,GAC1B61F,GAAepnD,EAAAA,EAAAA,IAAmBlvC,EAAQS,GAC1Cm2C,GAAenxC,EAAAA,EAAAA,IAAmBzF,EAAQS,IACxCi0B,YAAau3G,EAAe,cAAEh9H,IAAkB2kB,EAAAA,EAAAA,IAAyB5zB,IAAW,CAAC,GACvF,SAAEs0B,GAAcrlB,GAAiBg9H,GAAmBh9H,EAAcg9H,IAAqB,CAAC,GAEtFjuH,KAAMi6D,EAAWl8C,aAAcF,GAAqB77B,EAAOwd,OAC3DQ,KAAMy0E,GAAczyF,EAAOmP,MAE7B8/B,EAAUrgC,IAAQwnF,EAAAA,EAAAA,IAAYxnF,GAC9BmkD,EAAYnkD,IAAQkzD,EAAAA,EAAAA,IAAclzD,GAClCs9H,GAAiBz1H,IAAYw4B,GAAY8jB,IAAa+5D,EAAAA,EAAAA,IAAYl+G,IAClE6jC,EAAU6jD,GAAc7jD,QACxBM,EAAmBujD,GAAcvjD,iBACjCo5F,EAAmBD,GAAiBt9H,IACpCA,EAAKw9H,aAAgB91C,IAAiBA,EAAa+1C,gBACnDC,EAAgBJ,GAAiBt9H,KACjC29H,EAAAA,EAAAA,IAAiB39H,EAAM,kBAAmB49H,EAAAA,EAAAA,IAAkB59H,EAAM,gBAAkBA,EAAK69F,WACzFggC,EAAmBP,GAAiBt9H,KAAS29H,EAAAA,EAAAA,IAAiB39H,EAAM,aAAeA,EAAK69F,WACxFnc,GAAkBC,EAAAA,EAAAA,IAAsBvwF,EAAQS,GAEtD,IAAIisI,EACAC,EACA7oH,EAOJ,OANIyZ,EAAAA,EAAAA,IAAS98B,KACXksI,EAAiBlsI,EACjBqjB,GAAOC,EAAAA,EAAAA,IAAW/jB,EAAQ2sI,GAC1BD,EAAoB5oH,IAASA,EAAK8Y,UAAW7W,EAAAA,EAAAA,IAAUjC,IAGlD,CACLke,OAAOmhB,EAAAA,EAAAA,IAAYnjD,GACnB+yD,YACA45E,iBACA/1F,eACAtiB,WACA23G,kBACAS,oBACAR,gBACAC,mBACAG,gBACAG,mBACAt0H,cAAenY,EAAOmY,cACtB+pD,oBAAoB94D,EAAAA,EAAAA,IAAyBpJ,EAAQ0hD,GACrD5gC,aAAclS,GAAMkS,aACpB4Y,aAAc15B,EAAO05B,aACrB+2D,kBAAmBH,GAAiBjmF,IACpC4tE,YACAp8C,mBACA42D,YACA8F,gBAAiB3pF,GAAM2iE,eACnB26D,GAAiBz5F,GAAW,CAAEA,UAASM,uBACvC25F,GAAqB5oH,GAAQ,CAAE8oH,cAAe9oH,EAAK+Y,aAAaxyB,KACrE,GAvDes2C,EArZuBvgD,IA4BrC,IA5BsC,OAC1CK,EAAM,QACNgW,EAAO,aACP2wH,EAAY,qBACZyF,EAAoB,MACpB7qG,EAAK,UACL+wB,EAAS,eACT45E,EAAc,cACdx0H,EAAa,aACby+B,EAAY,SACZtiB,EAAQ,gBACR23G,EAAe,kBACfS,EAAiB,cACjBR,EAAa,iBACbC,EAAgB,cAChBG,EAAa,iBACbG,EAAgB,cAChBG,EAAa,QACbn6F,EAAO,iBACPM,EAAgB,UAChBklC,EAAS,iBACTp8C,EAAgB,UAChB42D,EAAS,mBACTvwB,EAAkB,aAClBphD,EAAY,aACZ4Y,EAAY,kBACZ+2D,EAAiB,gBACjB8H,GACDn4F,EACC,MAAM,wBACJ0sI,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,SACfhpI,EAAQ,yBACRipI,EAAwB,gBACxBt4D,EAAe,gBACfmoB,EAAe,aACfp0F,EAAY,kBACZsuB,EAAiB,6BACjBk2G,IACEh0H,EAAAA,EAAAA,MAGEk6C,GAAerS,EAAAA,EAAAA,IAAuB,MAEtCoI,GAAgBpI,EAAAA,EAAAA,IAAuB,MACvC17C,GAAO25C,EAAAA,GAAAA,MACNiN,EAAWkhF,IAAgBlvF,EAAAA,EAAAA,IAAS,IACpCmvF,EAAgBC,IAAqBpvF,EAAAA,EAAAA,MAEtC+N,GAAOjM,EAAAA,EAAAA,KAAQ,IAAO,IACtBmsF,EAAgB,CAAC,CACnBpqI,KAAM,UAAWgP,MAAOiiD,EAAY,qBAAuB,iBACxD,MACFi5E,MAGEv1H,EAA0D,GAAhD,CAAC,CAAE3U,KAAM,QAASgP,MAAO,uBACpC47H,EAAoB,CAAC,CAAE5qI,KAAM,cAAegP,MAAO,qBAAwB,KAC7E,CAAC47H,EAAmBR,EAAen5E,EAAWt8C,IAE5C62H,GAAqBrhF,EAAYD,EAAK7rD,OAAS,EAAI6rD,EAAK7rD,OAAS,EAAI8rD,EACrEshF,GAAUvhF,EAAKshF,IAAoBxrI,MAElC0rI,GAAYjmI,GAAagkI,GAASkC,IFvK5B,SACbV,EACAC,EACAU,EACAH,EACAtB,EACAplB,EACA+lB,EACA30D,EACAp8C,EACA42D,EACAltF,EACA+uB,EACAoF,EACAjjB,GAEA,MAAM+2H,EAAyB,YAAZD,GAA0BtB,EAA4BA,EAAVsB,EAEzDI,GAAY5tF,EAAAA,EAAAA,KAAQ,KACxB,GAAK8mE,GAAqB5uC,GAAcp8C,EAIxC,OAAO+xG,EAAAA,EAAAA,IACL/mB,EAAiBlhH,KAAIvF,IAAA,IAAC,OAAE6P,GAAQ7P,EAAA,OAAK6P,CAAM,IAC3CgoE,EACAp8C,EACD,GACA,CAACgrF,EAAkB5uC,EAAWp8C,IAE3B1H,GAAU4rB,EAAAA,EAAAA,KAAQ,KACtB,GAAK6sF,GAAkBn6C,EAIvB,OAAOo7C,EAAAA,EAAAA,IAAYjB,EAAen6C,GAAW,EAAK,GACjD,CAACA,EAAWm6C,KAERkB,EAAmBC,EAAgBC,GAA2B7C,GACnEqC,EAAYT,EAAiBrzG,EAAci0G,IAGtCM,EAAkBC,EAAcC,GAAyBzC,GAC9D,QAAS8B,EAAYE,EAAgBh0G,EAAcn0B,EAAc+uB,EAAU7d,IAGtE23H,EAAqBC,EAAkBC,GAA6B5C,GACzE,YAAa8B,EAAYE,EAAgBh0G,EAAcn0B,EAAc+uB,EAAU7d,IAG1E83H,EAAiBC,EAAcC,GAAyB/C,GAC7D,QAAS8B,EAAYE,EAAgBh0G,EAAcn0B,EAAc+uB,EAAU7d,IAGtEi4H,EAAkBC,EAAcC,GAAyBlD,GAC9D,QAAS8B,EAAYE,EAAgBh0G,EAAcn0B,EAAc+uB,EAAU7d,IAGtEo4H,EAAkBC,EAAeC,GAA0BrD,GAChE,QAAS8B,EAAYE,EAAgBh0G,EAAcn0B,EAAc+uB,EAAU7d,IAGtEu4H,EAAuBC,EAAoBC,GAA+B/D,GAC/EqC,EAAYR,EAAiBtzG,EAAcvF,GAG7C,IAAI5sB,EACAgkI,EACAkC,GAAgB,EAEpB,OAAQD,GACN,IAAK,UACHjmI,EAAcumI,EACdvC,EAAUwC,EACVN,EAAgBO,EAChB,MACF,IAAK,cACHzmI,EAAcynI,EACdzD,EAAU0D,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACH3nI,EAAc0mI,EACd1C,EAAU2C,EACVT,EAAgBU,EAChB,MACF,IAAK,YACH5mI,EAAc6mI,EACd7C,EAAU8C,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACH/mI,EAAcgnI,EACdhD,EAAUiD,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACHlnI,EAAcmnI,EACdnD,EAAUoD,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACHrnI,EAAcsnI,EACdtD,EAAUuD,EACVrB,EAAgBsB,EAIpB,MAAO,CAACvB,EAAYjmI,EAAagkI,EAASkC,EAC5C,CE0D4D0B,CACxDpC,EACAC,EACAC,EACAM,GACAtB,EACAx5F,EACAm6F,EACA30D,EACAp8C,EACA42D,EACA77C,EACAtiB,EACAoF,EACAjjB,GAEI24H,GAA4B,YAAf5B,KAA8BtB,GAAgC,UAAfsB,GAC5DluF,GAAY0M,EAAKz3C,WAAUvG,IAAA,IAAC,KAAElM,GAAMkM,EAAA,OAAKlM,IAAS0rI,EAAU,KAE5D,aAAEj+B,IDrLK,SACbn8C,EACAm6E,EACAnG,EACAyF,IAGA7qF,EAAAA,GAAAA,IAAsB5hD,IAAmB,IAAjBivI,GAAYjvI,EAClC,GAAIivI,GAAeA,IAAgB9B,EAAS,CAC1C,MAAM3vD,EAAYxqB,EAAaviC,QACzBy+G,EAAS1xD,EAAUlhC,cAA8B,YACnDkhC,EAAUgjB,UAAY0uC,EAAOngC,YAC/B09B,EAAiC,YAAZU,EAAwB1E,EAAAA,GAAAA,WAA0BA,EAAAA,GAAAA,aACvEkD,IAA8B,GAC9Bl7D,EAAAA,GAAAA,IAAc+M,EAAW0xD,EAAQ,aAASzuI,OAAWA,OAAWA,EArB5C,KAsBpB2I,YAAW,KACTuiI,IAA8B,CAAK,GAtBN,KAyBnC,IACC,CAACwB,EAASV,EAAsBz5E,KAGnCpR,EAAAA,GAAAA,IAAsBh0C,IAAwB,IAAtBuhI,GAAiBvhI,EACvC,GAAIo5H,IAAiByB,EAAAA,GAAAA,SAAwBzB,IAAiBmI,EAC5D,OAGF,MAAM3xD,EAAYxqB,EAAaviC,QAC/B,IAAK+sD,EACH,OAGF,MAAM4xD,EAAY5xD,EAAUlhC,cAA8B,aACrD8yF,GAAaA,EAAUrgC,UAAYvxB,EAAUgjB,YAIlDmrC,IAA8B,GAC9Bl7D,EAAAA,GAAAA,IACE+M,EACAA,EAAUppB,kBACV,aACA3zD,EACyB,EAAzB+8E,EAAU8iB,cAGZl3F,YAAW,KACTuiI,IAA8B,CAAK,GAtDF,KAyDnCc,EAAqBzF,GAAa,GACjC,CAACA,EAAch0E,EAAcy5E,IAEhC,MAAM4C,GAAwBlzF,EAAAA,GAAAA,IAAgB,KAC5C,MAAMqhC,EAAYxqB,EAAaviC,QAC/B,IAAK+sD,EACH,OAGF,MAAM4xD,EAAY5xD,EAAUlhC,cAA8B,YAC1D,IAAK8yF,EACH,OAGF,IAAIl0F,EAAsButF,EAAAA,GAAAA,QACtBjrD,EAAUgjB,WAAa4uC,EAAUrgC,YACnC7zD,EAAoB,YAAZiyF,EACJ1E,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,aAGNgE,EAAqBvxF,EAAM,IAqB7B,OAjBAkB,EAAAA,EAAAA,KAAU,KACJuvF,IAIJ0D,GAAuB,GACtB,CAACA,EAAuBlC,IAWpB,CAAEh+B,cARYhzD,EAAAA,GAAAA,IAAgB,KAC/BwvF,IAIJD,GAAsB2D,EAAsB,IAIhD,CCuF2BC,CAAgBt8E,EAAco6E,GAAYpG,EAAcyF,IAE3E,mBAAE8C,GAAkB,qBAAEC,ICnMf,SACbx8E,GAEA,IADAy8E,EAAoB3vI,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG,uCAGvBs8C,EAAAA,EAAAA,KAAU,KACR,SAASszF,IACP,MAAMlyD,EAAYxqB,EAAaviC,QACzBk/G,EAAenyD,EAAUlhC,cAA8BmzF,GACvDP,EAAS1xD,EAAUlhC,cAA8B,YACvD,GAAIqzF,GAAgBT,EAAQ,CAC1B,MAAMjvC,EAAYziB,EAAU8iB,aAAe4uC,EAAO5uC,cAElDn6B,EAAAA,EAAAA,KAAgB,KACdwpE,EAAa3vF,MAAM4vF,UAAa,GAAE3vC,KAAa,GAEnD,CACF,CAMA,OAJAyvC,IAEArsI,OAAO46C,iBAAiB,SAAUyxF,GAAc,GAEzC,KACLrsI,OAAO66C,oBAAoB,SAAUwxF,GAAc,EAAM,CAC1D,GACA,CAAC18E,EAAcy8E,IAGlB,MAAMF,GAAqBpzF,EAAAA,GAAAA,IAAgB,MAEzCw0B,EAAAA,EAAAA,KAAe,KACb,MAAM6M,EAAYxqB,EAAaviC,QAC/B,GAAkC,WAA9B+sD,EAAUx9B,MAAM6vF,UAAwB,OAE5C,MAAMC,EAAiBtyD,EAAUmiB,YAAcniB,EAAUuyD,aAEzD5pE,EAAAA,EAAAA,KAAgB,KACdqX,EAAUx9B,MAAM6vF,UAAY,SAC5BryD,EAAUx9B,MAAMgwF,aAAgB,GAAEF,KAAkB,GACpD,GACF,IAGEN,GAAuBrzF,EAAAA,GAAAA,IAAgB,KAC3C,MAAMqhC,EAAYxqB,EAAaviC,QAC/B+sD,EAAUx9B,MAAM6vF,UAAY,SAC5BryD,EAAUx9B,MAAMgwF,aAAe,GAAG,IAGpC,MAAO,CAAET,qBAAoBC,uBAC/B,CDgJuDS,CAAmBj9E,IAEjEopB,GAAa8zD,IExMCC,MACrB,MAAO/zD,EAAag0D,IAAkBvyF,EAAAA,EAAAA,IAAS,GAM/C,MAAO,CAACu+B,GAJkBr6B,EAAAA,EAAAA,KAAY,KACpCquF,GAAgB3/G,GAAYA,EAAU,GAAE,GACvC,IAEoC,EFiMC0/G,IAEhCnrC,QAASqrC,KAAgCprC,EAAAA,GAAAA,IAAwB,CACvEC,QAASlyC,EACT6zC,WA7F0B,MAgGtBypC,IAAuBn0F,EAAAA,GAAAA,IAAgB,KAC3CqzF,KACAU,IAAkB,IAGdK,IAA4Bp0F,EAAAA,GAAAA,IAAgB,KAChD2wF,EAA6B,CAAE5oI,uBAAwBssI,EAAAA,GAAAA,YAAoC,KAI7Fp0F,EAAAA,EAAAA,KAAU,KACRswF,EAAwB,CAAEprI,UAAW6rI,IAA6B,GACjE,CAACT,EAAyBS,GAAS92H,IAEtC,MAAMwgB,GAAY01G,GAAkBlsI,GAEpC+7C,EAAAA,EAAAA,KAAU,KACJ9iB,GACF1C,EAAkB,CAAEC,cACtB,GACC,CAACD,EAAmBC,GAAWyC,IAElC,MAAMm3G,IAAoBt0F,EAAAA,GAAAA,IAAiBziC,IACzC66D,EAAgB,CACdl0E,OAAQw2B,GACRv2B,SAAUmB,EAAAA,GACViY,UACAnR,OAAQktE,EAAAA,GAAAA,aACR,IAGEi7D,IAAkBv0F,EAAAA,GAAAA,IAAiBl1C,IACvCy1F,EAAgB,CAAEr8F,OAAQw2B,GAAW5vB,aAAY,IAG7C0pI,IAAoBx0F,EAAAA,GAAAA,IAAiB36C,IACzCoC,EAAS,CAAEpC,MAAK,IAGZovI,IAAqBz0F,EAAAA,GAAAA,IAAiBl1C,IAC1CqB,EAAa,CAAEjI,OAAQw2B,GAAW5vB,aAAY,IAG1C4pI,IAAgC10F,EAAAA,GAAAA,IAAgB,KACpD8wF,OAAkBxsI,EAAU,IAkC9B,IAAIqwI,IA/BJlvF,EAAAA,GAAAA,IAAsB/kC,IAAyB,IAAvBk0H,GAAkBl0H,EACxC,GAAkB,IAAdgvC,GAAmBklF,IAAsBjF,EAC3C,OAGF,MAAMkF,EAAenlF,GAAaigF,EAAgB,GAAK,GAEvDiB,EAAar/H,KAAKq9B,IAAIimG,EAAcplF,EAAK7rD,OAAS,GAAG,GACpD,CAAC+rI,EAAejgF,EAAWD,KAE9BxP,EAAAA,EAAAA,KAAU,KACR,GAAK2M,EAAct4B,SAAYrkB,EAAAA,GAI/B,OAAO89C,EAAAA,GAAAA,IAAcnB,EAAct4B,QAAS,CAC1C05B,wBAAyB,WACzBC,QAAUA,CAACv4C,EAAGlH,IACRA,IAAc0/C,GAAAA,GAAAA,MAChB0iF,EAAar/H,KAAKq9B,IAAImiG,GAAqB,EAAGthF,EAAK7rD,OAAS,KACrD,GACE4K,IAAc0/C,GAAAA,GAAAA,QACvB0iF,EAAar/H,KAAKC,IAAI,EAAGu/H,GAAqB,KACvC,IAKX,GACD,CAACA,GAAoBthF,EAAK7rD,SAIzBivI,GACF8B,GAAkBhvE,EAA2C,EAlLrC,IAoLd36D,KACV2pI,GAAiBG,EAAAA,KAEnB,MAAMC,IAAmB37E,EAAAA,GAAAA,GAAkB,CAACl1D,EAAQgW,EAAS+2H,GAAYF,IAAqB4D,IAgK9F,OACE7zF,EAAAA,GAAAA,cAACk0F,GAAAA,EAAc,CACbjvF,IAAK8Q,EACLziC,UAAU,wBACV6gH,aAAe,uDAAsDhE,yBACrEzzB,MAAOu3B,GAAmB/pI,QAAc1G,EACxC27E,YAAaA,GACbi1D,cAAeC,EAAAA,IACfC,iBAAkBL,GAAmC,YAAf9D,GAA2B/B,EAAAA,GAAgBj4G,EAAAA,IAAsB,EAEvGo+G,sBAAoB,EACpBC,YAAU,EACVC,WAAYvG,GACZ75B,SAAUnC,KAERk+B,IAyCR,SAA2BhtI,EAAgBksI,EAAoC5pE,GAC7E,OACE1lB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,gBACb0sB,EAAAA,GAAAA,cAAC00F,GAAAA,EAAW,CAAC9hI,OAAQ08H,GAAkBlsI,EAAQuxI,aAAcjvE,IAC7D1lB,EAAAA,GAAAA,cAAC40F,GAAAA,EAAS,CAACpqF,aAAc8kF,GAAkBlsI,IAGjD,CAhDyByxI,CAAkBzxI,EAAQksI,EAAgBzqE,GAAsBovE,KACjFxwH,GACAu8B,EAAAA,GAAAA,cAAA,OACE1sB,UAAU,gBAEV0sB,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTiD,IAAK6G,EACLvZ,KAAMvqC,EAAK65C,MAAQ,oBAAsB,iBACzCI,UAAWA,GACX8M,YAAaJ,EAAK7rD,OAClBgyI,qBAAmB,EACnBxhH,UAAU,0BACVyhH,QAASzC,GACTvK,OAAQsL,IAhLlB,WACE,IAAKnpI,KAAgB+pI,KAAqB16F,EAAc,CACtD,MAAMy7F,EAAYjD,KAAekC,GAC3BgB,EAA2B3qI,QAAuB,YAAf6lI,IAA4BrB,GAErE,OACE9uF,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,uBACX0hH,IAAcC,GAA4Bj1F,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,MACnDmzF,GAA4Bj1F,EAAAA,GAAAA,cAACk1F,GAAAA,EAAY,CAACtuI,KAAK,8CAGtD,CAEA,IAAKsD,GAAYpH,OAAQ,CACvB,IAAI8D,EAEJ,OAAQupI,IACN,IAAK,UACHvpI,EAAOkoI,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACHloI,EAAOoB,EAAK,oBACZ,MACF,IAAK,YACHpB,EAAOoB,EAAK,wBACZ,MACF,IAAK,QACHpB,EAAOoB,EAAK,wBACZ,MACF,IAAK,QACHpB,EAAOoB,EAAK,wBACZ,MACF,IAAK,QACHpB,EAAOoB,EAAK,yBACZ,MACF,QACEpB,EAAOoB,EAAK,0BAGhB,OACEg4C,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,sBACb0sB,EAAAA,GAAAA,cAACk1F,GAAAA,EAAY,CAACtuI,KAAMA,IAG1B,CAEA,OACEo5C,EAAAA,GAAAA,cAAA,OACE1sB,UAAY,WAAU68G,UACtBvuF,IAAK55C,EAAK65C,OAAwB,UAAfsuF,GAAyB,WAAQ3sI,EACpDgqG,eAAa,GAEG,UAAf2iC,GACEjmI,GAA0B5B,KAAK/D,GAAOg1C,EAAah1C,IAClDy7C,EAAAA,GAAAA,cAACm1F,GAAAA,EAAK,CACJ34F,IAAKj4C,EACLgE,QAASgxC,EAAah1C,GACtB2vE,YAAagnB,GAAmB3hD,EAAah1C,GAAI2vE,YACjDsJ,oBAAqB41D,GACrB1xF,QAAS8xF,OAGI,cAAfrD,GACDjmI,GAA0B5B,KAAK/D,GAAOg1C,EAAah1C,IAClDy7C,EAAAA,GAAAA,cAAC0mD,GAAAA,EAAQ,CACPlqD,IAAKj4C,EACLgE,QAASgxC,EAAah1C,GACtB6wI,UAAQ,EACRC,SAAO,EACP/hH,UAAU,cACVovD,cAAe0Q,GAAmB5lF,SAASjJ,GAC3Ci5E,oBAAqB41D,GACrBkC,YAAa3B,OAGA,UAAfxD,GACDjmI,GAA0B5B,KAAK/D,GAAOg1C,EAAah1C,IAClDy7C,EAAAA,GAAAA,cAACu1F,GAAAA,EAAO,CACN/4F,IAAKj4C,EACLgE,QAASgxC,EAAah1C,GACtB2vE,YAAagnB,GAAmB3hD,EAAah1C,GAAI2vE,YACjDsJ,oBAAqB41D,GACrBoC,eAAgB7B,OAGH,UAAfxD,GACDjmI,GAA0B5B,KAAK/D,GAAOg1C,EAAah1C,IAClDy7C,EAAAA,GAAAA,cAACogC,GAAAA,GAAK,CACJ5jC,IAAKj4C,EACLogC,MAAOA,EACPp8B,QAASgxC,EAAah1C,GACtB+G,OAAQ66F,EAAAA,GAAAA,YACRl2F,KAAMspC,EAAah1C,GAAI0L,KACvBosB,aAAcA,EACd/I,UAAU,cACV+yE,OAAQotC,GACR6B,YAAa3B,GACbnlI,aAAc0sF,IAAoB3hD,EAAah1C,GAAI2vE,YACnDwO,cAAe0Q,GAAmB5lF,SAASjJ,OAG9B,UAAf4rI,GACDjmI,GAA0B5B,KAAK/D,GAAOg1C,EAAah1C,IAClDy7C,EAAAA,GAAAA,cAACogC,GAAAA,GAAK,CACJ5jC,IAAKj4C,EACLogC,MAAOA,EACPp8B,QAASgxC,EAAah1C,GACtBu3E,aAAa25D,EAAAA,GAAAA,GAAcztI,EAAMuxC,EAAah1C,GAAK6wF,EAAWxa,GAC9DtvE,OAAQ66F,EAAAA,GAAAA,YACRl2F,KAAMspC,EAAah1C,GAAI0L,KACvBosB,aAAcA,EACd/I,UAAU,cACV+yE,OAAQotC,GACR6B,YAAa3B,GACbnlI,aAAc0sF,IAAoB3hD,EAAah1C,GAAI2vE,YACnDwO,cAAe0Q,GAAmB5lF,SAASjJ,OAG9B,YAAf4rI,GACDjmI,GAA0B5B,KAAI,CAAC/D,EAAI0d,KAClC+9B,SAAAA,GAAAA,cAAC01F,GAAAA,EAAQ,CACPl5F,IAAKj4C,EACL6jI,cAAenmH,EACfqR,UAAU,6CAEVouB,QAASA,IAAMgyF,GAAkBnvI,GACjCioD,gBAxIoBmpF,EAwImBpxI,EAvI1CoxI,IAAa76H,GAAkBs0H,EAA+B,CAAC,CACpE37H,MAAOzL,EAAK,iCACZkhD,KAAM,OACNwD,QAASA,KACPsjF,EAAkB2F,EAAS,SAJ0BnyI,IAyI/Cw8C,EAAAA,GAAAA,cAAC2pB,GAAAA,EAAe,CAAC/2D,OAAQrO,EAAIqxI,YAAalgG,IAAmBnxC,GAAKsxI,eAAa,KA1I3F,IAAgCF,CA4IvB,IACgB,gBAAfxF,GACDjmI,GAA0B5B,KAAI,CAAC/D,EAAI0d,IAClC+9B,EAAAA,GAAAA,cAAC01F,GAAAA,EAAQ,CACPl5F,IAAKj4C,EACL6jI,cAAenmH,EACfqR,UAAU,6CAEVouB,QAASA,IAAM/6C,EAAS,CAAEpC,QAE1By7C,EAAAA,GAAAA,cAACkqB,GAAAA,EAAa,CAAC9mE,OAAQmB,YAGzBf,EAGV,CAgCW+xD,IAEHvV,EAAAA,GAAAA,cAACyO,GAAAA,EAAO,CAACqnF,KAAG,EAAClnF,UAAWqhF,GAAoBthF,KAAMA,EAAME,YAAaihF,KAIxEb,GACCjvF,EAAAA,GAAAA,cAAC+1F,GAAAA,EAAoB,CACnB5mF,QAAwB,YAAfghF,GACTzuF,QAAS4xF,GACTzrF,UAAW7/C,EAAK,0BAEhBg4C,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,+BAGhB87G,GACCpvF,EAAAA,GAAAA,cAACg2F,GAAAA,EAAiB,CAChB/wI,OAAQqF,QAAQylI,GAChBn9H,OAAQm9H,EACRvqF,QAASouF,KAGE,KG5erB,IAAej0F,EAAAA,EAAAA,KAPyBC,IACtC,MAAMq2F,GAAcn2F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOk2F,EAAcj2F,EAAAA,GAAAA,cAACi2F,EAAgBr2F,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICK/D,IAAetP,EAAAA,EAAAA,KAPwBC,IACrC,MAAMs2F,GAAap2F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOm2F,EAAal2F,EAAAA,GAAAA,cAACk2F,EAAet2F,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICE7D,GAPuCrP,IACrC,MAAMytF,GAAavtF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOstF,EAAartF,EAAAA,GAAAA,cAACqtF,EAAeztF,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ECG7D,GAP8CrP,IAC5C,MAAM0tF,GAAoBxtF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAGzD,OAAOutF,EAAoBttF,EAAAA,GAAAA,cAACstF,EAAsB1tF,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ECC3E,IAAetP,EAAAA,EAAAA,KAPgBw2F,KAC7B,MAAMrK,GAAgBhsF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAO+rF,EAAgB9rF,EAAAA,GAAAA,cAAC8rF,EAAa,MAAM9rF,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICGxD,IAAetP,EAAAA,EAAAA,KAPYy2F,KACzB,MAAMrK,GAAYjsF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAOgsF,EAAY/rF,EAAAA,GAAAA,cAAC+rF,EAAS,MAAM/rF,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICEhD,IAAetP,EAAAA,EAAAA,KANc02F,KAC3B,MAAMxK,GAAc/rF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAEnD,OAAO8rF,EAAc7rF,EAAAA,GAAAA,cAAC6rF,EAAW,MAAM7rF,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,I,gBCoCpD,MAyGA,IAAetP,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAA6B,IAA3B,OAAEvN,GAAQuN,EACjB,MAAMY,GAAO7L,EAAAA,EAAAA,IAAW/C,EAAQS,IACxB2zB,QAASu/G,GAAoB3zI,EAAOk8B,aAAe,CAAC,GACpDle,KAAMy0E,GAAczyF,EAAOmP,OAC7B,uBAAE7K,IAA2BhD,EAAAA,EAAAA,IAAetB,IAC5C,cAAEmY,GAAkBnY,EACpB+yD,EAAYnkD,IAAQkzD,EAAAA,EAAAA,IAAclzD,IAGtC1N,MAAO4hD,EAAW,eAClB5zC,EAAc,cACda,EAAa,aACbC,IACE1O,EAAAA,EAAAA,IAAetB,GAAQy9B,WAE3B,MAAO,CACLs1B,YACAtgB,SAASvD,EAAAA,EAAAA,IAAmBlvC,EAAQS,IAASgyC,QAC7Ct6B,gBACAs6E,YACAkhD,kBACA7wF,cACA8wF,YAAa1kI,EACbsL,UAAWlW,IAA2BssI,EAAAA,GAAAA,QACtC7gI,gBACAC,eACD,GA3Be2wC,EAzG8BvgD,IAc5C,IAd6C,UACjD2yD,EAAS,QACTtgB,EAAO,WACPohG,EAAU,cACV17H,EAAa,UACbs6E,EAAS,gBACTkhD,EAAe,UACfn5H,EAAS,YACTsoC,EAAW,YACX8wF,EAAW,aACX5jI,EAAY,cACZD,EAAa,QACb8yC,EAAO,SACPtxC,GACDnR,EACC,MAAM,mBAAE0zI,IAAuB56H,EAAAA,EAAAA,MAEzB7T,GAAO25C,EAAAA,GAAAA,MACN+0F,EAAmBC,IAAwB/1F,EAAAA,EAAAA,IAAmB,IAE/Dg2F,GADwB9tE,EAAAA,GAAAA,GAAY4tE,KACcA,GAExDppF,EAAAA,GAAAA,GAAe,CACbp5C,WACAq5C,OAAQ/H,IAGV,MAAM8qF,GAAY5tF,EAAAA,EAAAA,KAAQ,IACjBtN,EAAUA,EAAQ9sC,KAAKuuI,GAAWA,EAAOjkI,SAAU,IACzD,CAACwiC,IAEE0hG,GAAqBhyF,EAAAA,EAAAA,KAAajhD,IACtC4yI,EAAmB,CAAE5yI,SAAQ,GAC5B,CAAC4yI,IAEEM,GAAer0F,EAAAA,EAAAA,KAAQ,KAE3B,MAAMk4B,GAAYxuE,EAAAA,EAAAA,MAAY+T,MAAMQ,KAC9Bq2H,EAAqBV,GAAkBW,EAAAA,EAAAA,IAAkBX,EAAiB17D,EAAWn1B,GAAe,GAE1G,OAAO+qF,EAAAA,EAAAA,KACLv3H,EAAAA,EAAAA,IAAO,IACF+9H,KACCrkI,GAAgB,MAChBD,GAAiB,KACpB5L,QAAQ8L,IACT,MAAM6T,EAAOm0D,EAAUhoE,GAOvB,OACG09H,EAAU9iI,SAASoF,IACjBA,IAAWkI,KACT2L,KAASiC,EAAAA,EAAAA,IAAUjC,KAAWivC,GAAajvC,EAAKywH,oBAAqB,IAG9E9hD,EACD,GACA,CACDkhD,EAAiBlhD,EAAW3vC,EAAa9yC,EAAcD,EAAeoI,EAAew1H,EAAW56E,IAG5FyhF,GAAiBryF,EAAAA,EAAAA,KAAY,KAC7B4xF,EAAkB5zI,SACpB2zI,EAAmB,CAAE5yI,MAAO,KAC5B2yI,EAAWE,GACb,GACC,CAACA,EAAmBD,EAAoBD,IAE3C,OACEx2F,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,kBACb0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,wBACb0sB,EAAAA,GAAAA,cAACo3F,GAAAA,EAAM,CACLnJ,QAAS8I,EACTM,YAAaX,EACbY,YAAa7xF,EACb8xF,kBAAmBvvI,EAAK,yBACxBwvI,cAAc,4BACdr6H,UAAWo5H,EACXkB,oBAAqBd,EACrBe,eAAgBZ,EAChBa,cAAY,EACZC,gBAAiBhB,IAGnB52F,EAAAA,GAAAA,cAAC+1F,GAAAA,EAAoB,CACnB5mF,QAAS7kD,QAAQosI,EAAkB5zI,QACnCu+D,SAAUlkD,EACV0qC,UAAW7/C,EAAK,yBAChB05C,QAASy1F,GAERh6H,EACC6iC,EAAAA,GAAAA,cAAC8B,GAAAA,EAAO,CAACC,MAAM,UAEf/B,EAAAA,GAAAA,cAAA,KAAG1sB,UAAU,4BAIf,KCpIV,IAAeqsB,EAAAA,EAAAA,KAPyBC,IACtC,MAAM2tF,GAAcztF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOwtF,EAAcvtF,EAAAA,GAAAA,cAACutF,EAAgB3tF,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,ICG/D,IAAetP,EAAAA,EAAAA,KAPuBC,IACpC,MAAM4tF,GAAY1tF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAOytF,EAAYxtF,EAAAA,GAAAA,cAACwtF,EAAc5tF,GAAYI,EAAAA,GAAAA,cAACiP,GAAAA,EAAO,KAAG,IC4CrD4oF,GAAqB,IAAMlwI,EAAAA,IAC3BmwI,GAAqBltI,OAAOC,KAAKktI,EAAAA,IAAoBj1I,OAAS,EAC9Dk1I,GAA2BptI,OAAOC,KAAKigI,EAAAA,IAAmBhoI,OAAS,EAEzE,SAASm1I,KACP,MAAMC,EAAchlI,SAASmsC,cAAc,mCACvC64F,GACFA,EAAYj3G,MAEhB,CAEA,MAiTA,IAAe0e,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMid,KAA+B,IAA7B,SAAEykC,GAAUzkC,EACnB,MAAM,OAAExc,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAC5Dw1I,GAAuBC,EAAAA,EAAAA,IAA2Bz1I,IAClD,WAAEqR,EAAU,4BAAEg3C,IAAgC/mD,EAAAA,EAAAA,IAAetB,GAC7D01I,EAAuBj1I,EAAS4Q,EAAWC,SAAS7Q,IAASgR,gBAAa5Q,EAE1Eq2E,GADUz2E,GAASsC,EAAAA,EAAAA,IAAW/C,EAAQS,IAASuC,aAAUnC,IAC9B8G,QAAQjH,GAAYA,IAAamB,EAAAA,IAElE,MAAO,CACL+mI,YAAY+M,EAAAA,EAAAA,IAA4B31I,EAAQ0hD,GAChDjhD,SACAC,WACAw2E,gBACA0+D,eAAgBjuI,QAAQlH,GAAU+0I,GAClCntF,8BACAqtF,uBACD,GAjBe/0F,EAjT2BvgD,IASzC,IAAAqmI,EAAA,IAT0C,WAC9CmC,EAAU,OACVnoI,EAAM,SACNC,EAAQ,SACRghD,EAAQ,cACRw1B,EAAa,eACb0+D,EAAc,4BACdvtF,EAA2B,qBAC3BqtF,GACDt1I,EACC,MAAM,eACJy1I,EAAc,iBACdnO,EAAgB,qBAChB3nI,EAAoB,sBACpBwnI,EAAqB,kBACrBC,EAAiB,iBACjBsO,EAAgB,eAChBC,EAAc,6BACd7I,EAA4B,yBAC5BtF,EAAwB,iBACxBD,EAAgB,wBAChBqO,EAAuB,oBACvBC,EAAmB,4BACnBC,EAA2B,sBAC3BC,EAAqB,oBACrBC,IACEl9H,EAAAA,EAAAA,OAEIzD,MAAOu1B,IAAgBk5B,EAAAA,GAAAA,MACxBkjE,EAAciP,IAAmBp4F,EAAAA,EAAAA,IAAuB4qF,EAAAA,GAAAA,UACxDxB,EAAkBiP,IAAuBr4F,EAAAA,EAAAA,IAA4BkqF,EAAAA,GAAAA,UACrEoO,EAAsBC,IAA2Bv4F,EAAAA,EAAAA,OACjDw4F,EAAyBC,IAA8Bz4F,EAAAA,EAAAA,MACxD04F,EAAiBvP,IAAiByB,EAAAA,GAAAA,QAElCvmI,OAAwBzB,IAAf+nI,EACThD,EAAYgD,IAAewM,EAAAA,GAAAA,SAC3BzO,EAAWiC,IAAewM,EAAAA,GAAAA,OAC1BvP,EAAe+C,IAAewM,EAAAA,GAAAA,WAC9BxO,EAAegC,IAAewM,EAAAA,GAAAA,WAC9BvO,EAAsB+B,IAAewM,EAAAA,GAAAA,kBACrCtO,EAAkB8B,IAAewM,EAAAA,GAAAA,cACjCrO,EAAc6B,IAAewM,EAAAA,GAAAA,UAC7BpO,EAAgB4B,IAAewM,EAAAA,GAAAA,YAC/BjO,EAAsByB,IAAewM,EAAAA,GAAAA,cACrCnO,EAAkB2B,IAAewM,EAAAA,GAAAA,YACjClO,EAAiB0B,IAAewM,EAAAA,GAAAA,UAChCwB,EAAe5rG,GAAeE,EAAAA,KAE7BqiB,EAAsBo7E,IAA2B1qF,EAAAA,EAAAA,KAAU37C,GAE5DwoI,GAAyE,QAAtDrE,GAAGjhE,EAAAA,GAAAA,GAAiBojE,GAAY,GAAOgN,UAAe,IAAAnP,EAAAA,GAAK,EAE9E9nG,IAAQ4d,EAAAA,GAAAA,IAAgB,WAA2B,IAA1Bs6F,IAAc32I,UAAAC,OAAA,QAAAU,IAAAX,UAAA,KAAAA,UAAA,GAC3C,OAAQ0oI,GACN,KAAKwM,EAAAA,GAAAA,cACHlI,EAA6B,CAAE5oI,uBAAwBssI,EAAAA,GAAAA,SACvD,MACF,KAAKwE,EAAAA,GAAAA,SACH,GAAIuB,GAAkBE,EAAgB,CACpCR,EAAgBxN,EAAAA,GAAAA,SAChB,KACF,CACAgN,EAAe,CAAE1kI,OAAO,GAAS,CAAE2lI,gBAAgB,IACnD,MACF,KAAK1B,EAAAA,GAAAA,WACH,OAAQ/N,GACN,KAAKc,EAAAA,GAAAA,QACHT,IACA,MACF,KAAKS,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,oBACHmO,EAAoBnO,EAAAA,GAAAA,SACpB,MACF,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACHmO,EAAoBnO,EAAAA,GAAAA,kBACpBqO,OAAwB31I,GACxB61I,OAA2B71I,GAC3B,MACF,KAAKsnI,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,mBACHmO,EAAoBnO,EAAAA,GAAAA,oBACpB,MACF,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,WACHmO,EAAoBnO,EAAAA,GAAAA,SACpB8N,EAAoB,CAAEx1I,OAAQA,EAAS00B,YAAQt0B,IAC/C+mI,EAAyB,CAAEnnI,OAAQA,EAAS00B,YAAQt0B,IAIxD,MAEF,KAAKu0I,EAAAA,GAAAA,kBACHY,IACA,MACF,KAAKZ,EAAAA,GAAAA,WACHzN,IACA,MACF,KAAKyN,EAAAA,GAAAA,OACHE,KACAv1I,IACA,MAEF,KAAKq1I,EAAAA,GAAAA,cACHE,KACA/N,EAAsB,CAAErmI,WAAOL,IAC/B,MACF,KAAKu0I,EAAAA,GAAAA,UACHE,KACA9N,EAAkB,CAAEtmI,WAAOL,IAC3B,MAEF,KAAKu0I,EAAAA,GAAAA,YACHU,IACA,MACF,KAAKV,EAAAA,GAAAA,YACHe,IACA,MACF,KAAKf,EAAAA,GAAAA,UACHgB,IAGN,IAEMW,IAAyBx6F,EAAAA,GAAAA,IAAgB,CAACy2F,EAAUgE,KACxDR,EAAwBxD,GACxB0D,EAA2BM,EAAW,IAGlCC,IAA6B16F,EAAAA,GAAAA,IAAiBoxF,IAClDoI,EAAe,CAAEt1I,OAAQA,EAASktI,aAAY,IA4ChD,SAAS/6E,GAAcrhD,GACrB,IAA6B,IAAzBu5H,GAIJ,OAAQA,IACN,KAAKsK,EAAAA,GAAAA,cACH,OACE/3F,EAAAA,GAAAA,cAAC65F,GAAc,CACbr9F,IAAM,oBAAmBp5C,IACzBA,OAAQA,EACR8Q,SAAUjP,GAAUiP,EACpBsiI,WAAYoD,GACZp0F,QAASlkB,KAGf,KAAKy2G,EAAAA,GAAAA,SACH,OACE/3F,EAAAA,GAAAA,cAACyrF,GAAO,CACNjvF,IAAM,WAAUp5C,IAChBA,OAAQA,EACRgW,QAASygE,EAAgBx2E,OAAWG,EACpCumI,aAAcA,EACd1lF,SAAUA,EACVmrF,qBAAsBwJ,IAG5B,KAAKjB,EAAAA,GAAAA,OACH,OACE/3F,EAAAA,GAAAA,cAACi2F,GAAW,CACVz5F,IAAM,gBAAep5C,IACrBA,OAAQA,EACRC,SAAUA,EACVmiD,QAASlkB,GACTptB,SAAUjP,GAAUiP,IAG1B,KAAK6jI,EAAAA,GAAAA,WACH,OACE/3F,EAAAA,GAAAA,cAACk2F,GAAU,CACT15F,IAAM,cAAap5C,IACnBA,OAAQA,EACRoyD,cAAew0E,EACfoP,wBAAyBA,EACzBF,qBAAsBA,EACtBhlI,SAAUjP,GAAUiP,EACpBuhD,eAAgBwjF,EAChBa,mBAAoBJ,GACpBl0F,QAASlkB,KAIf,KAAKy2G,EAAAA,GAAAA,WACH,OAAO/3F,EAAAA,GAAAA,cAACqtF,GAAU,CAACjqI,OAAQA,IAC7B,KAAK20I,EAAAA,GAAAA,kBACH,OAAO/3F,EAAAA,GAAAA,cAACstF,GAAiB,CAAClqI,OAAQA,EAAS8Q,SAAUjP,GAAUiP,IACjE,KAAK6jI,EAAAA,GAAAA,cACH,OAAO/3F,EAAAA,GAAAA,cAAC8rF,GAAa,CAACtmF,QAASlkB,GAAOptB,SAAUjP,GAAUiP,IAC5D,KAAK6jI,EAAAA,GAAAA,UACH,OAAO/3F,EAAAA,GAAAA,cAAC+rF,GAAS,CAACvmF,QAASlkB,GAAOptB,SAAUjP,GAAUiP,IACxD,KAAK6jI,EAAAA,GAAAA,YACH,OAAO/3F,EAAAA,GAAAA,cAAC6rF,GAAW,CAACrmF,QAASlkB,GAAOptB,SAAUjP,GAAUiP,IAC1D,KAAK6jI,EAAAA,GAAAA,YACH,OAAO/3F,EAAAA,GAAAA,cAACutF,GAAW,CAAC/nF,QAASlkB,GAAOptB,SAAUjP,GAAUiP,IAC1D,KAAK6jI,EAAAA,GAAAA,UACH,OAAO/3F,EAAAA,GAAAA,cAACwtF,GAAS,CAAChoF,QAASlkB,GAAOptB,SAAUjP,GAAUiP,IAI5D,CAEA,OAhHAirC,EAAAA,EAAAA,KAAU,IAAOl6C,GAASmjD,EAAAA,GAAAA,GAAsB9mB,SAAS99B,GAAY,CAACyB,EAAQq8B,MAE9E6d,EAAAA,EAAAA,KAAU,KACRhzC,YAAW,KACTm/H,GAAyBrmI,EAAO,GAC/B4yI,GAAmB,GACrB,CAAC5yI,KAEJk6C,EAAAA,EAAAA,KAAU,KACJk5F,IACFY,EAAoBZ,GACpBQ,OAA4Br1I,GAC9B,GACC,CAAC60I,EAAsBQ,KAG1B15F,EAAAA,EAAAA,KAAU,KACJl6C,GAAUs0I,GACZj4G,IACF,GAEC,CAACi4G,KAGJ/0D,EAAAA,GAAAA,IAA4B7zE,IAAkB,IAAhBw7G,GAAWx7G,EACnCw7G,IAAe/oH,IACjB41I,EAAgBxN,EAAAA,GAAAA,SAChByN,EAAoBnO,EAAAA,GAAAA,SACtB,GACC,CAAC1nI,KAEJkqD,EAAAA,GAAAA,GAAe,CACbp5C,SAAUqkI,IACRhN,IAAewM,EAAAA,GAAAA,UACZxM,IAAewM,EAAAA,GAAAA,YACfxM,IAAewM,EAAAA,GAAAA,eACfxM,IAAewM,EAAAA,GAAAA,aACfxM,IAAewM,EAAAA,GAAAA,WACpBxqF,OAAQA,IAAMjsB,IAAM,KA2EpB0e,EAAAA,GAAAA,cAAA,OACEz7C,GAAG,sBACH+uB,UAAYilH,OAA+B/0I,EAAd,aAE5B+1I,GACCv5F,EAAAA,GAAAA,cAAA,OAAK1sB,UAAU,mBAAmBouB,QAASpgB,KAE7C0e,EAAAA,GAAAA,cAAA,OAAKz7C,GAAG,eACNy7C,EAAAA,GAAAA,cAAC+5F,GAAW,CACV32I,OAAQA,EACRC,SAAUA,EACVgmI,aAAcpkI,EACdsjI,UAAWA,EACXe,SAAUA,EACVd,aAAcA,EACde,aAAcA,EACdC,oBAAqBA,EACrBC,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,gBAAiBA,EACjBC,eAAgBA,EAChBC,oBAAqBA,EACrBC,aAAcA,EACdC,iBAAkBA,EAClBxkF,QAASlkB,GACTm0B,eAAgBwjF,IAElBj5F,EAAAA,GAAAA,cAACgC,GAAAA,EAAU,CACTzP,KAAO2d,GAAwBlF,EAA+B,OAAS,WACvE+D,YAAa+oF,GAAqBE,GAClC/1F,UAAWumF,EAAesP,GAAqB9N,EAAmByD,GAClE17E,eAAa,EACbC,oBACEy7E,KAAwBsK,EAAAA,GAAAA,kBACpBA,EAAAA,GAAAA,gBAAgCv0I,GAGrC+xD,KAGD,KChWV,IAAe5V,EAAAA,EAAAA,KANwB58C,IAAgB,IAAf,OAAEkC,GAAQlC,EAChD,MAAMi3I,GAAcl6F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgB96C,GAEnE,OAAO+0I,EAAch6F,EAAAA,GAAAA,cAACg6F,EAAW,WAAMx2I,CAAS,ICFlD,IAAIy2I,GAAsC,GACtCC,IAAU,EAEC,SAASC,GAAS9iI,EAAaw+F,GAC5CokC,GAAiB/wI,KAAK,CAAEmO,MAAKw+F,aACxBqkC,KACHA,IAAU,EACV/tI,YAAW8Q,gBAOfA,iBACE,IAAI8L,EAAQ,EACZ,IAAK,MAAMqxH,KAAmBH,GAC5BI,GAAYD,GACZrxH,IArBoB,KAsBhBA,UACI4I,EAAAA,EAAAA,IAtBW,KAuBjB5I,EAAQ,GAGZkxH,GAAmB,EACrB,CAjBYK,GACNJ,IAAU,CAAK,GAXE,KAcvB,CAeA,SAASG,GAAWt3I,GAAqC,IAApC,IAAEsU,EAAG,SAAEw+F,GAA2B9yG,EACrD,MAAMqQ,EAAOF,SAASgpD,cAAc,KACpC9oD,EAAKC,KAAOgE,EACZjE,EAAK+mI,SAAWtkC,EAChB,IACEziG,EAAKmnI,OAIP,CAHE,MAAOpjI,GAEP+C,QAAQC,MAAMhD,EAChB,CACF,CCvBA,MAEMqjI,GAAoB,IAAItrH,IACxBurH,GAAqB,IAAIvrH,IA2F/B,IAAeywB,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IAGQ,CACLswF,iBAHsBhvF,EAAAA,EAAAA,IAAetB,GAAQswF,gBAAgBh/E,YAF/CqvC,EAzFoBvgD,IAElC,IAFmC,gBACvCkwF,GACDlwF,EACC,MAAM,4BAAE23I,EAA2B,iBAAExrI,IAAqB2M,EAAAA,EAAAA,MAEpD41F,GAAeC,EAAAA,GAAAA,GAVQ,KAUgC,GAEvDipC,GAA0Bz7F,EAAAA,GAAAA,IAAiB32C,IAC/CkyI,GAAmBtrH,IAAI5mB,GACvBkpG,GAAa,KACPgpC,GAAmBt4F,OACrBu4F,EAA4B,CAAEryI,SAAUrF,MAAMof,KAAKq4H,MACnDA,GAAmBG,QACrB,GACA,KAGJz7F,EAAAA,EAAAA,KAAU,KAER,MAAM92C,GAAW+D,EAAAA,EAAAA,MAAY/D,SAAS4L,SAChCwlC,GAAoBrtC,EAAAA,EAAAA,MAAYqtC,kBAAkBxlC,SAElD4mI,EAAiBjwI,OAAO+f,QAAQsoE,GAAiB3qF,KAAIqI,IAAmC,IAAjCvN,EAAQ03I,GAAoBnqI,EACvF,MAAMzI,EAAe4yI,EAAoB9tI,KAAK1E,KAAK/D,GAAO8D,EAASjF,IAASud,KAAKpc,KAC3Ew2I,EAAwBD,EAAoBlwH,cAActiB,KAAK/D,GAAOk1C,EAAkBr2C,IAASud,KAAKpc,KAE5G,OAAO2I,EAAAA,EAAAA,IAAQ,IAAIhF,GAAgB,MAAO6yI,GAAyB,IAAI,IACtEzuC,OAEEuuC,EAAe/3I,OAKpB+3I,EAAepsI,SAASlG,IACtB,GAAIiyI,GAAkB13H,IAAIva,GACxB,OAEFiyI,GAAkBrrH,IAAI5mB,GACtB,MAAMyyI,GAAe9iF,EAAAA,EAAAA,IAAoB3vD,EAAS,YAClD,IAAKyyI,EAEH,YADAL,EAAwBpyI,GAI1B,MAAMu1D,EAAY9uB,GAAAA,GAA0BgsG,GAE5C,GAAIl9E,EAGF,OAFAq8E,GAASr8E,GAAWm9E,EAAAA,EAAAA,IAA0B1yI,SAC9CoyI,EAAwBpyI,GAI1B,MAAM,SACJ2K,EAAQ,MAAEsjC,EAAK,MAAEgnB,GACfj1D,EAAQ4H,QAEZ,KADmB+C,GAAYsjC,GAASgnB,IAAQrb,MAAQ,GACxC+4F,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKxD,OAJAlsI,EAAiB,CACf3G,QAAS,6EAEXoyI,EAAwBpyI,GAI1B,MAAM8yI,GAAcx3D,EAAAA,EAAAA,IAAsBt7E,EAAS,YACnDymC,GAAAA,GAAkBgsG,EAAcK,GAAa,GAAM1hI,MAAM9Q,IACvD,GAAIwyI,IAAgBpsG,EAAAA,GAAAA,YAA4B,CAC9C,MAAM53B,EAAM,IAAIuV,IAAI/jB,EAAQzC,OAAO8M,SAASooI,SACtCzlC,GAAWolC,EAAAA,EAAAA,IAA0B1yI,GAC3C8O,EAAI2V,aAAajK,IAAI,WAAYw4H,mBAAmB1lC,IAC7BzvG,OAAOG,KAAK8Q,EAAItM,aACvBi2C,iBAAiB,gBAAgB,KAC/C9xC,EAAiB,CACf3G,QAAS,yEACT,GAEN,MAAWM,GACTsxI,GAAStxI,GAAQoyI,EAAAA,EAAAA,IAA0B1yI,IAG7CoyI,EAAwBpyI,EAAQ,GAChC,IApDFiyI,GAAkBI,OAqDlB,GACD,CAAC3nD,EAAiBynD,EAA6BC,EAAyBzrI,GAE3D,K,gBC/FlB,MAsEA,IAAeywC,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAMgO,KAAiC,IAA/B,WAAEsH,GAAYtH,EACrB,MAAM,OAAEvN,GAAW6U,GAAc,CAAC,EAC5B1G,EAAOnO,IAAUsC,EAAAA,EAAAA,IAAW/C,EAAQS,GAG1C,MAAO,CACLosG,QAHcllG,QAAQiH,KAAS+tH,EAAAA,EAAAA,IAAiB/tH,EAAM/M,EAAAA,IAIvD,GARe8+C,EA3DyBvgD,IAAwC,IAAvC,WAAEkV,EAAU,UAAEujI,EAAS,QAAEhsC,GAASzsG,EAC9E,MAAM,UAAE04I,EAAS,gBAAEptI,IAAoBwN,EAAAA,EAAAA,MACjC7T,GAAO25C,EAAAA,GAAAA,MACP,IAAEtqC,EAAG,OAAEjU,EAAM,UAAE4G,GAAciO,GAAc,CAAC,EAC5ChT,EAASqF,QAAQ+M,GAEjBs0G,GAAoBC,EAAAA,GAAAA,GAAqBxoH,IAC/CwqF,EAAAA,GAAAA,IAAY,KACV+9B,EAAkB,CAAElnH,KAAM,eAAgB,GACzCQ,GAAUuqG,EApBmB,SAoBmBhsG,GAEnD,MAAMk4I,GAAgB52F,EAAAA,EAAAA,KAAampC,IACjC,IACE,MAAMr3E,EAAO0G,KAAKe,MAAM4vE,EAAMr3E,MACP,gBAAnBA,EAAK+kI,YACPttI,EAAgB,CAAER,WAAYzK,EAAQ0E,WAAY,CAACkC,GAAY8D,aAAa,IAC5E2tI,KAGqB,eAAnB7kI,EAAK+kI,YACPttI,EAAgB,CAAER,WAAYzK,EAAQ0E,WAAY,CAACkC,KACnDyxI,IAGF,CADA,MAAO7mI,GACP,IAED,CAACxR,EAAQq4I,EAAWzxI,EAAWqE,IAE5ButI,GAAa92F,EAAAA,EAAAA,KAAampC,IAC9BA,EAAMzX,cAAcr1C,OAAO,GAC1B,IAOH,OALAge,EAAAA,EAAAA,KAAU,KACR/4C,OAAO46C,iBAAiB,UAAW06F,GAC5B,IAAMt1I,OAAO66C,oBAAoB,UAAWy6F,KAClD,CAACA,IAGF17F,EAAAA,GAAAA,cAAC67F,GAAAA,EAAK,CACJvoH,UAAU,YACVruB,OAAQA,EACRugD,QAASi2F,EACThoI,MAAO+nI,EACPM,gBAAc,GAEb72I,GACC+6C,EAAAA,GAAAA,cAAA,UACE1sB,UAAU,aACVujE,OAAQ+kD,EACRz4F,IAAK9rC,EACL5D,MAAOzL,EAAK,cACZ+zI,QAAQ,yDACRC,MAAM,eAGJ,KC1EZ,IAAer8F,EAAAA,EAAAA,KAPgB58C,IAAgB,IAAf,OAAEkC,GAAQlC,EACxC,MAAMk5I,GAAgBn8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB96C,GAGvE,OAAOg3I,EAAgBj8F,EAAAA,GAAAA,cAACi8F,EAAa,WAAMz4I,CAAS,ICGtD,IAAem8C,EAAAA,EAAAA,KAPU58C,IAAgB,IAAf,OAAEkC,GAAQlC,EAClC,MAAMm5I,GAAUp8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAAY96C,GAG3D,OAAOi3I,EAAUl8F,EAAAA,GAAAA,cAACk8F,EAAO,WAAM14I,CAAS,ICK1C,IAAem8C,EAAAA,EAAAA,KARoCC,IACjD,MAAM,OAAE36C,GAAW26C,EACbu8F,GAAyBr8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,0BAA2B96C,GAGzF,OAAOk3I,EAAyBn8F,EAAAA,GAAAA,cAACm8F,EAA2Bv8F,QAAYp8C,CAAS,ICInF,IAAem8C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAEvoC,GAAQuoC,EACVw8F,GAAgBt8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB1oC,GAGvE,OAAO+kI,EAAgBp8F,EAAAA,GAAAA,cAACo8F,EAAkBx8F,QAAYp8C,CAAS,ICGjE,IAAem8C,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE36C,GAAW26C,EACby8F,GAAkBv8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB96C,GAG3E,OAAOo3I,EAAkBr8F,EAAAA,GAAAA,cAACq8F,EAAoBz8F,QAAYp8C,CAAS,ICCrE,IAAem8C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,YAAEhC,GAAgBgC,EAClB08F,GAAYx8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcnC,GAG/D,OAAO0+F,EAAYt8F,EAAAA,GAAAA,cAACs8F,EAAc18F,QAAYp8C,CAAS,ICKzD,IAAem8C,EAAAA,EAAAA,KAP8BC,IAC3C,MAAM,SAAE1rC,GAAa0rC,EACf28F,GAAmBz8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB7rC,GAE7E,OAAOqoI,EAAmBv8F,EAAAA,GAAAA,cAACu8F,EAAgB,WAAM/4I,CAAS,ICG5D,IAAem8C,EAAAA,EAAAA,KAPuBC,IACpC,MAAM,SAAE1rC,GAAa0rC,EACf48F,GAAY18F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAc7rC,GAE/D,OAAOsoI,EAAYx8F,EAAAA,GAAAA,cAACw8F,EAAS,WAAMh5I,CAAS,I,uOCG9C,MA6BA,IAAem8C,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IACQ,CACL4R,cAActQ,EAAAA,EAAAA,IAAetB,GAAQ4R,gBAHvB+uC,EA7B8BvgD,IAAsB,IAArB,aAAEwR,GAAcxR,EACjE,MAAM,SAAE4D,IAAakV,EAAAA,EAAAA,MAEf4gI,EAAYA,KAChB91I,EAAS,CAAEpC,QAAIf,GAAa,CAAEi2I,gBAAgB,GAAO,EAGjDiD,EAA8C/rI,IAAgC,IAA/B,OAAEvN,EAAM,KAAEqB,EAAI,SAAEpB,GAAUsN,GAC7E28C,EAAAA,GAAAA,GAAe,CACbp5C,UAAU,EACVc,MAAM2nI,EAAAA,EAAAA,IAAmBv5I,EAAQqB,EAAMpB,GACvCkqD,OAAQkvF,GACR,EAGJ,OACEz8F,EAAAA,GAAAA,cAAA,WACGzrC,GAAcjM,KAAI,CAAC6S,EAAa8G,IAC/B+9B,EAAAA,GAAAA,cAAC08F,EACCE,GAAA,CACApgG,IAAM,GAAErhC,EAAY/X,UAAU+X,EAAY9X,YAAY8X,EAAY1W,QAAQwd,KAEtE9G,MAGJ,KCzBV,IAAewkC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE36C,GAAW26C,EACbi9F,GAAkB/8F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB96C,GAG3E,OAAO43I,EAAkB78F,EAAAA,GAAAA,cAAC68F,EAAoBj9F,QAAYp8C,CAAS,ICGrE,IAAem8C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAE36C,GAAW26C,EACbk9F,GAAqBh9F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuB96C,GAGjF,OAAO63I,EAAqB98F,EAAAA,GAAAA,cAAC88F,EAAuBl9F,QAAYp8C,CAAS,ICG3E,IAAem8C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAE9Y,GAAW8Y,EACbm9F,GAAcj9F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBjZ,GAGnE,OAAOi2G,EAAc/8F,EAAAA,GAAAA,cAAC+8F,EAAgBn9F,QAAYp8C,CAAS,ICG7D,IAAem8C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAEle,GAAQke,EACVo9F,GAAgBl9F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBre,GAGvE,OAAOs7G,EAAgBh9F,EAAAA,GAAAA,cAACg9F,EAAkBp9F,QAAYp8C,CAAS,ICGjE,IAAem8C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,IAAEle,GAAQke,EACVq9F,GAAwBn9F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0Bre,GAGvF,OAAOu7G,EAAwBj9F,EAAAA,GAAAA,cAACi9F,EAA0Br9F,QAAYp8C,CAAS,ICZjF,IAAgB,KAAO,wBCyCjB05I,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAmKhF,IAAev9F,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IAAuBw6I,EAAAA,EAAAA,KAAKl5I,EAAAA,EAAAA,IAAetB,GAAS,CAAC,cADpC2gD,EAjKsBvgD,IAAkB,IAAjB,SAAEwV,GAAUxV,EAErD,MAAMq6I,GAAY15F,EAAAA,EAAAA,IAA0B,MACtC25F,GAAc35F,EAAAA,EAAAA,IAAmB,IACjC45F,GAAkB55F,EAAAA,EAAAA,KAAO,GACzB9V,GAAai5B,EAAAA,GAAAA,KACbkoB,GAAcC,EAAAA,GAAAA,MACd,SAAE3qC,IAAaC,EAAAA,EAAAA,MAEfi5F,EAAwBl5F,EAAW,GAAK,KACxC,iBACJ7rC,EAAgB,IAAEN,EAAG,MAAEE,EAAK,KAAED,EAAI,OAAEE,GAClCE,GAAY,CAAC,EAEXilI,GAAmB14F,EAAAA,EAAAA,KAAY,SAACktB,EAAWE,GAA8C,IAAnCjlC,EAAMpqC,UAAAC,OAAA,QAAAU,IAAAX,UAAA,GAAAA,UAAA,GAAG06I,EACnE,IAAK,IAAIt7H,EAAI,EAAGA,EAAIgrB,EAAQhrB,IAAK,CAC/B,MAAMw7H,EAAWx7H,EAAI,EACfy7H,EAAM,CACVhwG,EAAGskC,GAAKyrE,GAAY,GAAM,KAC1BluG,EAAO,IAAJ2iC,GAECyrE,EAAUltI,KAAKob,SAAWmmD,EAAI,IAE9B4rE,EAAW,CACflwG,EAAG+vG,EAAWE,GAAqB,EAAXA,EACxBpuG,GAHe2iC,EAAI,EAAIzhE,KAAKob,SAAWqmD,GAMnC2rE,EAAcX,GAAgBzsI,KAAKI,MAAMJ,KAAKob,SAAWqxH,GAAgBp6I,SACzEq/C,EAhCkB,GAiCxBk7F,EAAY7pH,QAAQtqB,KAAK,CACvBw0I,MACAv7F,OACAJ,MAAO87F,EACPD,WACAE,QAAS37F,EACT47F,iBAAkC,GAAhBttI,KAAKob,SACvBmyH,SAAU,EACVC,YAAa1uI,KAAKC,MAClB0uI,WAAY,GAEhB,CACF,GAAG,CAACX,IAEEY,GAAer5F,EAAAA,EAAAA,KAAY,KAC/B,IAAKs4F,EAAU5pH,UAAY8pH,EAAgB9pH,QACzC,OAEF,MAAMyoC,EAASmhF,EAAU5pH,QAEnB+oC,EAAMN,EAAOG,WAAW,MAC9B,IAAKG,EACH,OAGF,MAAQnkD,MAAOgmI,EAAa/lI,OAAQgmI,GAAiBpiF,EACrDM,EAAI+hF,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrClB,EAAY7pH,QAAQ/kB,SAAQ,CAACq2F,EAAG7iF,KAC9B,MAAM,IACJy7H,EAAG,SACHE,EAAQ,KACRz7F,EAAI,MACJJ,EAAK,QACL+7F,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACEp5C,EACEx0B,GAAQ/gE,KAAKC,MAAQyuI,GAAe,IAEpCO,EAAS,CACb9wG,EAAGgwG,EAAIhwG,EAAIkwG,EAASlwG,EAAI4iC,EACxB/gC,EAAGmuG,EAAInuG,EAAIquG,EAASruG,EAAI+gC,GAGpBmuE,EAAc,CAClB/wG,EAAgB,IAAbkwG,EAASlwG,EACZ6B,EAAGquG,EAASruG,GAAY,IAAP+gC,GAGbouE,EAAav8F,EAAO1xC,KAAK8/D,IAAI9/D,KAAKkuI,IAAIT,EAAaH,IACnDa,EAAc,EAAIV,EAAaH,GAAoBttI,KAAK45E,GAAK,KAE7Dw0D,EAAgBX,EAAa,EAC7BY,EAAiBvvI,KAAKC,MAG5B,GADqBgvI,EAAOjvG,EAAI8uG,EAAev5C,EAAE3iD,KAG/C,YADAo8F,EAAiBr1I,KAAK47F,GAIxB,MAAMi6C,EAAc,IACfj6C,EACH44C,IAAKc,EACLZ,SAAUa,EACVX,QAASY,EACTV,SAAUY,EACVX,YAAaa,EACbZ,WAAYW,GAGdxB,EAAY7pH,QAAQvR,GAAK88H,EACzBxiF,EAAIF,UAAYta,EAChBwa,EAAIyiF,YACJziF,EAAI0iF,QACFvB,EAAIhwG,EACJgwG,EAAInuG,EACJ4S,EACA27F,EACAE,EACA,EACA,EAAIvtI,KAAK45E,IAEX9tB,EAAI2iF,MAAM,IAEZ7B,EAAY7pH,QAAU6pH,EAAY7pH,QAAQ1sB,QAAQg+F,IAAOy5C,EAAiB/wI,SAASs3F,KAC/Eu4C,EAAY7pH,QAAQ1wB,QACtB4wE,EAAAA,EAAAA,IAAeyqE,GAEfb,EAAgB9pH,SAAU,CAC5B,GACC,IAkBH,IAhBA6hC,EAAAA,GAAAA,IAAc1kD,IAAwB,IAChCwuI,GADUC,GAAiBzuI,EAU/B,OARIyuI,IAAqB5mI,IACvBglI,EAAiBplI,GAASw1B,EAAWx1B,MAAOC,GAAUu1B,EAAWv1B,QACjE8mI,EAAchzI,WAAW4iF,EAvIE,KAwItBuuD,EAAgB9pH,UACnB8pH,EAAgB9pH,SAAU,GAC1BkgD,EAAAA,EAAAA,IAAeyqE,KAGZ,KACL/wI,aAAa+xI,EAAY,CAC1B,GAEA,CAAC3mI,EAAkBu2E,EAAaovD,KAE9B3lI,GAAoBjJ,KAAKC,MAAQgJ,EAnJP,IAoJ7B,OAGF,MAAMuqC,GAAQk9B,EAAAA,GAAAA,GACZ31E,QAAQ4N,IAAS,QAAOA,MACxB5N,QAAQ6N,IAAU,SAAQA,MAC1B7N,QAAQ8N,IAAW,UAASA,MAC5B9N,QAAQ+N,IAAY,WAAUA,OAGhC,OACE2nC,EAAAA,GAAAA,cAAA,OAAKz7C,GAAG,WAAW+uB,UAAW2vB,GAAAA,KAAaF,MAAOA,GAChD/C,EAAAA,GAAAA,cAAA,UAAQiF,IAAKm4F,EAAW9pH,UAAW2vB,GAAAA,OAAe7qC,MAAOw1B,EAAWx1B,MAAOC,OAAQu1B,EAAWv1B,SAC1F,KCzLV,IAAesnC,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,QAAE3d,GAAY2d,EACdy/F,GAAev/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB9d,GAGrE,OAAOo9G,EAAer/F,EAAAA,GAAAA,cAACq/F,EAAiBz/F,QAAYp8C,CAAS,ICG/D,IAAem8C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE36C,GAAW26C,EACb0/F,GAAmBx/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB96C,GAG7E,OAAOq6I,EAAmBt/F,EAAAA,GAAAA,cAACs/F,EAAqB1/F,QAAYp8C,CAAS,ICEvE,IAAem8C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAE36C,GAAW26C,EACb2/F,GAAez/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB96C,GAGrE,OAAOs6I,EAAev/F,EAAAA,GAAAA,cAACu/F,EAAiB3/F,QAAYp8C,CAAS,ICG/D,IAAem8C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAE36C,GAAW26C,EACb4/F,GAAe1/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB96C,GAGrE,OAAOu6I,EAAex/F,EAAAA,GAAAA,cAACw/F,EAAiB5/F,QAAYp8C,CAAS,ICI/D,IAAem8C,EAAAA,EAAAA,KARsCC,IACnD,MAAM,MAAEhnC,GAAUgnC,EACZ6/F,GAA2B3/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,4BAA6BnnC,GAG7F,OAAO6mI,EAA2Bz/F,EAAAA,GAAAA,cAACy/F,EAA6B7/F,QAAYp8C,CAAS,ICGvF,IAAem8C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAE73B,GAAW63B,EACb8/F,GAAqB5/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBh4B,GAGjF,OAAO23H,EAAqB1/F,EAAAA,GAAAA,cAAC0/F,EAAuB9/F,QAAYp8C,CAAS,ICE3E,IAAem8C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,kBAAEnuB,GAAsBmuB,EACxB+/F,GAAuB7/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBtuB,GAGrF,OAAOkuH,EAAuB3/F,EAAAA,GAAAA,cAAC2/F,EAAyB//F,QAAYp8C,CAAS,ICG/E,IAAem8C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,eAAE74C,GAAmB64C,EACrBggG,GAAuB9/F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBh5C,GAGrF,OAAO64I,EAAuB5/F,EAAAA,GAAAA,cAAC4/F,EAAyBhgG,QAAYp8C,CAAS,ICK/E,IAAem8C,EAAAA,EAAAA,KAVsCC,IACnD,MAAM,yBAAE5X,GAA6B4X,EAC/BigG,GAA2B//F,EAAAA,GAAAA,GAC/BC,GAAAA,GAAAA,MAAe,4BAA6B/X,GAI9C,OAAO63G,EAA2B7/F,EAAAA,GAAAA,cAAC6/F,EAA6BjgG,QAAYp8C,CAAS,ICMvF,IAAem8C,EAAAA,EAAAA,KAR4CC,IACzD,MAAM,OAAE36C,EAAM,WAAE89E,GAAenjC,EACzBkgG,GAAiBhgG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmB96C,IAAW89E,GAGpF,OAAO+8D,EAAiB9/F,EAAAA,GAAAA,cAAC8/F,EAAmBlgG,QAAYp8C,CAAS,ICDnE,IAAem8C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,KAAEmgG,GAASngG,EACXogG,GAAgBlgG,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBggG,GAGvE,OAAOC,EAAgBhgG,EAAAA,GAAAA,cAACggG,EAAkBpgG,QAAYp8C,CAAS,ICiJjE,IAAIy8I,IAAiB,EAErB,MAsaA,IAAetgG,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KAClB,CAAC3gD,EAAM8rB,KAA+B,IAA7B,SAAE41B,GAAU51B,EACnB,MACE7T,UACEC,OAAO,SACLiZ,EAAQ,yBAAEosH,IAEb,aACD7jH,GACE15B,GAEE,gBACJmV,EAAe,0BACf6vB,EAAyB,yBACzBK,EAAwB,eACxBjhC,EAAc,QACdk7B,EAAO,OACP6E,EAAM,iBACNxvB,EAAgB,0BAChBwB,EAAyB,wBACzBC,EAAuB,4BACvBiyC,EAA2B,WAC3B/yC,EAAU,YACVvM,EAAW,kBACX4I,EAAiB,0BACjBkD,EAAyB,cACzBd,EAAa,QACbM,EAAO,WACPnE,EAAU,gBACVyrC,EAAe,aACfv5C,EAAY,YACZmX,EAAW,QACXI,EAAO,kBACPzD,EAAiB,wBACjBtR,EAAuB,cACvBC,IACEvD,EAAAA,EAAAA,IAAetB,IAEXS,OAAQ64B,EAAajyB,UAAWkyB,GAAmBxwB,EACrDs4D,EAAe/nC,GAAeC,GAChCzkB,EAAAA,EAAAA,IAAkB9U,EAAQs5B,EAAaC,QACvC14B,EAEEg4I,GADcvjI,IAAcR,EAAAA,EAAAA,IAAkB9U,EAAQsV,EAAW7U,OAAQ6U,EAAWjO,aAC3DmG,QAAQ2hF,MAAMr+E,MACvC0sI,EAAcx9I,EAAOmY,eAAgB4L,EAAAA,EAAAA,IAAW/jB,EAAQA,EAAOmY,oBAAiBtX,GAChF,OAAEJ,IAAWE,EAAAA,EAAAA,IAAyBX,IAAW,CAAC,EAClDy9I,IAA0BtvG,EAAAA,EAAAA,IAA+BnuC,EAAQ,4BAC/D2V,EAAAA,EAAAA,IAA0B3V,GAE5B09I,EAAqB94I,GAA0B+4I,EAAAA,EAAAA,IAAiB39I,EAAQ4E,QAA2B/D,EAEzG,MAAO,CACL64B,eACAkkH,iBAAkBjsI,EAClBksI,mBAAoBl2I,QAAQlH,GAC5Bq9I,mBAAmB10I,EAAAA,EAAAA,IAAyBpJ,EAAQ0hD,GACpDq8F,mBAAmBC,EAAAA,EAAAA,IAAwBh+I,GAC3Ci+I,oBAAoBC,EAAAA,EAAAA,IAAyBl+I,GAC7Cm+I,sBAAsBC,EAAAA,EAAAA,IAA2Bp+I,GACjDq+I,iBAAkB12I,QAAQoM,EAAc5T,QACxCm+I,WAAY32I,QAAQ0M,EAAQlU,QAC5BkhE,eACA1sD,mBACA4pI,sBAAuB52I,QAAQkN,GAC/BwzC,8BACAlyC,4BACAC,0BACAooI,oBAAoBxmG,EAAAA,EAAAA,IAAyBh4C,GAC7Cu6C,kBAAmBhhC,EAAcvZ,EAAOs6C,WAAWC,uBAAoB15C,EACvE67H,yBAAyB/mH,EAAAA,EAAAA,IAA0B3V,GACnDmxB,WACAosH,2BACAkB,kBAAmBllI,EAAc5R,QAAQ3H,EAAOq7C,gBAAax6C,EAC7D8tB,YAAa3uB,EAAOoS,SAASQ,MAAMC,OACnC6rI,oBAAqB1+I,EAAO8S,aAAaF,MAAMC,OAC/C8rI,iBAAkBzuI,GAAYD,OAC9B2uI,wBAAyB1uI,GAAYC,gBACrCmF,aACAujI,YACAgG,yBAA0Bl3I,QAAQg0C,GAClCxmC,kBACA2pI,mBAAoB3pI,IAAmB4O,EAAAA,EAAAA,IAAW/jB,EAAQmV,EAAgBJ,OAC1EgqI,mBAAoB/5G,GAA2BjG,IAC/CsG,2BACAlB,SACAq5G,cACAl+G,UACAnY,sBAAsBC,EAAAA,EAAAA,IAA2BpnB,GACjDg/I,mBAAoB58I,GAAcE,OAClC28I,aAAc/oI,GAAmBD,MACjCowB,mBAAoB1sB,EAAQ0sB,mBAC5B64G,mBAAoBv3I,QAAQgS,EAAQ6sB,SACpCk3G,qBACAnkI,cACAnV,iBACAS,gBACA44I,yBACD,GAjGe98F,EAtaoBvgD,IA+ClC,IA/CmC,aACvCs5B,EAAY,SACZgoB,EAAQ,iBACRk8F,EAAgB,mBAChBC,EAAkB,kBAClBC,EAAiB,kBACjBC,EAAiB,mBACjBE,EAAkB,iBAClBI,EAAgB,WAChBC,EAAU,aACVj9E,EAAY,kBACZ9mB,EAAiB,iBACjB5lC,EAAgB,sBAChB4pI,EAAqB,4BACrBl2F,EAA2B,aAC3B42F,EAAY,0BACZ9oI,EAAyB,wBACzBC,EAAuB,mBACvBooI,EAAkB,wBAClB9hB,EAAuB,SACvBvrG,EAAQ,yBACRosH,EAAwB,YACxB5uH,EAAW,oBACX+vH,EAAmB,kBACnBD,EAAiB,iBACjBE,EAAgB,wBAChBC,EAAuB,WACvBtpI,EAAU,UACVujI,EAAS,yBACTgG,EAAwB,gBACxB1pI,EAAe,mBACf2pI,EAAkB,mBAClBC,EAAkB,yBAClB15G,EAAwB,eACxBjhC,EAAc,OACd+/B,EAAM,YACNq5G,EAAW,QACXl+G,EAAO,mBACP0/G,EAAkB,mBAClB34G,EAAkB,mBAClB64G,EAAkB,qBAClBf,EAAoB,qBACpBh3H,EAAoB,mBACpBu2H,GAAkB,YAClBnkI,GAAW,cACX1U,GAAa,uBACb44I,IACDr9I,EACC,MAAM,SACJ++I,GAAQ,mBACRC,GAAkB,yBAClBC,GAAwB,2BACxBC,GAA0B,eAC1BrmI,GAAc,iBACdsmI,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtBlmG,GAAe,iBACfmmG,GAAgB,sBAChBC,GAAqB,kBACrBC,GAAiB,qBACjB3mG,GAAoB,uBACpB4mG,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxB3xG,GAAU,cACV4xG,GAAa,eACblhH,GAAc,gBACdmhH,GAAe,iBACf3xH,GAAgB,wBAChB4xH,GAAuB,kBACvBC,GAAiB,aACjBC,GAAY,gBACZC,GAAe,SACfz8I,GAAQ,iBACRs/D,GAAgB,wBAChBjqB,GAAuB,gBACvBj2C,GAAe,iBACfs9I,GAAgB,oBAChBtnG,GAAmB,0BACnBunG,GAAyB,wBACzBC,KACE1nI,EAAAA,EAAAA,MAEA5B,EAAAA,MAAUgmI,KACZA,IAAiB,EAEjB/lI,QAAQ4f,IAAI,qBAId4qB,EAAAA,GAAAA,IAAW,MACJ8+F,EAAAA,GAAAA,IAAWzjG,GAAAA,GAAAA,MAAc,GAtGG,KAyGnC,MAAO0jG,GAA0BC,KAAgC5/F,EAAAA,GAAAA,IAAQ,IACzEY,EAAAA,GAAAA,GAAWg/F,GAzG4B,KA4GvC,MAAM3tF,IAAerS,EAAAA,EAAAA,IAAuB,MAEtCy8E,IAAgBz8E,EAAAA,EAAAA,IAAuB,OAEvC,UAAEg9E,KAAcp8E,EAAAA,EAAAA,OACtBnF,EAAAA,EAAAA,KAAU,KACHohG,GAAqBC,GAAuB9f,GAGtC6f,GAAoBC,GAAsBn8F,GAEnD4hB,KAHAA,IAIF,GACC,CAACy6D,GAAW6f,EAAkBC,EAAoBn8F,EAAU4hB,MAE/D9mB,EAAAA,EAAAA,KAAU,KACJkF,KACIk8F,IAAqBE,GAAsBA,KAC/CxsF,EAAAA,EAAAA,IAAe,4BAEnB,GACC,CAAC5P,EAAUk8F,EAAkBC,EAAoBC,KAEpD7yD,EAAAA,GAAAA,GAAYw1D,GAAkBlnI,KAAgB/V,EAAAA,IArIhB,SAqIyD3C,GAAW,IAElG27C,EAAAA,EAAAA,KAAU,KACR,IAAKh5C,EAAAA,IACH,OAGF,MAAMw9I,EAAiCv9I,OAAOC,UAAUu9I,GAAGC,EAAAA,EAAAA,mBAAiC,KAC1FN,IAAwB,EAAK,IAGzBO,EAA4B19I,OAAOC,UAAUu9I,GAAGC,EAAAA,EAAAA,cAA4B,KAChFN,IAAwB,GACxBI,KAAkC,IAGpC,MAAO,KACLG,MACAH,KAAkC,CACnC,GACA,KAGHxkG,EAAAA,EAAAA,KAAU,KACJ9iB,GAAgBngB,KAClBN,IAAe,GACfu1B,KACA4xG,KACAjB,KACAQ,KACAP,KACAkB,KACAjB,KACAC,KACAE,KACAC,GAAkB,CAAEtuH,SAAUi0F,EAAAA,MAC9BlmF,KACAmhH,KACAT,KACAC,KACAY,KACAC,KACAtnG,KACAunG,KACF,GACC,CACDjnH,EAAc0lH,GAAoBK,GAAmBH,GAA4BD,GACjFG,GAAmBvmI,GAAgB0mI,GAAwBS,GAAelhH,GAAgBmhH,GAC1FT,GAAkBa,GAAiBjyG,GAAY8xG,GAAyBT,GAAuBa,GAC/FX,GAAwB3mG,GAAqBC,GAAyBlyB,EAAsB5N,GAAa4lI,MAI3G3iG,EAAAA,EAAAA,KAAU,KACJ9iB,GAAgBngB,IAAe4N,IACjC44H,KACA1mG,KACF,GACC,CAAClyB,EAAsB5N,GAAamgB,EAAcqmH,GAAwB1mG,MAG7EmD,EAAAA,EAAAA,KAAU,KACJ9iB,GAAgBngB,KACd4X,IAAai0F,EAAAA,KACfq6B,GAAkB,CAAEtuH,SAAUA,IAGhCuuH,GAAgB,CAAE0B,SAAUjwH,IAC9B,GACC,CAACA,EAAUuI,EAAcgmH,GAAiBD,GAAmBlmI,MAGhEyoC,EAAAA,GAAAA,IAAsBh0C,IAAwB,IAAtBqzI,GAAiBrzI,GAClCqzI,GAAoB3nH,GAAgBngB,IACvCmV,GAAiB,CACfrkB,IAAKpC,OAAOC,MAAKuB,EAAAA,EAAAA,MAAYqJ,aAAakL,MAC1CuK,aAAa,GAEjB,GACC,CAACmR,EAAcngB,GAAamV,MAG/B8tB,EAAAA,EAAAA,KAAU,KACJ9iB,GAAgBngB,KACboV,GAAgB+vH,IACnBjlG,KACAN,MAGExqB,GAAe+vH,GACjBoB,KAEJ,GACC,CACDpmH,EAAc/K,EAAa8qB,GAAiBN,GAAsB2mG,GAAmBpB,EACrFnlI,MAIFijC,EAAAA,EAAAA,KAAU,KACJ9iB,GAAgB8kH,GAAsBjlI,IACxC4mI,IACF,GACC,CAACzmH,EAAc8kH,EAAoB2B,GAA0B5mI,MAGhEijC,EAAAA,EAAAA,KAAU,KACJ9iB,IAAiB6jH,GACnByC,IACF,GACC,CAACtmH,EAAc6jH,EAA0ByC,MAG5CxjG,EAAAA,EAAAA,KAAU,KACR,MAAM8kG,GAA4BC,EAAAA,EAAAA,MAC9B7nH,GAAgB4nH,GAA2BE,SAC7CC,EAAAA,GAAAA,IAAgBC,mBAAmBJ,EAA0BE,QAC/D,GACC,CAAC9nH,KAEJsoB,EAAAA,GAAAA,IAAsB/kC,IAAwB,IAAtBokI,GAAiBpkI,EACvC,MAAM0kI,GAAqBC,EAAAA,EAAAA,MACtBD,IAEAN,GAAoB3nH,GACvB11B,GAAS,CACPpC,GAAI+/I,EAAmBlhJ,OACvBC,SAAUihJ,EAAmBjhJ,SAC7BoB,KAAM6/I,EAAmB7/I,MAE7B,GACC,CAAC43B,EAAc11B,MAGlBswD,EAAAA,EAAAA,KAAgB,KACd,MAAMspB,EAAYxqB,GAAaviC,QACiB,IAA5C+sD,EAAUikE,WAAYC,oBACxBlxC,EAAAA,EAAAA,IAAchzB,EAAW,0BAC3B,GACC,IAEH,MAAMmkE,IAAuB12F,EAAAA,GAAAA,GAC3BuyF,OAAkB/8I,GAAW,OAAMA,EAAWwnD,OAA6BxnD,GAAW,GAElFmhJ,IAA2BjhG,EAAAA,EAAAA,KAAO,GAClCqrC,IAAcC,EAAAA,GAAAA,MAGpB35B,EAAAA,GAAAA,IAAc/0C,IAA4B,IAA1BskI,GAAqBtkI,EACnC,QAA6B9c,IAAzBohJ,GAAsCrE,IAAqBqE,IAAyBvlB,EACtF,OAGFslB,GAAyBnxH,SAAU,EAE/BiN,EAAAA,KACFszF,EAAAA,EAAAA,KAAoB,KAClB7gH,SAAS43B,KAAKm+B,UAAU06D,OAAO,8BAA+B4c,EAAiB,IAInF,MAAMsE,GAA4B1hD,EAAAA,GAAAA,OAElC2hD,EAAAA,GAAAA,GAAqB5xI,SAASyhD,eAAe,iBAAkB,KAC7DkwF,IACAF,GAAyBnxH,SAAU,EACnCu7D,IAAa,GACb,GACD,CAACwxD,EAAkBlhB,EAAyBtwC,KAE/C,MAAMg2D,IAAwB/2F,EAAAA,GAAAA,GAC5ByyF,OAAmBj9I,GAAW,OAAMA,EAAWwnD,OAA6BxnD,GAAW,GAEnFwhJ,IAA4BthG,EAAAA,EAAAA,KAAO,IAClCuhG,GAAqBC,KAA0BtkG,EAAAA,EAAAA,IAAS6/F,GAEzDh4F,IAAeC,EAAAA,GAAAA,OAGrB2M,EAAAA,GAAAA,IAAc70C,IAAqD,IAAnD2kI,EAAwBC,GAAsB5kI,EAC5D,QAA8Bhd,IAA1B4hJ,GAAuC3E,IAAsB2E,EAC/D,OAGF,IAAKD,GAA0B/E,GAE7B,YADA8E,GAAuBzE,GAIzBuE,GAA0BxxH,SAAU,EAEpC,MAAMqxH,GAA4B1hD,EAAAA,GAAAA,OAElC2hD,EAAAA,GAAAA,GAAqB5xI,SAASyhD,eAAe,gBAAiB,KAC5DkwF,IACAG,GAA0BxxH,SAAU,EACpCu7D,KACAm2D,GAAuBzE,EAAkB,GACzC,GACD,CAACD,EAAoBC,EAAmBL,GAAwBrxD,KAEnE,MAAMz7D,IAAYuvB,EAAAA,GAAAA,GAChB6hG,GAAqBW,eAAiB,oBACtCX,GAAqBY,cAAgB,mBACrCX,GAAyBnxH,SAAW,wBACpCuxH,GAAsBM,eAAiB,qBACvCN,GAAsBO,cAAgB,oBACtCN,GAA0BxxH,SAAW,yBACrCyxH,IAAuB,sBACvBj6F,GAA+B,6BAC/BvC,IAAgB,iBAGZ+tE,IAAat3E,EAAAA,GAAAA,IAAgB,KACjCgjG,GAAiB,CAAE5nI,WAAW,GAAO,IAGjC+kF,IAAcngD,EAAAA,GAAAA,IAAgB,KAClCgjG,GAAiB,CAAE5nI,WAAW,IAEzBpH,SAASO,MAAMjG,SAASuN,EAAAA,MAC3BhV,KAGFiN,GAAW,EAAM,IAGbuyI,IAA6BrmG,EAAAA,GAAAA,IAAgB,KACjD0jG,IAAsB,IAGlB4C,IAAkCtmG,EAAAA,GAAAA,IAAgB,KACtD2jG,IAAsB,IAQxB,OAJAt4C,EAAAA,GAAAA,GAAkBisB,GAAYn3B,IAC9BtgD,GAAgBy3E,I5LpgBH,WAAwD,IAApB/1E,EAAU59C,UAAAC,OAAA,QAAAU,IAAAX,UAAA,IAAAA,UAAA,IAC3Ds8C,EAAAA,EAAAA,KAAU,KACR,GAAKhwC,EAAAA,GAAL,CAIA,IAAIsxC,EAgBJ,OATArB,IAAcw3B,aAAa,UAAWt3B,IAKlCn8B,EAAAA,KAAWsiI,EAAAA,IACbvyI,SAAS8tC,iBAAiB,eAAgBvB,IAGrC,KACLL,IAAcw3B,aAAa,UAAW,yDAClCzzD,EAAAA,KAAWsiI,EAAAA,IACbvyI,SAAS+tC,oBAAoB,eAAgBxB,GAC/C,EAjBAL,IAAcw3B,aAAa,UAAWp3B,GALxC,CAuBC,GACA,CAACiB,GACN,C4LweEilG,CAA2BhF,GAGzB1gG,EAAAA,GAAAA,cAAA,OAAKiF,IAAK8Q,GAAcxxD,GAAG,OAAO+uB,UAAWA,IAC3C0sB,EAAAA,GAAAA,cAAC2lG,GAAU,CAAC1gG,IAAKk7E,KACjBngF,EAAAA,GAAAA,cAAC4lG,GAAY,CAACzlB,cAAeA,GAAe97E,SAAUA,IACtDrE,EAAAA,GAAAA,cAAC6lG,GAAW,CAACxhG,SAAUA,IACvBrE,EAAAA,GAAAA,cAACg6F,GAAW,CAAC/0I,OAAQy7I,IACrB1gG,EAAAA,GAAAA,cAACm8F,GAAsB,CAACl3I,OAAQ27I,IAChC5gG,EAAAA,GAAAA,cAAC4/F,GAAoB,CAAC74I,eAAgBA,IACtCi5C,EAAAA,GAAAA,cAACi8F,GAAa,CAACh3I,OAAQ+7I,IACvBhhG,EAAAA,GAAAA,cAACk8F,GAAO,CAACj3I,OAAQg8I,IAChBj9E,GAAgBhkB,EAAAA,GAAAA,cAACuqB,GAAW,CAAC/tB,IAAKwnB,EAAaz/D,GAAIgE,QAASy7D,EAAc5G,MAAI,IAC/Epd,EAAAA,GAAAA,cAACo8F,GAAa,CAAC/kI,IAAKC,IACpB0oC,EAAAA,GAAAA,cAACq/F,GAAY,CAACp9G,QAASA,EAASk+G,YAAaA,IAC7CngG,EAAAA,GAAAA,cAACq8F,GAAe,CAACp3I,OAAQi8I,IACzBlhG,EAAAA,GAAAA,cAACH,GAAe,CACd56C,OAAQqF,QAAQwO,GAChB0sC,QAAS+/F,GACTO,oBAAqBhtI,IAEvBknC,EAAAA,GAAAA,cAAC2/F,GAAoB,CACnBluH,kBAAmB1Y,EACnBysC,QAASggG,KAEVtoG,GAAqB8C,EAAAA,GAAAA,cAACs8F,GAAS,CAAC1+F,YAAaV,IAC9C8C,EAAAA,GAAAA,cAACu8F,GAAgB,CAACroI,SAAU5J,QAAQ4yC,GAAqBkkG,KACzDphG,EAAAA,GAAAA,cAAC68F,GAAe,CACd53I,OAAQqF,QAAQg3I,GAAoBC,GACpC3uI,OAAQ0uI,EACRxuI,gBAAiByuI,IAEnBvhG,EAAAA,GAAAA,cAACggG,GAAa,CAACD,KAAMv4I,KACrBw4C,EAAAA,GAAAA,cAAC+lG,GAAS,CAAC9tI,WAAYA,EAAYujI,UAAWA,IAC9Cx7F,EAAAA,GAAAA,cAAC+8F,GAAW,CAACj2G,OAAQA,IACrBkZ,EAAAA,GAAAA,cAACgmG,GAAe,MAChBhmG,EAAAA,GAAAA,cAACimG,GAAiB,MAClBjmG,EAAAA,GAAAA,cAACw8F,GAAS,CAACtoI,SAAUktI,IACrBphG,EAAAA,GAAAA,cAACkmG,GAAW,CAACjmG,eAAa,IAC1BD,EAAAA,GAAAA,cAAC88F,GAAkB,CAAC73I,OAAQu8I,IAC5BxhG,EAAAA,GAAAA,cAACg9F,GAAa,CACZt7G,IAAK+/G,EACLh9I,KAAMqT,GAAiBrT,KACvB09B,yBAA0BrqB,GAAiBqqB,2BAE7C6d,EAAAA,GAAAA,cAACi9F,GAAqB,CAACv7G,IAAKggH,IAC5B1hG,EAAAA,GAAAA,cAAC6/F,GAAwB,CAAC73G,yBAA0BA,IACpDgY,EAAAA,GAAAA,cAACmmG,GAAyB,MACzBxE,GAAsB3hG,EAAAA,GAAAA,cAACs/F,GAAgB,CAACr6I,OAAQ08I,IACjD3hG,EAAAA,GAAAA,cAACy/F,GAAwB,CAAC7mI,MAAOgpI,IACjC5hG,EAAAA,GAAAA,cAACu/F,GAAY,CAACt6I,OAAQ+jC,EAAoBwc,QAAS09F,KACnDljG,EAAAA,GAAAA,cAACw/F,GAAY,CAACv6I,OAAQ48I,EAAoBr8F,QAAS29F,KACnDnjG,EAAAA,GAAAA,cAAC0/F,GAAkB,CAAC33H,OAAQs4H,KAC5BrgG,EAAAA,GAAAA,cAAC8/F,GAAc,CAAC76I,OAAQ67I,EAAsB/9D,WAAY0gE,KACtD,K,kECliBV,MAqHA,IAAe9jG,EAAAA,EAAAA,KAAK2D,EAAAA,EAAAA,KACjB3gD,IACQ,CACLyjJ,iBAAkBzjJ,EAAOyY,YAHXkoC,EAnH0BvgD,IAGxC,IAHyC,SAC7CsjJ,EAAQ,iBACRD,GACDrjJ,EACC,MAAM,aACJgc,EAAY,QACZunI,EAAO,wBACPtnI,EAAuB,2BACvBunI,IACE1qI,EAAAA,EAAAA,OAEE,qBACJ8C,EAAoB,aACpBO,EAAY,UACZ/B,GACEipI,EAEEp+I,GAAO25C,EAAAA,GAAAA,MACN6kG,EAAiBC,IAAsB7lG,EAAAA,EAAAA,IAAiB,KACxD8lG,EAAoBC,IAAyB/lG,EAAAA,EAAAA,KAAS,IACtDgmG,EAAqBC,EAAyBC,IAA4BhjG,EAAAA,GAAAA,IAAQ,IACnF,aAAE+J,IAAiBG,EAAAA,GAAAA,GAAkBq4F,IAE3C3hG,EAAAA,GAAAA,GAAW6hG,EAA4BrnI,EAAeA,EAAe3P,KAAKC,WAAQhM,GAElF,MAAMujJ,GAAmBjiG,EAAAA,EAAAA,KAAY,KACnC2hG,EAAmB,GAAG,GACrB,IAEGO,GAAeliG,EAAAA,EAAAA,KAAa1pC,SACX5X,IAAjB0b,GAKJunI,EAAmB,KACnB3nI,EAAAA,EAAAA,IAAe1D,GAAUzB,KAAKoF,GAAc,KAC1CC,IACAynI,EAAmBz+I,EAAK,sBAAsB,KAP9Cy+I,EAAmBz+I,EAAK,aAQxB,GACD,CAACA,EAAMkX,KAEVigC,EAAAA,EAAAA,KAAU,UACa37C,IAAjB0b,EACFunI,EAAmBz+I,EAAK,cACU,IAAzB2W,GACT8nI,EAAmB,GACrB,GACC,CAACvnI,EAAclX,EAAM2W,IAExB,MAAMsoI,GAAuBniG,EAAAA,EAAAA,KAAY,KACvCgiG,IACAR,EAAQ,CAAEY,cAAc,GAAO,GAC9B,CAACJ,EAA0BR,IAE9B,GAAKz4F,EAoBL,OACE7N,EAAAA,GAAAA,cAAA,OAAK1sB,UC7GmB,wBD8GtB0sB,EAAAA,GAAAA,cAAA,OAAK1sB,UC9GkD,uBD8GvBsuB,IAAK55C,EAAK65C,MAAQ,WAAQr+C,GACxDw8C,EAAAA,GAAAA,cAACmnG,GAAAA,EAAuB,CACtB9nE,OAAQ+nE,GAAAA,EAAAA,KACRC,WAAYC,GACZnlG,KAnFQ,IAoFR7uB,UCnHiF,yBDsHnF0sB,EAAAA,GAAAA,cAACunG,GAAAA,EAAY,CACX/qG,IAAI,gBACJgrG,kBAAgB,EAChBC,8BAA4B,EAC5BtqI,UAAWA,EACXhD,MAAOqsI,EACPx8F,YAAahiD,EAAK,qCAClB0/I,YAAa1/I,EAAK,QAClB2/I,WAAYZ,EACZa,kBAAmBlB,EACnBmB,UAAQ,EACRC,2BAA4BnB,EAC5BoB,SAAUf,IApCdhnG,EAAAA,GAAAA,cAAA,OAAK1sB,UC9F8G,wBD+FjH0sB,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAACgoG,GAAAA,EAAI,CAACtmG,QAASmlG,GAAyB,WAAe,IAAI,wCAG7D7mG,EAAAA,GAAAA,cAAA,SACEA,EAAAA,GAAAA,cAACkC,GAAAA,EAAM,CAACH,MAAM,cAAcI,KAAK,OAAOuhB,QAAM,EAAChiB,QAASmlG,GACrD7+I,EAAK,8BAmCZg4C,EAAAA,GAAAA,cAACoZ,GAAAA,EAAa,CACZn0D,OAAQ2hJ,EACRphG,QAASshG,EACTlgJ,KAAMoB,EAAK,mBACXqxD,aAAcrxD,EAAK,0BACnBsxD,eAAgB2tF,EAChBtjF,sBAAoB,IAElB,KEzIN1pD,EAAAA,KAEFC,QAAQ4f,IAAI,+BAGd,MAAQ1e,UAAU,eAAEC,IAAgB,gBAAEkhB,KAAoBnwB,EAAAA,EAAAA,MACrDmwB,IAAoBlhB,IAAmB4sI,EAAAA,KAC1CpsI,EAAAA,EAAAA,MAAagD,S","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n  selectPinnedIds,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\nimport { sendPushNotification } from '../../../util/tlCustomFunction';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { ...notification } = payload;\n  sendPushNotification(notification.message);\n  // const { tabId = getCurrentTabId(), ...notification } = payload;\n  // notification.localId = generateIdFor({});\n\n  // const newNotifications = [...selectTabState(global, tabId).notifications];\n  // const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  // if (existingNotificationIndex !== -1) {\n  //   newNotifications.splice(existingNotificationIndex, 1);\n  // }\n\n  // newNotifications.push(notification as ApiNotification);\n\n  // return updateTabState(global, {\n  //   notifications: newNotifications,\n  // }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isDeletedUser,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  if (!messageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = messageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: messageList.threadId,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  replyingToTopId?: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (!params.replyingTo && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport useLastCallback from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  // ANIMATION_LEVEL_MAX,\n  // ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  // BETA_CHANGELOG_URL,\n  DEBUG,\n  // FEEDBACK_URL,\n  IS_BETA,\n  // IS_TEST,\n  IS_ELECTRON,\n  // PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_APP } from '../../../util/windowEnvironment';\n// import {\n//   INITIAL_PERFORMANCE_STATE_MAX,\n//   INITIAL_PERFORMANCE_STATE_MID,\n//   INITIAL_PERFORMANCE_STATE_MIN,\n// } from '../../../global/initialState';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\n// import { setPermanentWebVersion } from '../../../util/permanentWebVersion';\n// import { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n// import { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n// import Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n// import Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\n// const WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  // shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  // animationLevel,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  // canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    // skipLockOnUnload,\n    // openUrl,\n    // updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  // const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon no-animation state-back',\n          // !hasMenu && 'state-back',\n          // shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  // const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n  //   // No action in here/ default dark mode\n  //   e.stopPropagation();\n  //   const newTheme = theme === 'light' ? 'dark' : 'light';\n  //   setSettingOption({ theme: newTheme });\n  //   setSettingOption({ shouldUseSystemTheme: false });\n  // });\n\n  // const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n  //   e.stopPropagation();\n\n  //   let newLevel = animationLevel + 1;\n  //   if (newLevel > ANIMATION_LEVEL_MAX) {\n  //     newLevel = ANIMATION_LEVEL_MIN;\n  //   }\n  //   const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n  //     ? INITIAL_PERFORMANCE_STATE_MIN\n  //     : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n  //   setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  //   updatePerformanceSettings(performanceSettings);\n  // }, [animationLevel, setSettingOption]);\n\n  // const handleChangelogClick = useCallback(() => {\n  //   window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  // }, []);\n\n  // const handleSwitchToWebK = useCallback(() => {\n  //   setPermanentWebVersion('K');\n  //   clearWebsync();\n  //   skipLockOnUnload();\n  // });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  // const handleBugReportClick = useLastCallback(() => {\n  //   openUrl({ url: FEEDBACK_URL });\n  // });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  // const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n  //   ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n  //   : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      {/* <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem> */}\n      {/* <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem> */}\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      {/* <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem> */}\n      {/* {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )} */}\n      {/* {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )} */}\n      {/* {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )} */}\n    </>\n  ), [\n    archivedUnreadChatsCount, lang, handleOpenTipsChat, handleSelectSaved,\n    onSelectArchived, onSelectContacts, onSelectSettings, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n            /**\n             * TL - Trigger hide hamburger menu when search input focused in\n             */\n            isSearchFocused ? 'custom-dropdown-invisible' : 'custom-dropdown-visible',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n            'custom-style',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'gray' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { handleScrollUnactiveTab } from '../../../util/tlCustomFunction';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(global, id);\n\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n            } else {\n              openShareChatFolderModal({\n                folderId: id,\n              });\n            }\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [displayedFolders, folderCountersById, lang, maxFolders, folderInvitesById, maxFolderInvites]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    handleScrollUnactiveTab();\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        allowAbsoluteHeader\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {\n        /**\n         * TL - Fix header issue when ChatList screen is rendered\n         */\n      }\n      <div id=\"left-main-header\" className={`${content === LeftColumnContent.ChatList ? 'fix-issue' : ''}`}>\n        <LeftMainHeader\n          shouldHideSearch={isForumPanelVisible}\n          content={content}\n          contactsFilter={contactsFilter}\n          onSearchQuery={onSearchQuery}\n          onSelectSettings={handleSelectSettings}\n          onSelectContacts={handleSelectContacts}\n          onSelectArchived={handleSelectArchived}\n          onReset={onReset}\n          shouldSkipTransition={shouldSkipTransition}\n          isClosingSearch={isClosingSearch}\n        />\n      </div>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_APP, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  useEffect(() => {\n    switch (content) {\n      case 2:\n      case 3:\n      case 5:\n      case 6:\n      case 7:\n      case 8:\n        sendScreenName('tl_navigation_otherScreen');\n        break;\n    }\n  }, [content]);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((!isArchived && noChatOrForumOpen && isChatList)\n        || (!isArchived && noChatOrForumOpen && !isChatList)) {\n        sendScreenName('tl_navigation_mainScreen');\n      } else {\n        sendScreenName('tl_navigation_otherScreen');\n      }\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      className=\"tl-custom-padding\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nexport const MIN_MEDIA_WIDTH_WITH_COMMENTS = 20 * REM;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 15 * REM;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 20 * REM;\nconst MIN_MEDIA_WIDTH = 7 * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  messageId: number,\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n  selectCanPlayAnimatedEmojis,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.id, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useLastCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        user={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useRef, useLayoutEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useLayoutEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleQuickButtonClick = useLastCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            lastSyncTime={lastSyncTime}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.classList.add('has-appendix-thumb');\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - getThrottledProgress() * circumference;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    requestMutation(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => (\n            <Avatar\n              key={user.id}\n              user={user}\n              size=\"micro\"\n            />\n          ))}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  getMinMediaWidth,\n  calculateMediaDimensions,\n  MIN_MEDIA_WIDTH_WITH_COMMENTS,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, !IS_ELECTRON, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWidthWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, messageId, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < (isMediaWidthWithCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), isMediaWidthWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderQuickReactionButton() {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string) {\n  const [language, setLanguage] = useState<string>();\n\n  useSyncEffect(() => {\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    }\n  }, [text]);\n\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback((selectedSticker: ApiSticker) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker, messageList: currentMessageList });\n  });\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectUserFullInfo,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n  isLocalMessageId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/windowEnvironment';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          animateScroll(\n            container,\n            lastItemElement!,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  });\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  });\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useLastCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  });\n\n  const handleCloseMenu = useLastCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  });\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    setMenuPosition(undefined);\n  });\n\n  const handleRemoveBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  });\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  isChatWithBot: boolean;\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  handleSendCrypto: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  isChatWithBot,\n  onFileSelect,\n  onPollCreate,\n  handleSendCrypto,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useLastCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  });\n\n  const handleFileSelect = useLastCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  });\n\n  const handleQuickSelect = useLastCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  });\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {/* {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )} */}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n        {\n          /**\n           * TL - Add send crypto button to attachments\n           * Description: Only chat 1-1 (except with bot and self) or group has this button\n           */\n        }\n        {!isChatWithBot && Number(chatId) >= 0 && (\n          <MenuItem\n            icon=\"lock\"\n            className=\"margin-left-1px\"\n            customIcon={(\n              <img className=\"icon\" src=\"./wallet_20px.svg\" alt=\"\" />\n            )}\n            onClick={handleSendCrypto}\n          >\n            {lang('Send Crypto')}\n          </MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useLastCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useLastCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  });\n\n  const handleChangeRecipientClick = useLastCallback(() => {\n    changeForwardRecipient();\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiFormattedText, ApiMessage, ApiMessageEntityTextUrl, ApiWebPage,\n} from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseMessageInput(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft, MessageList,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, cancelForceShowSymbolMenu);\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useLastCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  });\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady' || !currentMessageList) {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      messageList: currentMessageList,\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetOrder,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  });\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady' || !currentMessageList) {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n        messageList,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n      });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady' || !currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt, currentMessageList);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n        messageList: currentMessageList,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt, currentMessageList);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ messageList: currentMessageList, poll });\n      closePollModal();\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        if (!currentMessageList) {\n          return;\n        }\n\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt, currentMessageList!);\n        });\n        break;\n      default:\n        break;\n    }\n  });\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n  );\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendSilent();\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleMessageSchedule({}, SCHEDULED_WHEN_ONLINE, currentMessageList!);\n  });\n\n  const handleSendScheduledAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilentAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  });\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  /**\n   * TL - Send a post message to Timeless Wallet\n   * Description: The data is an object with 2 properties: chatId and threadId\n   */\n  const handleSendCrypto = () => {\n    (window as any).webkit?.messageHandlers?.sendCrypto.postMessage({\n      chatId,\n    });\n  };\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            isChatWithBot={isChatWithBot || isChatWithSelf}\n            handleSendCrypto={handleSendCrypto}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const {\n      language, shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder,\n    } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n    };\n  },\n)(Composer));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { RefObject } from 'react';\nimport React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n  pinnedIds?: number[];\n  topMessageId?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n  pinnedIds,\n  topMessageId,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id) && lastSyncTime,\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  /**\n   * TL - Send a post message to Timeless Wallet\n   * Description: The data is an object with 2 properties: chatId and threadId\n   */\n  const handleSendCrypto = () => {\n    (window as any).webkit?.messageHandlers?.sendCrypto.postMessage({\n      chatId,\n      threadId,\n    });\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {\n                /**\n                 * TL - Custom send crypto button\n                 */\n                !isBot && Number(chatId) >= 0 && (\n                  <Button\n                    round\n                    color=\"translucent\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Send Crypto')}\n                    onClick={handleSendCrypto}\n                  >\n                    <img src=\"./wallet_24px.svg\" alt=\"\" />\n                  </Button>\n                )\n              }\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && !isBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default memo(ReactionPickerAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default memo(ChatlistModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\nimport { sendScreenName } from '../../util/tlCustomFunction';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useEffect(() => {\n    if (isMobile) {\n      if ((!isLeftColumnOpen && !isRightColumnOpen) || isRightColumnOpen) {\n        sendScreenName('tl_navigation_otherScreen');\n      }\n    }\n  }, [isMobile, isLeftColumnOpen, isMiddleColumnOpen, isRightColumnOpen]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron?.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron?.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons, loadTopReactions,\n    loadDefaultStatusIcons, loadRecentReactions, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab, initMain,\n  ]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, lastSyncTime, loadDefaultStatusIcons, loadRecentEmojiStatuses]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","_len","arguments","length","_ref","Array","_key","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","window","electron","openNewWindow","open","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","filter","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","pinnedMessageIds","selectPinnedIds","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","forceOnHeavyAnimation","direction","loadViewportMessages","shouldForceRender","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","split","slice","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","_ref2","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","prevIsScreenLocked","force","leftColumnWidth","management","byChatId","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","sendPushNotification","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","newNotifications","notifications","localId","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","findIndex","err","splice","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","settings","byKey","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","topics","onlineTimeout","prevBlurredTabsCount","addCallback","updateIsOnline","getActions","isLockedUpdated","blurredTabsCount","values","byTabId","isMasterTab","newBlurredTabsCount","getAllMultitabTokens","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","_len2","_ref3","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","callApi","users","repliesThreadInfos","localMessages","_ref4","isDeleted","_ref5","allMessages","concat","byId","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","currentThreadId","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","isPinned","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","originChannelId","selectThreadOriginChat","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","loadMessageViews","_ref6","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","releaseStatusTimeout","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","activeThreadId","threadInfo","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","_ref7","threads","updateThread","_ref8","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","currentReactions","reactions","isReactionChosen","chosenOrder","reaction","existingIndex","r","isSameReaction","recentReactions","addedDate","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","selectDefaultReaction","isMessageLocal","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","isActionMessage","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","removeChatFromChatLists","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","React","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","searchQuery","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","menuItems","MenuItem","icon","DropdownMenu","trigger","footer","APP_NAME","positionX","transformOriginX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","handleScrollUnactiveTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","allowAbsoluteHeader","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","shouldSkipTransition","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","sendScreenName","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","isChatList","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","label","checked","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_COMMENTS","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playingProgressEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","chatsById","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","contextMenuTarget","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","isMediaWidthWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","chatBotFullInfo","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","appendChild","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","URL_ENTITIES","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","isTouchScreen","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","documentElement","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","handleSendCrypto","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","isMounted","setIsMounted","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","canUpdateStickerSetsOrder","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","webkit","messageHandlers","sendCrypto","postMessage","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","n","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}